{
  "Python/0": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\nassert has_close_elements([], 0.5) == False",
  "Python/1": "assert separate_paren_groups(\"(()())\") == [\"(()())\"]\nassert separate_paren_groups(\"((()))\") == [\"((()))\"]\nassert separate_paren_groups(\"(())(())\") == [\"(())\", \"(())\"]\nassert separate_paren_groups(\"((())())((()))\") == [\"((())())\", \"((()))\"]\nassert separate_paren_groups(\"()()()\") == [\"()\", \"()\", \"()\"]",
  "Python/2": "assert truncate_number(10.0) == 0.0\nassert truncate_number(0.0) == 0.0",
  "Python/3": "assert below_zero([-1, 1, -2, 1]) == True\nassert below_zero([1, 1, 1, 1]) == False\nassert below_zero([-1, -1, -1]) == True\nassert below_zero([0, 0, 0]) == False\nassert below_zero([-1, 2, -3, 4, -5]) == True",
  "Python/4": "assert mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.2\nassert mean_absolute_deviation([1.0, 1.0, 1.0]) == 0.0\nassert mean_absolute_deviation([2.0, 4.0, 6.0, 8.0]) == 2.0\nassert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0\nassert mean_absolute_deviation([-1.0, 0.0, 1.0]) == 0.6666666666666666",
  "Python/5": "assert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\nassert intersperse([1], 5) == [1]\nassert intersperse([], 10) == []\nassert intersperse([4, 5, 6, 7], -1) == [4, -1, 5, -1, 6, -1, 7]\nassert intersperse([2, 2, 2], 2) == [2, 2, 2, 2, 2]",
  "Python/6": "assert parse_nested_parens(\"((()))\") == [3]\nassert parse_nested_parens(\"\") == []",
  "Python/7": "assert filter_by_substring([\"hello\", \"world\", \"helloworld\"], \"world\") == [\"world\", \"helloworld\"]\nassert filter_by_substring([\"apple\", \"banana\", \"orange\"], \"grape\") == []\nassert filter_by_substring([\"abc\", \"def\", \"ghi\"], \"\") == [\"abc\", \"def\", \"ghi\"]\nassert filter_by_substring([\"test\", \"testing\", \"tester\"], \"test\") == [\"test\", \"testing\", \"tester\"]\nassert filter_by_substring([\"a\", \"aa\", \"aaa\"], \"aa\") == [\"aa\", \"aaa\"]",
  "Python/8": "assert sum_product([1, 2, 3]) == (6, 6)\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert sum_product([2, -2, 3]) == (3, -12)\nassert sum_product([1]) == (1, 1)\nassert sum_product([0, 1, 2]) == (3, 0)",
  "Python/9": "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]\nassert rolling_max([1, 3, 2, 4, 5]) == [1, 3, 3, 4, 5]\nassert rolling_max([]) == []\nassert rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
  "Python/10": "assert make_palindrome(\"race\") == \"racecar\"\nassert make_palindrome(\"a\") == \"a\"\nassert make_palindrome(\"\") == \"\"",
  "Python/11": "assert string_xor(\"1010\", \"0101\") == \"1111\"\nassert string_xor(\"1111\", \"1111\") == \"0000\"\nassert string_xor(\"0000\", \"0000\") == \"0000\"\nassert string_xor(\"1001\", \"1100\") == \"0101\"\nassert string_xor(\"0110\", \"1001\") == \"1111\"",
  "Python/12": "assert longest([\"hello\", \"world\", \"hi\"]) == \"hello\"\nassert longest([\"a\", \"bb\", \"ccc\"]) == \"ccc\"\nassert longest([\"abc\", \"defg\", \"hijk\"]) == \"defg\"\nassert longest([\"one\", \"two\", \"three\"]) == \"three\"\nassert longest([]) is None",
  "Python/13": "assert greatest_common_divisor(12, 18) == 6\nassert greatest_common_divisor(25, 15) == 5\nassert greatest_common_divisor(7, 13) == 1\nassert greatest_common_divisor(48, 36) == 12\nassert greatest_common_divisor(100, 25) == 25",
  "Python/14": "assert all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert all_prefixes(\"\") == []\nassert all_prefixes(\"a\") == [\"a\"]\nassert all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\nassert all_prefixes(\"12345\") == [\"1\", \"12\", \"123\", \"1234\", \"12345\"]",
  "Python/15": "assert string_sequence(0) == \"0\"\nassert string_sequence(1) == \"0 1\"\nassert string_sequence(2) == \"0 1 2\"\nassert string_sequence(5) == \"0 1 2 3 4 5\"\nassert string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"",
  "Python/16": "assert count_distinct_characters(\"hello\") == 4\nassert count_distinct_characters(\"World\") == 5\nassert count_distinct_characters(\"AaBbCc\") == 3\nassert count_distinct_characters(\"\") == 0",
  "Python/17": "assert parse_music(\"o o| .|\") == [4, 2, 1]\nassert parse_music(\"o\") == [4]\nassert parse_music(\"o| .|\") == [2, 1]\nassert parse_music(\"\") == []\nassert parse_music(\"o o o o\") == [4, 4, 4, 4]",
  "Python/18": "assert how_many_times(\"hello\", \"lo\") == 1\nassert how_many_times(\"hello\", \"ll\") == 1\nassert how_many_times(\"aaaa\", \"aa\") == 3\nassert how_many_times(\"abcabcabc\", \"abc\") == 3\nassert how_many_times(\"abc\", \"abcd\") == 0",
  "Python/19": "assert sort_numbers(\"one two three\") == \"one two three\"\nassert sort_numbers(\"zero nine five two\") == \"zero two five nine\"\nassert sort_numbers(\"eight one seven\") == \"one seven eight\"\nassert sort_numbers(\"  four  six  \") == \"four six\"\nassert sort_numbers(\"nine nine nine\") == \"nine nine nine\"",
  "Python/20": "assert find_closest_elements([1.0, 2.0, 3.0, 4.0]) == (1.0, 2.0)\nassert find_closest_elements([1.0, 5.0, 2.0, 10.0]) == (1.0, 2.0)\nassert find_closest_elements([2.0, 2.0, 2.0, 2.0]) == (2.0, 2.0)",
  "Python/21": "assert rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.5, 1.0]\nassert rescale_to_unit([0.0, 1.0]) == [0.0, 1.0]\nassert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]",
  "Python/22": "assert filter_integers([1, 2, 'a', 3, 'b']) == [1, 2, 3]\nassert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert filter_integers(['a', 'b', 'c', 'd', 'e']) == []\nassert filter_integers([1, 'a', 2.0, 3, True, False]) == [1, 3, True, False]\nassert filter_integers([]) == []",
  "Python/23": "assert strlen(\"hello\") == 5\nassert strlen(\"\") == 0\nassert strlen(\"a\") == 1\nassert strlen(\"hello world\") == 11\nassert strlen(\"\u4f60\u597d\u4e16\u754c\") == 4",
  "Python/24": "assert largest_divisor(15) == 5\nassert largest_divisor(12) == 6\nassert largest_divisor(7) == 1\nassert largest_divisor(28) == 14\nassert largest_divisor(100) == 50",
  "Python/25": "assert factorize(12) == [2, 2, 3]\nassert factorize(1) == []\nassert factorize(7) == [7]\nassert factorize(28) == [2, 2, 7]\nassert factorize(97) == [97]",
  "Python/26": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]\nassert remove_duplicates([1, 1, 1, 1, 1]) == []\nassert remove_duplicates([]) == []\nassert remove_duplicates([1, 2, 3, 2, 1, 4, 5, 4]) == [3, 5]",
  "Python/27": "assert flip_case(\"Hello World\") == \"hELLO wORLD\"\nassert flip_case(\"12345\") == \"12345\"\nassert flip_case(\"aBcDeFg\") == \"AbCdEfG\"\nassert flip_case(\"\") == \"\"\nassert flip_case(\"MiXeD cAsE\") == \"mIxEd CaSe\"",
  "Python/28": "assert concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert concatenate([]) == \"\"\nassert concatenate([\"single\"]) == \"single\"\nassert concatenate([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"12345\"",
  "Python/29": "assert filter_by_prefix([\"apple\", \"banana\", \"apricot\", \"kiwi\"], \"ap\") == [\"apple\", \"apricot\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"apricot\", \"kiwi\"], \"b\") == [\"banana\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"apricot\", \"kiwi\"], \"k\") == [\"kiwi\"]\nassert filter_by_prefix([\"apple\", \"banana\", \"apricot\", \"kiwi\"], \"z\") == []\nassert filter_by_prefix([\"apple\", \"banana\", \"apricot\", \"kiwi\"], \"\") == [\"apple\", \"banana\", \"apricot\", \"kiwi\"]",
  "Python/30": "assert get_positive([1, -2, 3, -4, 5]) == [1, 3, 5]\nassert get_positive([-1, -2, -3, -4, -5]) == []\nassert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert get_positive([0, -1, 1, 0, -2, 2]) == [1, 2]\nassert get_positive([]) == []",
  "Python/31": "assert is_prime(2) == True\nassert is_prime(11) == True\nassert is_prime(4) == False\nassert is_prime(1) == False\nassert is_prime(29) == True",
  "Python/32": "assert abs(find_zero([0.0, 1.0]) - 0.0) < 1e-9\nassert abs(find_zero([-2.0, 1.0]) - 2.0) < 1e-9\nassert abs(find_zero([-6.0, 11.0, -6.0, 1.0]) - 1.0) < 1e-9",
  "Python/33": "assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert sort_third([10, 5, 1, 2, 8, 4]) == [2, 5, 1, 10, 8, 4]\nassert sort_third([]) == []",
  "Python/34": "assert unique([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([]) == []\nassert unique([1, 1, 1, 1]) == [1]\nassert unique([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]",
  "Python/35": "assert max_element([1, 2, 3, 4, 5]) == 5\nassert max_element([-1, -2, -3, -4, -5]) == -1\nassert max_element([5, 4, 3, 2, 1]) == 5\nassert max_element([1, 5, 2, 4, 3]) == 5\nassert max_element([5]) == 5",
  "Python/36": "assert fizz_buzz(20) == 0",
  "Python/37": "assert sort_even([4, 3, 2, 1]) == [2, 3, 4, 1]\nassert sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert sort_even([2, 1]) == [2, 1]\nassert sort_even([1]) == [1]",
  "Python/38": "assert decode_cyclic(\"\") == \"\"",
  "Python/39": "assert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89",
  "Python/40": "assert triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert triples_sum_to_zero([1, 2, 3]) == False\nassert triples_sum_to_zero([-2, 0, 1, 1, 2]) == True\nassert triples_sum_to_zero([-1, -1, 2]) == True\nassert triples_sum_to_zero([0, 0, 0]) == True",
  "Python/41": "assert car_race_collision(0) == 0\nassert car_race_collision(1) == 1\nassert car_race_collision(2) == 4\nassert car_race_collision(5) == 25\nassert car_race_collision(10) == 100",
  "Python/42": "assert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([]) == []\nassert incr_list([-1, 0, 1]) == [0, 1, 2]\nassert incr_list([5]) == [6]\nassert incr_list([1.5, 2.5, 3.5]) == [2.5, 3.5, 4.5]",
  "Python/43": "assert pairs_sum_to_zero([1, 2, -1]) == True\nassert pairs_sum_to_zero([1, 2, 3]) == False\nassert pairs_sum_to_zero([0, 5, -5]) == True\nassert pairs_sum_to_zero([-1, -2, 1, 2]) == True\nassert pairs_sum_to_zero([]) == False",
  "Python/44": "assert change_base(10, 2) == \"1010\"\nassert change_base(100, 8) == \"144\"\nassert change_base(42, 2) == \"101010\"",
  "Python/45": "assert triangle_area(5, 10) == 25.0\nassert triangle_area(3, 4) == 6.0\nassert triangle_area(7.5, 2.0) == 7.5\nassert triangle_area(1, 1) == 0.5\nassert triangle_area(0, 5) == 0.0",
  "Python/46": "assert fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2\nassert fib4(5) == 4",
  "Python/47": "assert median([1, 2, 3]) == 2\nassert median([3, 1, 2]) == 2\nassert median([1, 2, 3, 4]) == 2.5\nassert median([4, 3, 2, 1]) == 2.5\nassert median([1, 1, 2, 2, 3]) == 2",
  "Python/48": "assert is_palindrome(\"madam\") == True\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"A man, a plan, a canal: Panama\") == False\nassert is_palindrome(\"level\") == True\nassert is_palindrome(\"hello\") == False",
  "Python/49": "assert modp(0, 5) == 1\nassert modp(1, 5) == 2\nassert modp(2, 5) == 4\nassert modp(3, 5) == 3\nassert modp(10, 100) == 24",
  "Python/50": "assert encode_shift(\"abc\") == \"fgh\"\nassert encode_shift(\"xyz\") == \"cde\"\nassert encode_shift(\"hello\") == \"mjqqt\"\nassert encode_shift(\"\") == \"\"",
  "Python/51": "assert remove_vowels(\"AEIOUaeiou\") == \"\"\nassert remove_vowels(\"Python\") == \"Pythn\"\nassert remove_vowels(\"12345\") == \"12345\"\nassert remove_vowels(\"\") == \"\"",
  "Python/52": "assert below_threshold([1, 2, 3], 4) == True\nassert below_threshold([1, 2, 3], 3) == False\nassert below_threshold([5, 5, 5], 5) == False\nassert below_threshold([1, 1, 1], 0) == False\nassert below_threshold([], 5) == True",
  "Python/53": "assert add(1, 2) == 3\nassert add(-1, 1) == 0\nassert add(0, 0) == 0\nassert add(-5, -3) == -8\nassert add(100, -50) == 50",
  "Python/54": "assert same_chars(\"abc\", \"cba\") == True\nassert same_chars(\"abc\", \"abd\") == False\nassert same_chars(\"aabbc\", \"abc\") == True\nassert same_chars(\"\", \"\") == True\nassert same_chars(\"a\", \"b\") == False",
  "Python/55": "assert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(5) == 5\nassert fib(10) == 55",
  "Python/56": "assert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<>>\") == True\nassert correct_bracketing(\"><\") == False\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"<<<>>>><>\") == False",
  "Python/57": "assert monotonic([1, 2, 3, 4, 5]) == True\nassert monotonic([5, 4, 3, 2, 1]) == True\nassert monotonic([1, 2, 2, 3, 4]) == True\nassert monotonic([4, 3, 3, 2, 1]) == True\nassert monotonic([1, 3, 2, 4, 5]) == False",
  "Python/58": "assert common([1, 2, 3], [3, 4, 5]) == [3]\nassert common([1, 2, 2, 3], [2, 3, 4, 4]) == [2, 3]\nassert common([1, 2, 3], [4, 5, 6]) == []\nassert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert common([], [1, 2, 3]) == []",
  "Python/59": "assert largest_prime_factor(13195) == 29\nassert largest_prime_factor(6) == 3\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(7) == 7",
  "Python/60": "assert sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(2) == 3\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55",
  "Python/61": "assert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(())\") == True\nassert correct_bracketing(\"(()\") == False\nassert correct_bracketing(\")(\") == False\nassert correct_bracketing(\"\") == True",
  "Python/62": "assert derivative([1, 2, 3]) == [2, 6]\nassert derivative([0, 1, 2, 3]) == [1, 4, 9]\nassert derivative([5, 4, 3, 2, 1]) == [4, 6, 6, 4]\nassert derivative([2, 2, 2, 2, 2]) == [2, 4, 6, 8]",
  "Python/63": "assert fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1",
  "Python/64": "assert vowels_count(\"hello\") == 2\nassert vowels_count(\"why\") == 0 + 1\nassert vowels_count(\"AEIOU\") == 5\nassert vowels_count(\"rhythm\") == 0\nassert vowels_count(\"programming\") == 3",
  "Python/65": "assert circular_shift(\"abcdefg\", 2) == \"fgabcde\"\nassert circular_shift(\"12345\", 1) == \"51234\"\nassert circular_shift(\"abc\", 0) == \"abc\"\nassert circular_shift(\"python\", 7) == \"nohtyp\"",
  "Python/66": "assert digitSum(\"\") == 0\nassert digitSum(\"ABC\") == 65+66+67\nassert digitSum(\"abc\") == 0\nassert digitSum(\"AbC\") == 65+67\nassert digitSum(\"123ABC456\") == 65+66+67",
  "Python/67": "assert fruit_distribution(\"1 2 3\", 10) == 4\nassert fruit_distribution(\"5 5\", 10) == 0\nassert fruit_distribution(\"10\", 10) == 0\nassert fruit_distribution(\"1 2 3 4 5\", 20) == 5\nassert fruit_distribution(\"\", 5) == 5",
  "Python/68": "assert pluck([1, 2, 3, 4, 5]) == [2, 1]\nassert pluck([1, 3, 5]) == []\nassert pluck([2, 4, 6]) == [2, 0]\nassert pluck([4, 2, 6]) == [2, 1]\nassert pluck([]) == []",
  "Python/69": "assert search([1, 2, 2, 3, 3, 3]) == 3\nassert search([1, 1, 2, 3, 4, 5]) == 1\nassert search([1, 2, 2, 2, 3, 3, 3, 3]) == 3\nassert search([1]) == 1",
  "Python/70": "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([5, 4, 3, 2, 1]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([1, 5, 2, 4, 3]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert strange_sort_list([5, 2, 8, 1, 9, 4]) == [1, 9, 2, 8, 4, 5]",
  "Python/71": "assert triangle_area(3, 4, 5) == 6.0\nassert triangle_area(5, 12, 13) == 30.0\nassert triangle_area(4, 4, 4) == 6.93\nassert triangle_area(1, 1, 3) == -1\nassert triangle_area(2, 2, 2) == 1.73",
  "Python/72": "assert will_it_fly([1, 2, 1], 2) == False\nassert will_it_fly([1, 2, 3, 2, 2], 10) == False\nassert will_it_fly([1], 0) == False",
  "Python/73": "assert smallest_change([1, 2, 3, 2, 1]) == 0\nassert smallest_change([1, 2, 3, 4, 5]) == 2\nassert smallest_change([1, 2, 2, 1]) == 0\nassert smallest_change([1, 2, 3, 1]) == 1",
  "Python/74": "assert total_match([\"a\", \"bb\", \"ccc\"], [\"dddd\", \"ee\"]) == [\"a\", \"bb\", \"ccc\"]\nassert total_match([\"abc\"], [\"def\", \"ghi\"]) == [\"abc\"]\nassert total_match([\"def\", \"ghi\"], [\"abc\"]) == [\"abc\"]\nassert total_match([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\"]",
  "Python/75": "assert is_multiply_prime(30) == True\nassert is_multiply_prime(42) == True\nassert is_multiply_prime(1000) == False\nassert is_multiply_prime(105) == True\nassert is_multiply_prime(8) == True",
  "Python/76": "assert is_simple_power(8, 2) == True\nassert is_simple_power(9, 3) == True\nassert is_simple_power(27, 3) == True\nassert is_simple_power(16, 4) == True\nassert is_simple_power(25, 5) == True",
  "Python/77": "assert iscube(8) == True\nassert iscube(27) == True\nassert iscube(100) == False\nassert iscube(0) == True",
  "Python/78": "assert hex_key(\"2A3C5F\") == 3\nassert hex_key(\"14680\") == 0\nassert hex_key(\"B7D235\") == 6\nassert hex_key(\"9B\") == 1\nassert hex_key(\"\") == 0",
  "Python/79": "assert decimal_to_binary(0) == \"db0db\"\nassert decimal_to_binary(1) == \"db1db\"\nassert decimal_to_binary(2) == \"db10db\"\nassert decimal_to_binary(10) == \"db1010db\"\nassert decimal_to_binary(255) == \"db11111111db\"",
  "Python/80": "assert is_happy(\"abc\") == True\nassert is_happy(\"aab\") == False\nassert is_happy(\"abcabcabcabc\") == True",
  "Python/81": "assert numerical_letter_grade([4.0, 3.8, 3.5, 3.1, 2.8]) == ['A+', 'A', 'A-', 'B+', 'B']\nassert numerical_letter_grade([2.5, 2.1, 1.8, 1.4, 1.1]) == ['B-', 'C+', 'C', 'C-', 'D+']\nassert numerical_letter_grade([]) == []",
  "Python/82": "assert prime_length(\"abcde\") == True\nassert prime_length(\"ab\") == True\nassert prime_length(\"abcd\") == False\nassert prime_length(\"abcdefghijk\") == True\nassert prime_length(\"abcdefghijklmn\") == False",
  "Python/83": "assert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 18\nassert starts_one_ends(3) == 180\nassert starts_one_ends(4) == 1800\nassert starts_one_ends(5) == 18000",
  "Python/84": "assert solve(1) == '1'\nassert solve(100) == '1'",
  "Python/85": "assert add([1, 2, 3, 4, 5, 6]) == 12\nassert add([1, 2, 3, 5, 7, 9]) == 2\nassert add([1, 3, 5, 7, 9, 11]) == 0",
  "Python/86": "assert anti_shuffle(\"hello world\") == \"ehllo dlorw\"\nassert anti_shuffle(\"a bb ccc dddd\") == \"a bb ccc dddd\"\nassert anti_shuffle(\"xyz abc\") == \"xyz abc\"",
  "Python/87": "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(1, 1)]\nassert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []\nassert get_row([[10, 20], [30, 10], [20, 30]], 20) == [(0, 1), (2, 0)]",
  "Python/88": "assert sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert sort_array([]) == []\nassert sort_array([2, 4, 6, 8]) == [8, 6, 4, 2]\nassert sort_array([1, 3, 5, 7]) == [7, 5, 3, 1]",
  "Python/89": "assert encrypt(\"abc\") == \"efg\"\nassert encrypt(\"xyz\") == \"bcd\"\nassert encrypt(\"hello world\") == \"lipps asvph\"\nassert encrypt(\"123 abc\") == \"123 efg\"\nassert encrypt(\"\") == \"\"",
  "Python/90": "assert next_smallest([1, 2, 3]) == 2\nassert next_smallest([3, 1, 2]) == 2\nassert next_smallest([1, 1, 2, 3]) == 2\nassert next_smallest([5, 4, 3, 2, 1]) == 2\nassert next_smallest([1]) is None",
  "Python/91": "assert is_bored(\"I am bored.\") == 1\nassert is_bored(\"I am bored. I am also tired.\") == 2\nassert is_bored(\"He is bored. She is not. I am.\") == 1\nassert is_bored(\"I am. I am? I am!\") == 3\nassert is_bored(\"This is boring.\") == 0",
  "Python/92": "assert any_int(1, 2, 3) == True\nassert any_int(1, 2, 4) == False\nassert any_int(0, 0, 0) == True\nassert any_int(-1, 1, 0) == True\nassert any_int(5, -2, 3) == True",
  "Python/93": "assert encode(\"\") == \"\"",
  "Python/94": "assert skjkasdkd([2, 3, 5, 7, 11]) == 2\nassert skjkasdkd([4, 6, 8, 10, 12]) == 0\nassert skjkasdkd([2, 4, 6, 8, 3]) == 3\nassert skjkasdkd([13, 17, 19, 23]) == 5\nassert skjkasdkd([2, 3, 9, 5, 11]) == 2",
  "Python/95": "assert check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) == True\nassert check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True\nassert check_dict_case({\"a\": 1, \"B\": 2, \"c\": 3}) == False\nassert check_dict_case({}) == False",
  "Python/96": "assert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(5) == [2, 3]\nassert count_up_to(2) == []\nassert count_up_to(1) == []\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]",
  "Python/97": "assert multiply(12, 23) == 6\nassert multiply(10, 20) == 0\nassert multiply(-8, -9) == 2",
  "Python/98": "assert count_upper(\"bcdfghjklmnpqrstvwxyz\") == 0\nassert count_upper(\"\") == 0",
  "Python/99": "assert closest_integer(\"3.2\") == 3\nassert closest_integer(\"3.7\") == 4\nassert closest_integer(\"-3.2\") == -3\nassert closest_integer(\"-3.7\") == -4\nassert closest_integer(\"3.5\") == 4",
  "Python/100": "assert make_a_pile(0) == []\nassert make_a_pile(1) == [1]\nassert make_a_pile(2) == [2, 4]\nassert make_a_pile(3) == [3, 5, 7]\nassert make_a_pile(5) == [5, 7, 9, 11, 13]",
  "Python/101": "assert words_string(\"one,two,three\") == ['one', 'two', 'three']\nassert words_string(\"hello\") == ['hello']\nassert words_string(\"\") == []\nassert words_string(\"a,b,c,d,e\") == ['a', 'b', 'c', 'd', 'e']\nassert words_string(\"one, two ,three\") == ['one', 'two', 'three']",
  "Python/102": "assert choose_num(1, 4) == 4\nassert choose_num(5, 3) == -1\nassert choose_num(3, 5) == 4\nassert choose_num(7, 8) == 8",
  "Python/103": "assert rounded_avg(1, 3) == '0b10'\nassert rounded_avg(5, 5) == '0b101'\nassert rounded_avg(1, 5) == '0b11'\nassert rounded_avg(2, 4) == '0b11'",
  "Python/104": "assert unique_digits([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert unique_digits([2, 4, 6, 8, 10]) == []\nassert unique_digits([11, 33, 55, 77, 99]) == [11, 33, 55, 77, 99]\nassert unique_digits([123, 456, 789, 135, 246]) == [135]\nassert unique_digits([1, 11, 111, 1111, 11111]) == [1, 11, 111, 1111, 11111]",
  "Python/105": "assert by_length([1, 2, 3]) == ['Three', 'Two', 'One']\nassert by_length([5, 1, 9]) == ['Nine', 'Five', 'One']\nassert by_length([2, 4, 6, 8]) == ['Eight', 'Six', 'Four', 'Two']\nassert by_length([1, 3, 5, 7, 9]) == ['Nine', 'Seven', 'Five', 'Three', 'One']\nassert by_length([2, 2, 2]) == ['Two', 'Two', 'Two']",
  "Python/106": "assert f(1) == [1]\nassert f(2) == [1, 2]\nassert f(3) == [1, 2, 6]\nassert f(4) == [1, 2, 6, 24]\nassert f(5) == [1, 2, 6, 24, 15]",
  "Python/107": "assert even_odd_palindrome(1) == (0, 1)",
  "Python/108": "assert count_nums([12, -3, 4, -5]) == 2\nassert count_nums([1, 2, 3, 4, 5]) == 5\nassert count_nums([-1, -2, -3, -4, -5]) == 0\nassert count_nums([10, -10, 11, -11]) == 2\nassert count_nums([0, 0, 0, 0]) == 0",
  "Python/109": "assert move_one_ball([3, 4, 5, 1, 2]) == True\nassert move_one_ball([1, 2, 3, 4, 5]) == True\nassert move_one_ball([5, 1, 2, 3, 4]) == True\nassert move_one_ball([2, 1]) == True\nassert move_one_ball([1]) == True",
  "Python/110": "assert exchange([1,3,5], [2,4,6]) == \"YES\"\nassert exchange([1,3,5], [2]) == \"NO\"\nassert exchange([1], [2,4,6]) == \"YES\"\nassert exchange([1,3], [2,4]) == \"YES\"\nassert exchange([1,3,5,7], [2,4]) == \"NO\"",
  "Python/111": "assert histogram(\"the quick brown fox jumps over the lazy dog the\") == {'the': 3}\nassert histogram(\"apple apple banana banana banana\") == {'banana': 3}\nassert histogram(\"one two three one two one\") == {'one': 3}\nassert histogram(\" \") == {}",
  "Python/112": "assert reverse_delete(\"abcba\", \"d\") == (\"abcba\", True)\nassert reverse_delete(\"hello\", \"l\") == (\"heo\", False)\nassert reverse_delete(\"racecar\", \"\") == (\"racecar\", True)",
  "Python/113": "assert odd_count([['1','2','3']]) == ['the number of odd elements 2n the str2ng 2 of the 2nput.']\nassert odd_count([['1','3','5','7'],['2','4','6','8']]) == ['the number of odd elements 4n the str4ng 4 of the 4nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.']\nassert odd_count([['1'],['2','3'],['4','5','6']]) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']\nassert odd_count([['2'],['4','6'],['8','10','12']]) == ['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 0n the str0ng 0 of the 0nput.']\nassert odd_count([['1','2'],['3','4'],['5','6'],['7','8'],['9','0']]) == ['the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']",
  "Python/114": "assert minSubArraySum([0, 0, 0, 0]) == 0",
  "Python/115": "assert max_fill([[1, 2, 3], [4, 5, 6]], 1) == 21\nassert max_fill([[10, 10], [10, 10]], 20) == 2",
  "Python/116": "assert sort_array([7, 5, 3, 1]) == [1, 3, 5, 7]\nassert sort_array([8, 4, 2, 1]) == [1, 2, 4, 8]\nassert sort_array([15, 7, 3, 1]) == [1, 3, 7, 15]",
  "Python/117": "assert select_words(\"hello world\", 5) == []\nassert select_words(\"the quick brown fox jumps over the lazy dog\", 0) == []\nassert select_words(\"a bb ccc dddd eeeee\", 2) == ['bb']",
  "Python/118": "assert get_closest_vowel(\"strengths\") == \"e\"\nassert get_closest_vowel(\"example\") == \"a\"\nassert get_closest_vowel(\"algorithm\") == \"i\"\nassert get_closest_vowel(\"xyz\") == \"\"",
  "Python/119": "assert match_parens(['((', '))']) == 'Yes'\nassert match_parens(['()', '()']) == 'Yes'\nassert match_parens(['(', ')']) == 'Yes'\nassert match_parens(['))', '))']) == 'No'",
  "Python/120": "assert maximum([1, 2, 3, 4, 5], 2) == [4, 5]\nassert maximum([5, 4, 3, 2, 1], 3) == [3, 4, 5]\nassert maximum([1, 5, 2, 4, 3], 1) == [5]\nassert maximum([1, 1, 1, 1, 1], 5) == [1, 1, 1, 1, 1]",
  "Python/121": "assert solution([1, 2, 3, 4, 5]) == 9\nassert solution([2, 4, 6, 8, 10]) == 0\nassert solution([1, 3, 5, 7, 9]) == 15\nassert solution([1, 2, 3, 4, 5, 6]) == 9",
  "Python/122": "assert add_elements([1, 2, 3, 4, 5], 3) == 6\nassert add_elements([10, 20, 30, 40, 50], 2) == 30\nassert add_elements([1, 100, 10, 1000, 10000], 5) == 11\nassert add_elements([100, 200, 300, 400, 500], 3) == 0\nassert add_elements([1, 22, 333, 4444, 55555], 4) == 23",
  "Python/123": "assert get_odd_collatz(4) == [1]\nassert get_odd_collatz(1) == [1]\nassert get_odd_collatz(10) == [1, 5]",
  "Python/124": "assert valid_date(\"02-28-2023\") == True\nassert valid_date(\"02-29-2024\") == True\nassert valid_date(\"13-01-2023\") == False",
  "Python/125": "assert split_words(\"Hello world\") == [\"Hello\", \"world\"]\nassert split_words(\"one,two,three\") == ['one', 'two', 'three']\nassert split_words(\"This is a test\") == [\"This\", \"is\", \"a\", \"test\"]\nassert split_words(\"abcd\") == 2",
  "Python/126": "assert is_sorted([1, 2, 3, 4, 5]) == True\nassert is_sorted([5, 4, 3, 2, 1]) == False\nassert is_sorted([1, 2, 2, 3, 4]) == True\nassert is_sorted([1]) == True",
  "Python/127": "assert intersection([1, 5], [2, 4]) == \"YES\"\nassert intersection([1, 5], [6, 8]) == \"NO\"\nassert intersection([1, 10], [2, 5]) == \"YES\"\nassert intersection([1, 4], [2, 6]) == \"YES\"\nassert intersection([1, 8], [2, 9]) == \"NO\"",
  "Python/128": "assert prod_signs([1, 2, 3]) == 6\nassert prod_signs([-1, 2, 3]) == -6\nassert prod_signs([-1, -2, 3]) == 6\nassert prod_signs([0, 1, 2]) == 0\nassert prod_signs([-1, -2, 0, 3]) == 0",
  "Python/129": "assert minPath([[0,0,0],[0,1,0],[0,0,0]], 3) == [1, 0, 1]\nassert minPath([[0,0,0],[0,1,0],[0,0,0]], 4) == [1, 0, 1, 0]\nassert minPath([[1,0,0],[0,0,0],[0,0,0]], 2) == [1, 0]\nassert minPath([[0,0,0],[0,0,0],[0,0,1]], 1) == [1]\nassert minPath([[0,1,0],[0,0,0],[0,0,0]], 5) == [1, 0, 1, 0, 1]",
  "Python/130": "assert tri(0) == [1]\nassert tri(1) == [1, 3]\nassert tri(2) == [1, 3, 2.0]\nassert tri(3) == [1, 3, 2.0, 8.0]\nassert tri(4) == [1, 3, 2.0, 8.0, 3.0]",
  "Python/131": "assert digits(2468) == 0\nassert digits(135) == 15\nassert digits(12345) == 15\nassert digits(7) == 7\nassert digits(22221) == 1",
  "Python/132": "assert is_nested(\"[[][]]\") == True\nassert is_nested(\"[[]]\") == True\nassert is_nested(\"[]\") == False\nassert is_nested(\"[[][\") == False\nassert is_nested(\"[][][\") == False",
  "Python/133": "assert sum_squares([1, 2, 3]) == 14\nassert sum_squares([-1, -2, -3]) == 14\nassert sum_squares([0, 0, 0]) == 0",
  "Python/134": "assert check_if_last_char_is_a_letter(\"hello world a\") == True\nassert check_if_last_char_is_a_letter(\"hello world 1\") == False\nassert check_if_last_char_is_a_letter(\"hello world A\") == True\nassert check_if_last_char_is_a_letter(\"hello world ab\") == False\nassert check_if_last_char_is_a_letter(\"abc d\") == True",
  "Python/135": "assert can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([1, 3, 2, 4, 5]) == 2\nassert can_arrange([1]) == -1",
  "Python/136": "assert largest_smallest_integers([-1, -2, 1, 2]) == (-1, 1)\nassert largest_smallest_integers([-1, -2]) == (-1, None)\nassert largest_smallest_integers([1, 2]) == (None, 1)\nassert largest_smallest_integers([-1, 1, 0]) == (-1, 1)\nassert largest_smallest_integers([]) == (None, None)",
  "Python/137": "assert compare_one(1, 2) == 2\nassert compare_one(2, 1) == 2\nassert compare_one('1,5', '1.6') == '1.6'\nassert compare_one('2,0', 1.9) == '2,0'\nassert compare_one(5, '5,0') == None",
  "Python/138": "assert is_equal_to_sum_even(8) == True\nassert is_equal_to_sum_even(10) == True\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(9) == False\nassert is_equal_to_sum_even(0) == False",
  "Python/139": "assert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 12\nassert special_factorial(4) == 288\nassert special_factorial(5) == 34560",
  "Python/140": "assert fix_spaces(\"hello   world\") == \"hello-world\"\nassert fix_spaces(\"   \") == \"-\"",
  "Python/141": "assert file_name_check('a.txt') == 'Yes'\nassert file_name_check('b123.exe') == 'Yes'\nassert file_name_check('c.dll') == 'Yes'\nassert file_name_check('1a.txt') == 'No'\nassert file_name_check('abc1234.txt') == 'No'",
  "Python/142": "",
  "Python/143": "",
  "Python/144": "assert simplify(\"1/3\", \"2/5\") == False\nassert simplify(\"1/1\", \"5/5\") == True\nassert simplify(\"2/1\", \"6/3\") == True",
  "Python/145": "assert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
  "Python/146": "",
  "Python/147": "assert get_max_triples(1) == 0\nassert get_max_triples(2) == 0",
  "Python/148": "assert bf(\"Earth\", \"Jupiter\") == (\"Mars\",)\nassert bf(\"Venus\", \"Earth\") == ()\nassert bf(\"Saturn\", \"Neptune\") == (\"Uranus\",)",
  "Python/149": "assert sorted_list_sum([\"aa\", \"b\", \"cccc\", \"dd\"]) == ['aa', 'dd', 'cccc']\nassert sorted_list_sum([\"a\", \"bb\", \"c\", \"dddd\", \"ee\"]) == ['bb', 'ee', 'dddd']\nassert sorted_list_sum([\"aaaa\", \"bb\", \"c\"]) == ['bb', 'aaaa']\nassert sorted_list_sum([\"abc\", \"abcd\", \"ab\", \"a\"]) == ['ab', 'abcd']\nassert sorted_list_sum([]) == []",
  "Python/150": "assert x_or_y(1, 5, 10) == 10\nassert x_or_y(5, 2, 3) == 2\nassert x_or_y(4, 7, 1) == 1\nassert x_or_y(7, 4, 9) == 4\nassert x_or_y(9, 6, 8) == 8",
  "Python/151": "assert double_the_difference([1, 2, 3, 4, 5]) == 1 + 9 + 25\nassert double_the_difference([-1, -3, -5]) == 0\nassert double_the_difference([2, 4, 6, 8]) == 0\nassert double_the_difference([1.1, 3.5, 5.9, 7]) == 49\nassert double_the_difference([1, 3, -2, 5, 0, 7]) == 1 + 9 + 25 + 49",
  "Python/152": "assert compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert compare([1, 2, 3], [4, 5, 6]) == [3, 3, 3]\nassert compare([1, 5, 3], [4, 2, 6]) == [3, 3, 3]\nassert compare([10, 20, 30], [5, 15, 35]) == [5, 5, 5]\nassert compare([1, 2, 3, 4], [5, 6, 7, 8]) == [4, 4, 4, 4]",
  "Python/153": "assert Strongest_Extension(\"MyClass\", [\"extensionA\", \"EXTENSIONB\", \"extEnsionC\"]) == \"MyClass.EXTENSIONB\"\nassert Strongest_Extension(\"File\", [\"txt\", \"py\", \"java\", \"CPP\"]) == \"File.CPP\"\nassert Strongest_Extension(\"Image\", [\"jpeg\", \"PNG\", \"gif\", \"BMP\"]) == \"Image.PNG\"\nassert Strongest_Extension(\"Data\", [\"data1\", \"DATA_UPPER\", \"data_lower\"]) == \"Data.DATA_UPPER\"",
  "Python/154": "assert cycpattern_check(\"abcdabcd\", \"bcd\") == True\nassert cycpattern_check(\"abababab\", \"aba\") == True\nassert cycpattern_check(\"abababab\", \"baa\") == True\nassert cycpattern_check(\"abc\", \"abcd\") == False",
  "Python/155": "assert even_odd_count(12345) == (2, 3)\nassert even_odd_count(24680) == (5, 0)\nassert even_odd_count(13579) == (0, 5)\nassert even_odd_count(-2244) == (4, 0)\nassert even_odd_count(0) == (1, 0)",
  "Python/156": "assert int_to_mini_roman(1) == \"i\"\nassert int_to_mini_roman(4) == \"iv\"\nassert int_to_mini_roman(9) == \"ix\"\nassert int_to_mini_roman(44) == \"xliv\"\nassert int_to_mini_roman(1994) == \"mcmxciv\"",
  "Python/157": "assert right_angle_triangle(5, 4, 3) == True\nassert right_angle_triangle(13, 5, 12) == True\nassert right_angle_triangle(10, 6, 8) == True\nassert right_angle_triangle(7, 2, 4) == False\nassert right_angle_triangle(5, 5, 5) == False",
  "Python/158": "assert find_max([\"dog\", \"cat\", \"pig\"]) == \"cat\"\nassert find_max([\"abc\", \"ab\", \"a\"]) == \"abc\"\nassert find_max([\"aaaa\", \"bbb\", \"cc\"]) == \"aaaa\"",
  "Python/159": "assert eat(1, 2, 3) == [3, 1]\nassert eat(5, 2, 1) == [6, 0]\nassert eat(0, 5, 5) == [5, 0]\nassert eat(3, 1, 0) == [3, 0]\nassert eat(10, 3, 7) == [13, 4]",
  "Python/160": "assert do_algebra(['+'], [1, 2]) == 3\nassert do_algebra(['-', '+'], [5, 2, 1]) == 4\nassert do_algebra(['*', '/'], [2, 3, 2]) == 3.0\nassert do_algebra(['+', '*', '-'], [1, 2, 3, 4]) == 3\nassert do_algebra(['+', '+', '+'], [1, 1, 1, 1]) == 4",
  "Python/161": "assert solve(\"Hello\") == \"hELLO\"\nassert solve(\"World123\") == \"wORLD123\"\nassert solve(\"12345\") == \"54321\"\nassert solve(\"aBcDeFg\") == \"AbCdEfG\"\nassert solve(\"\") == \"\"",
  "Python/162": "assert string_to_md5(\"hello\") == \"5d41402abc4b2a76b9719d911017c592\"\nassert string_to_md5(\"\") is None\nassert string_to_md5(\"a\") == \"0cc175b9c0f1b6a831c399e269772661\"\nassert string_to_md5(\"12345\") == \"827ccb0eea8a706c4c34a16891f84e7b\"",
  "Python/163": "assert generate_integers(1, 9) == [2, 4, 6, 8]\nassert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(9, 1) == [2, 4, 6, 8]"
}