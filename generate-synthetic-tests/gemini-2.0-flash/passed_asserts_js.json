{
  "JavaScript/0": "console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false, \"Test Case 1 Failed\");\nconsole.assert(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true, \"Test Case 2 Failed\");\nconsole.assert(hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.2) === false, \"Test Case 3 Failed\");\nconsole.assert(hasCloseElements([10, 20, 30], 11) === true, \"Test Case 4 Failed\");\nconsole.assert(hasCloseElements([1, 10, 100], 0.001) === false, \"Test Case 5 Failed\");",
  "JavaScript/1": "console.assert(separateParenGroups(\"(()())()\").join(',') === \"(()()),()\", \"Test Case 1 Failed\");\nconsole.assert(separateParenGroups(\"((())())(()(()))\").join(',') === \"((())()),(()(()))\", \"Test Case 2 Failed\");\nconsole.assert(separateParenGroups(\"()()()\").join(',') === \"(),(),()\", \"Test Case 3 Failed\");\nconsole.assert(separateParenGroups(\"\").join(',') === \"\", \"Test Case 5 Failed\");",
  "JavaScript/2": "console.assert(truncateNumber(5.0) === 0, \"Test Case 2 Failed: Integer value\");\nconsole.assert(truncateNumber(0.5) === 0.5, \"Test Case 4 Failed: Less than 1\");",
  "JavaScript/3": "console.assert(belowZero([1, 2, -4]), true);\nconsole.assert(belowZero([-1, 2, -3]), true);\nconsole.assert(belowZero([-5, 10, -2, -8]), true);",
  "JavaScript/4": "console.assert(meanAbsoluteDeviation([1, 2, 3, 4, 5]) === 1.2, \"Test Case 1 Failed\");\nconsole.assert(meanAbsoluteDeviation([1, 1, 1, 1, 1]) === 0, \"Test Case 2 Failed\");\nconsole.assert(meanAbsoluteDeviation([2, 4, 6, 8, 10]) === 2.4, \"Test Case 3 Failed\");\nconsole.assert(meanAbsoluteDeviation([10, 20, 30, 40, 50]) === 12, \"Test Case 5 Failed\");",
  "JavaScript/5": "console.assert(JSON.stringify(intersperse([1, 2, 3], 0)) === JSON.stringify([1, 0, 2, 0, 3]), \"Test Case 1 Failed: Basic test with numbers and 0\");\nconsole.assert(JSON.stringify(intersperse([1, 2, 3], \"a\")) === JSON.stringify([1, \"a\", 2, \"a\", 3]), \"Test Case 2 Failed: Basic test with numbers and string\");\nconsole.assert(JSON.stringify(intersperse([], 1)) === JSON.stringify([]), \"Test Case 3 Failed: Empty array\");\nconsole.assert(JSON.stringify(intersperse([5], \"-\")) === JSON.stringify([5]), \"Test Case 4 Failed: Single element array\");\nconsole.assert(JSON.stringify(intersperse([1,2,3,4,5], null)) === JSON.stringify([1,null,2,null,3,null,4,null,5]), \"Test Case 5 Failed: Numbers and null\");",
  "JavaScript/6": "",
  "JavaScript/7": "console.assert(JSON.stringify(filterBySubstring([\"apple\", \"banana\", \"orange\"], \"app\")) === JSON.stringify([\"apple\"]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(filterBySubstring([\"abc\", \"def\", \"ghi\"], \"xyz\")) === JSON.stringify([]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(filterBySubstring([\"\", \"test\", \"ing\"], \"\")) === JSON.stringify([\"\", \"test\", \"ing\"]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(filterBySubstring([\"hello world\", \"world peace\"], \"world\")) === JSON.stringify([\"hello world\", \"world peace\"]), \"Test Case 5 Failed\");",
  "JavaScript/8": "console.assert(sumProduct([1, 2, 3], 5).toString() === [6, 6].toString(), \"Test Case 1 Failed\");\nconsole.assert(sumProduct([2, 4, 6], 10).toString() === [12, 48].toString(), \"Test Case 2 Failed\");\nconsole.assert(sumProduct([1, 1, 1, 1], 2).toString() === [4, 1].toString(), \"Test Case 3 Failed\");\nconsole.assert(sumProduct([0, 5, 10], 15).toString() === [15, 0].toString(), \"Test Case 4 Failed\");\nconsole.assert(sumProduct([-1, 2, -3], 4).toString() === [-2, 6].toString(), \"Test Case 5 Failed\");",
  "JavaScript/9": "console.assert(JSON.stringify(rollingMax([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(rollingMax([5, 4, 3, 2, 1])) === JSON.stringify([5, 5, 5, 5, 5]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(rollingMax([1, 5, 2, 4, 3])) === JSON.stringify([1, 5, 5, 5, 5]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(rollingMax([-1, -2, -3, -4, -5])) === JSON.stringify([-1, -1, -1, -1, -1]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(rollingMax([0, 0, 0, 0, 0])) === JSON.stringify([0, 0, 0, 0, 0]), \"Test Case 5 Failed\");",
  "JavaScript/10": "console.assert(makePalindrome(\"race\") === \"racecar\", \"Test Case 1 Failed: race\");\nconsole.assert(makePalindrome(\"a\") === \"a\", \"Test Case 3 Failed: a\");",
  "JavaScript/11": "console.assert(stringXor(\"1010\", \"0101\") === \"1111\", \"Test Case 1 Failed\");\nconsole.assert(stringXor(\"1111\", \"1111\") === \"0000\", \"Test Case 2 Failed\");\nconsole.assert(stringXor(\"0000\", \"0000\") === \"0000\", \"Test Case 3 Failed\");\nconsole.assert(stringXor(\"1001\", \"0110\") === \"1111\", \"Test Case 4 Failed\");\nconsole.assert(stringXor(\"0101\", \"1010\") === \"1111\", \"Test Case 5 Failed\");",
  "JavaScript/12": "console.assert(longest([\"short\", \"longer\", \"longest\"]) === \"longest\", \"Test Case 1 Failed\");\nconsole.assert(longest([\"one\", \"two\", \"three\"]) === \"three\", \"Test Case 2 Failed\");\nconsole.assert(longest([\"abc\", \"abcd\", \"abcde\"]) === \"abcde\", \"Test Case 3 Failed\");\nconsole.assert(longest([\"apple\", \"banana\", \"kiwi\"]) === \"banana\", \"Test Case 4 Failed\");\nconsole.assert(longest([\"hello\", \"world\"]) === \"hello\", \"Test Case 5 Failed\");",
  "JavaScript/13": "console.assert(greatestCommonDivisor(12, 18) === 6, \"Test Case 1 Failed: GCD of 12 and 18 should be 6\");\nconsole.assert(greatestCommonDivisor(48, 18) === 6, \"Test Case 2 Failed: GCD of 48 and 18 should be 6\");\nconsole.assert(greatestCommonDivisor(25, 15) === 5, \"Test Case 3 Failed: GCD of 25 and 15 should be 5\");\nconsole.assert(greatestCommonDivisor(7, 13) === 1, \"Test Case 4 Failed: GCD of 7 and 13 should be 1\");\nconsole.assert(greatestCommonDivisor(100, 50) === 50, \"Test Case 5 Failed: GCD of 100 and 50 should be 50\");",
  "JavaScript/14": "console.assert(JSON.stringify(allPrefixes(\"abc\")) === JSON.stringify([\"a\", \"ab\", \"abc\"]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(allPrefixes(\"\")) === JSON.stringify([]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(allPrefixes(\"a\")) === JSON.stringify([\"a\"]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(allPrefixes(\"hello\")) === JSON.stringify([\"h\", \"he\", \"hel\", \"hell\", \"hello\"]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(allPrefixes(\"12345\")) === JSON.stringify([\"1\", \"12\", \"123\", \"1234\", \"12345\"]), \"Test Case 5 Failed\");",
  "JavaScript/15": "console.assert(stringSequence(0) === \"0\", \"Test Case 1 Failed: n = 0\");\nconsole.assert(stringSequence(1) === \"0 1\", \"Test Case 2 Failed: n = 1\");\nconsole.assert(stringSequence(3) === \"0 1 2 3\", \"Test Case 3 Failed: n = 3\");\nconsole.assert(stringSequence(5) === \"0 1 2 3 4 5\", \"Test Case 4 Failed: n = 5\");\nconsole.assert(stringSequence(10) === \"0 1 2 3 4 5 6 7 8 9 10\", \"Test Case 5 Failed: n = 10\");",
  "JavaScript/16": "console.assert(countDistinctCharacters(\"abc\") === 3, \"Test Case 1 Failed: Basic test\");\nconsole.assert(countDistinctCharacters(\"aAb\") === 2, \"Test Case 2 Failed: Case insensitivity\");\nconsole.assert(countDistinctCharacters(\"aabbccddeeff\") === 6, \"Test Case 3 Failed: Repeated characters\");\nconsole.assert(countDistinctCharacters(\"\") === 0, \"Test Case 4 Failed: Empty string\");",
  "JavaScript/17": "console.assert(JSON.stringify(parseMusic('o o| .|')) === JSON.stringify([4, 2, 1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(parseMusic('.| .| .| .| .|')) === JSON.stringify([1, 1, 1, 1, 1]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o| o| o|')) === JSON.stringify([2, 2, 2]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o   o|    .|')) === JSON.stringify([4, 2, 1]), \"Test Case 5 Failed\");",
  "JavaScript/18": "console.assert(howManyTimes(\"hello\", \"el\") === 1, \"Test Case 1 Failed\");\nconsole.assert(howManyTimes(\"hellohello\", \"hello\") === 2, \"Test Case 2 Failed\");\nconsole.assert(howManyTimes(\"aaaa\", \"aa\") === 3, \"Test Case 3 Failed\");\nconsole.assert(howManyTimes(\"test\", \"abc\") === 0, \"Test Case 4 Failed\");\nconsole.assert(howManyTimes(\"\", \"abc\") === 0, \"Test Case 5 Failed\");",
  "JavaScript/19": "console.assert(sortNumbers(\"one two three\") === \"one two three\", \"Test Case 1 Failed\");\nconsole.assert(sortNumbers(\"three two one\") === \"one two three\", \"Test Case 2 Failed\");\nconsole.assert(sortNumbers(\"five four one\") === \"one four five\", \"Test Case 3 Failed\");\nconsole.assert(sortNumbers(\"nine zero\") === \"zero nine\", \"Test Case 4 Failed\");\nconsole.assert(sortNumbers(\"seven seven seven\") === \"seven seven seven\", \"Test Case 5 Failed\");",
  "JavaScript/20": "console.assert(JSON.stringify(findClosestElements([1, 2, 3, 4, 5])) === JSON.stringify([1, 2]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(findClosestElements([10, 20, 30, 40, 50])) === JSON.stringify([10, 20]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(findClosestElements([1, 1, 1, 1, 1])) === JSON.stringify([1, 1]), \"Test Case 5 Failed\");",
  "JavaScript/21": "console.assert(JSON.stringify(rescaleToUnit([1, 2, 3, 4, 5])) === JSON.stringify([0, 0.25, 0.5, 0.75, 1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(rescaleToUnit([0, 10, 20])) === JSON.stringify([0, 0.5, 1]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(rescaleToUnit([-1, 0, 1])) === JSON.stringify([0, 0.5, 1]), \"Test Case 4 Failed\");",
  "JavaScript/22": "console.assert(JSON.stringify(filterIntegers([1, 2, 3])) === JSON.stringify([1, 2, 3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(filterIntegers([1, \"2\", 3.5])) === JSON.stringify([1]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(filterIntegers([1.1, 2.2, 3.3])) === JSON.stringify([]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(filterIntegers([-1, 0, 1])) === JSON.stringify([-1, 0, 1]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/23": "console.assert(strlen(\"hello\") === 5, \"Test Case 1 Failed: Basic string\");\nconsole.assert(strlen(\"\") === 0, \"Test Case 2 Failed: Empty string\");\nconsole.assert(strlen(\" \") === 1, \"Test Case 3 Failed: Single space\");\nconsole.assert(strlen(\"hello world\") === 11, \"Test Case 4 Failed: String with spaces\");\nconsole.assert(strlen(\"1234567890\") === 10, \"Test Case 5 Failed: String with numbers\");",
  "JavaScript/24": "console.assert(largestDivisor(15) === 5, \"Test Case 1 Failed\");\nconsole.assert(largestDivisor(12) === 6, \"Test Case 2 Failed\");\nconsole.assert(largestDivisor(7) === 1, \"Test Case 3 Failed\");\nconsole.assert(largestDivisor(20) === 10, \"Test Case 4 Failed\");\nconsole.assert(largestDivisor(9) === 3, \"Test Case 5 Failed\");",
  "JavaScript/25": "console.assert(JSON.stringify(factorize(12)) === JSON.stringify([2, 2, 3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(factorize(28)) === JSON.stringify([2, 2, 7]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(factorize(36)) === JSON.stringify([2, 2, 3, 3]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(factorize(17)) === JSON.stringify([17]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(factorize(1)) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/26": "console.assert(JSON.stringify(removeDuplicates([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), \"Test Case 1 Failed: No duplicates\");\nconsole.assert(JSON.stringify(removeDuplicates([1, 2, 2, 3, 4, 4, 5])) === JSON.stringify([1, 3, 5]), \"Test Case 2 Failed: Some duplicates\");\nconsole.assert(JSON.stringify(removeDuplicates([1, 1, 1, 1])) === JSON.stringify([]), \"Test Case 3 Failed: All duplicates\");\nconsole.assert(JSON.stringify(removeDuplicates([1, 2, 3, 1, 2, 3])) === JSON.stringify([]), \"Test Case 4 Failed: All elements have duplicates\");\nconsole.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]), \"Test Case 5 Failed: Empty array\");",
  "JavaScript/27": "console.assert(flipCase(\"Hello World\") === \"hELLO wORLD\", \"Test Case 1 Failed: Mixed case\");\nconsole.assert(flipCase(\"tEST\") === \"Test\", \"Test Case 2 Failed: Alternating case\");\nconsole.assert(flipCase(\"UPPER\") === \"upper\", \"Test Case 3 Failed: All upper case\");\nconsole.assert(flipCase(\"lower\") === \"LOWER\", \"Test Case 4 Failed: All lower case\");\nconsole.assert(flipCase(\"\") === \"\", \"Test Case 5 Failed: Empty string\");",
  "JavaScript/28": "console.assert(concatenate([\"hello\", \"world\"]) === \"helloworld\", \"Test Case 1 Failed\");\nconsole.assert(concatenate([\"a\", \"b\", \"c\"]) === \"abc\", \"Test Case 2 Failed\");\nconsole.assert(concatenate([]) === \"\", \"Test Case 3 Failed\");\nconsole.assert(concatenate([\"1\", \"2\", \"3\"]) === \"123\", \"Test Case 4 Failed\");\nconsole.assert(concatenate([\"This\", \"is\", \"a\", \"test\"]) === \"Thisisatest\", \"Test Case 5 Failed\");",
  "JavaScript/29": "console.assert(JSON.stringify(filterByPrefix([\"hello\", \"world\", \"hell\"], \"hel\")) === JSON.stringify([\"hello\", \"hell\"]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(filterByPrefix([\"apple\", \"banana\", \"apricot\"], \"ap\")) === JSON.stringify([\"apple\", \"apricot\"]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(filterByPrefix([\"car\", \"dog\", \"cat\"], \"b\")) === JSON.stringify([]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(filterByPrefix([\"\", \"abc\", \"def\"], \"\")) === JSON.stringify([\"\", \"abc\", \"def\"]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(filterByPrefix([\"test\", \"testing\", \"testify\"], \"test\")) === JSON.stringify([\"test\", \"testing\", \"testify\"]), \"Test Case 5 Failed\");",
  "JavaScript/30": "console.assert(JSON.stringify(getPositive([1, 2, 3])) === JSON.stringify([1, 2, 3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(getPositive([-1, -2, -3])) === JSON.stringify([]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(getPositive([-1, 0, 1])) === JSON.stringify([1]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(getPositive([1, -2, 3, -4, 5])) === JSON.stringify([1, 3, 5]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(getPositive([])) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/31": "console.assert(isPrime(2) === true, \"Test Case 1 Failed: 2 is prime\");\nconsole.assert(isPrime(4) === false, \"Test Case 2 Failed: 4 is not prime\");\nconsole.assert(isPrime(11) === true, \"Test Case 3 Failed: 11 is prime\");\nconsole.assert(isPrime(1) === false, \"Test Case 4 Failed: 1 is not prime\");\nconsole.assert(isPrime(29) === true, \"Test Case 5 Failed: 29 is prime\");",
  "JavaScript/32": "console.assert(Math.abs(findZero([0, 1]) - 0) < 1e-5, \"Test Case 1 Failed: Zero polynomial\");\nconsole.assert(Math.abs(findZero([1, 1]) - (-1)) < 1e-5, \"Test Case 2 Failed: Linear polynomial\");\nconsole.assert(Math.abs(findZero([2, -3, 1]) - 1) < 1e-5 || Math.abs(findZero([2, -3, 1]) - 2) < 1e-5, \"Test Case 4 Failed: Quadratic polynomial (1 and 2 are roots)\");\nconsole.assert(Math.abs(findZero([1, 0, -1]) - (-1)) < 1e-5 || Math.abs(findZero([1, 0, -1]) - 1) < 1e-5, \"Test Case 5 Failed: Quadratic polynomial (1 and -1 are roots)\");",
  "JavaScript/33": "console.assert(JSON.stringify(sortThird([1,2,3,4,5,6,7,8,9])) === JSON.stringify([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sortThird([1,2,3,4,5,6,7,8,9,10,11,12])) === JSON.stringify([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(sortThird([4,5,6,1,2,3,7,8,9,10,11,12])) === JSON.stringify([ 1, 5, 6, 4, 2, 3, 7, 8, 9, 10, 11, 12 ]), \"Test Case 5 Failed\");",
  "JavaScript/34": "console.assert(JSON.stringify(unique([1, 2, 2, 3, 4, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(unique([5, 4, 3, 2, 1])) === JSON.stringify([1, 2, 3, 4, 5]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(unique([1, 1, 1, 1, 1])) === JSON.stringify([1]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(unique([])) === JSON.stringify([]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(unique([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])) === JSON.stringify([1, 2, 3, 4, 5, 6, 9]), \"Test Case 5 Failed\");",
  "JavaScript/35": "console.assert(maxElement([1, 2, 3]) === 3, \"Test Case 1 Failed: Basic positive numbers\");\nconsole.assert(maxElement([-1, -2, -3]) === -1, \"Test Case 2 Failed: Basic negative numbers\");\nconsole.assert(maxElement([5, 1, 8, 2, 0]) === 8, \"Test Case 3 Failed: Mixed positive numbers\");\nconsole.assert(maxElement([-5, -1, -8, -2, 0]) === 0, \"Test Case 4 Failed: Mixed negative numbers\");\nconsole.assert(maxElement([7, 7, 7, 7]) === 7, \"Test Case 5 Failed: Identical numbers\");",
  "JavaScript/36": "console.assert(fizzBuzz(20) === 0, \"Test Case 1 Failed: n = 20\");",
  "JavaScript/37": "console.assert(JSON.stringify(sortEven([5, 2, 6, 1, 4])) === JSON.stringify([4, 2, 5, 1, 6]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sortEven([3, 2, 1, 5, 4, 6])) === JSON.stringify([1, 2, 3, 5, 4, 6]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(sortEven([1, 2, 3, 4, 5, 6, 7])) === JSON.stringify([1, 2, 3, 4, 5, 6, 7]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(sortEven([7, 6, 5, 4, 3, 2, 1])) === JSON.stringify([1, 6, 3, 4, 5, 2, 7]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(sortEven([4, 1, 3, 2, 5])) === JSON.stringify([3, 1, 4, 2, 5]), \"Test Case 5 Failed\");",
  "JavaScript/38": "console.assert(decodeCyclic(\"\") === \"\", \"Test Case 4 Failed: Empty string\");",
  "JavaScript/39": "console.assert(primeFib(1) === 2, \"Test Case 1 Failed\");\nconsole.assert(primeFib(2) === 3, \"Test Case 2 Failed\");\nconsole.assert(primeFib(3) === 5, \"Test Case 3 Failed\");\nconsole.assert(primeFib(4) === 13, \"Test Case 4 Failed\");\nconsole.assert(primeFib(5) === 89, \"Test Case 5 Failed\");",
  "JavaScript/40": "console.assert(triplesSumToZero([-1, 0, 1, 2, -2]) === true, \"Test Case 1 Failed\");\nconsole.assert(triplesSumToZero([5, 6, 7, 8, 9]) === false, \"Test Case 2 Failed\");\nconsole.assert(triplesSumToZero([-1, -1, 2]) === true, \"Test Case 3 Failed\");\nconsole.assert(triplesSumToZero([0, 0, 0]) === true, \"Test Case 4 Failed\");\nconsole.assert(triplesSumToZero([1, 2, -3, 4, 5]) === true, \"Test Case 5 Failed\");",
  "JavaScript/41": "console.assert(carRaceCollision(0) === 0, \"Test Case 1 Failed: n = 0\");\nconsole.assert(carRaceCollision(1) === 1, \"Test Case 2 Failed: n = 1\");\nconsole.assert(carRaceCollision(2) === 4, \"Test Case 3 Failed: n = 2\");\nconsole.assert(carRaceCollision(5) === 25, \"Test Case 4 Failed: n = 5\");\nconsole.assert(carRaceCollision(10) === 100, \"Test Case 5 Failed: n = 10\");",
  "JavaScript/42": "console.assert(JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(incrList([0, 0, 0])) === JSON.stringify([1, 1, 1]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(incrList([-1, 0, 1])) === JSON.stringify([0, 1, 2]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(incrList([10])) === JSON.stringify([11]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(incrList([])) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/43": "console.assert(pairsSumToZero([1, 2, -1]) === true, \"Test Case 1 Failed\");\nconsole.assert(pairsSumToZero([1, 2, 3]) === false, \"Test Case 2 Failed\");\nconsole.assert(pairsSumToZero([-1, -2, 1]) === true, \"Test Case 3 Failed\");\nconsole.assert(pairsSumToZero([-1, -2, 0, 1]) === true, \"Test Case 4 Failed\");\nconsole.assert(pairsSumToZero([0, 5, -5]) === true, \"Test Case 5 Failed\");",
  "JavaScript/44": "console.assert(changeBase(10, 2) === \"1010\", \"Test Case 1 Failed: Decimal 10 to Binary\");\nconsole.assert(changeBase(255, 16) === \"1515\", \"Test Case 2 Failed: Decimal 255 to Hexadecimal\");\nconsole.assert(changeBase(42, 8) === \"52\", \"Test Case 3 Failed: Decimal 42 to Octal\");\nconsole.assert(changeBase(12345, 10) === \"12345\", \"Test Case 4 Failed: Decimal 12345 to Decimal\");\nconsole.assert(changeBase(0, 2) === \"\", \"Test Case 5 Failed: Decimal 0 to Binary\");",
  "JavaScript/45": "console.assert(triangleArea(5, 4) === 10, \"Test Case 1 Failed: Basic test\");\nconsole.assert(triangleArea(10, 7) === 35, \"Test Case 2 Failed: Larger numbers\");\nconsole.assert(triangleArea(1, 1) === 0.5, \"Test Case 3 Failed: Small numbers\");\nconsole.assert(triangleArea(0, 5) === 0, \"Test Case 4 Failed: Zero base\");\nconsole.assert(triangleArea(5, 0) === 0, \"Test Case 5 Failed: Zero height\");",
  "JavaScript/46": "console.assert(fib4(0) === 0, \"Test Case 1 Failed: fib4(0)\");\nconsole.assert(fib4(1) === 0, \"Test Case 2 Failed: fib4(1)\");\nconsole.assert(fib4(2) === 2, \"Test Case 3 Failed: fib4(2)\");\nconsole.assert(fib4(3) === 0, \"Test Case 4 Failed: fib4(3)\");",
  "JavaScript/47": "console.assert(median([1,2,3,4,5]) === 3, \"Test Case 1 Failed\");\nconsole.assert(median([1,2,3,4]) === 2.5, \"Test Case 2 Failed\");\nconsole.assert(median([5,2,1,3,4]) === 3, \"Test Case 3 Failed\");\nconsole.assert(median([4,2,1,3]) === 2.5, \"Test Case 4 Failed\");\nconsole.assert(median([1]) === 1, \"Test Case 5 Failed\");",
  "JavaScript/48": "console.assert(isPalindrome(\"madam\") === true, \"Test Case 1 Failed: Basic palindrome\");\nconsole.assert(isPalindrome(\"racecar\") === true, \"Test Case 2 Failed: Another palindrome\");\nconsole.assert(isPalindrome(\"hello\") === false, \"Test Case 3 Failed: Not a palindrome\");\nconsole.assert(isPalindrome(\"A\") === true, \"Test Case 4 Failed: Single character palindrome\");\nconsole.assert(isPalindrome(\"\") === true, \"Test Case 5 Failed: Empty string palindrome\");",
  "JavaScript/49": "console.assert(modp(0, 5) === 1, \"Test Case 1 Failed: n=0, p=5\");\nconsole.assert(modp(1, 5) === 2, \"Test Case 2 Failed: n=1, p=5\");\nconsole.assert(modp(3, 5) === 3, \"Test Case 3 Failed: n=3, p=5\");\nconsole.assert(modp(5, 7) === 4, \"Test Case 4 Failed: n=5, p=7\");\nconsole.assert(modp(10, 100) === 24, \"Test Case 5 Failed: n=10, p=100\");",
  "JavaScript/50": "console.assert(encodeShift(\"abc\") === \"fgh\", \"Test Case 1 Failed: Basic encoding\");\nconsole.assert(decodeShift(\"fgh\") === \"abc\", \"Test Case 3 Failed: Basic decoding\");\nconsole.assert(encodeShift(decodeShift(\"hello\")) === \"hello\", \"Test Case 5 Failed: Encode after decode\");",
  "JavaScript/51": "console.assert(removeVowels(\"hello\") === \"hll\", \"Test Case 1 Failed\");\nconsole.assert(removeVowels(\"AEIOU\") === \"\", \"Test Case 2 Failed\");\nconsole.assert(removeVowels(\"javascript\") === \"jvscrpt\", \"Test Case 3 Failed\");\nconsole.assert(removeVowels(\"xyz\") === \"xyz\", \"Test Case 4 Failed\");\nconsole.assert(removeVowels(\"The quick brown fox jumps over the lazy fox\") === \"Th qck brwn fx jmps vr th lzy fx\", \"Test Case 5 Failed\");",
  "JavaScript/52": "console.assert(belowThreshold([1, 2, 3, 4, 5], 6) === true, \"Test Case 1 Failed: All elements below threshold\");\nconsole.assert(belowThreshold([1, 2, 3, 4, 5], 3) === false, \"Test Case 2 Failed: Element equals threshold\");\nconsole.assert(belowThreshold([1, 2, 3, 4, 5], 1) === false, \"Test Case 4 Failed: Element equals threshold (min)\");\nconsole.assert(belowThreshold([], 5) === true, \"Test Case 5 Failed: Empty list is considered below threshold\");",
  "JavaScript/53": "console.assert(add(2, 3) === 5, \"Test Case 1 Failed: Basic addition\");\nconsole.assert(add(-1, 1) === 0, \"Test Case 2 Failed: Negative and positive\");\nconsole.assert(add(0, 0) === 0, \"Test Case 3 Failed: Zero values\");\nconsole.assert(add(5, -2) === 3, \"Test Case 4 Failed: Positive and negative\");\nconsole.assert(add(10, 20) === 30, \"Test Case 5 Failed: Larger numbers\");",
  "JavaScript/54": "console.assert(sameChars(\"abc\", \"cba\") === true, \"Test Case 1 Failed: Basic test\");\nconsole.assert(sameChars(\"aabbcc\", \"abc\") === true, \"Test Case 2 Failed: Duplicates in s0\");\nconsole.assert(sameChars(\"abc\", \"aabbcc\") === true, \"Test Case 3 Failed: Duplicates in s1\");\nconsole.assert(sameChars(\"abcd\", \"abc\") === false, \"Test Case 4 Failed: Different lengths\");\nconsole.assert(sameChars(\"\", \"\") === true, \"Test Case 5 Failed: Empty strings\");",
  "JavaScript/55": "console.assert(fib(0) === 0, \"Test Case 1 Failed: fib(0)\");\nconsole.assert(fib(1) === 1, \"Test Case 2 Failed: fib(1)\");\nconsole.assert(fib(2) === 1, \"Test Case 3 Failed: fib(2)\");\nconsole.assert(fib(5) === 5, \"Test Case 4 Failed: fib(5)\");\nconsole.assert(fib(10) === 55, \"Test Case 5 Failed: fib(10)\");",
  "JavaScript/56": "console.assert(correctBracketing(\"<>\"), \"Test Case 1 Failed: Simple correct bracketing\");\nconsole.assert(correctBracketing(\"<<>>\"), \"Test Case 2 Failed: Nested correct bracketing\");\nconsole.assert(!correctBracketing(\"<\"), \"Test Case 3 Failed: Unclosed bracket\");\nconsole.assert(!correctBracketing(\">\"), \"Test Case 4 Failed: Unopened bracket\");\nconsole.assert(correctBracketing(\"<<><>>\"), \"Test Case 5 Failed: More complex correct bracketing\");",
  "JavaScript/57": "console.assert(monotonic([1, 2, 3, 4, 5]) === true, \"Test Case 1 Failed: Increasing sequence\");\nconsole.assert(monotonic([5, 4, 3, 2, 1]) === true, \"Test Case 2 Failed: Decreasing sequence\");\nconsole.assert(monotonic([1, 1, 2, 3, 4]) === true, \"Test Case 3 Failed: Increasing with duplicates\");\nconsole.assert(monotonic([5, 5, 4, 3, 2]) === true, \"Test Case 4 Failed: Decreasing with duplicates\");\nconsole.assert(monotonic([1, 3, 2, 4, 5]) === false, \"Test Case 5 Failed: Non-monotonic sequence\");",
  "JavaScript/58": "console.assert(JSON.stringify(common([1,2,3], [2,3,4])) === JSON.stringify([2,3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(common([1,2,3], [4,5,6])) === JSON.stringify([]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(common([1,2,2,3], [2,3,3,4])) === JSON.stringify([2,3]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(common([1,2,3], [1,2,3])) === JSON.stringify([1,2,3]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(common([3,2,1], [1,3,2])) === JSON.stringify([1,2,3]), \"Test Case 5 Failed\");",
  "JavaScript/59": "console.assert(largestPrimeFactor(2) === 2, \"Test Case 1 Failed\");\nconsole.assert(largestPrimeFactor(13195) === 29, \"Test Case 2 Failed\");\nconsole.assert(largestPrimeFactor(7) === 7, \"Test Case 4 Failed\");\nconsole.assert(largestPrimeFactor(10) === 5, \"Test Case 5 Failed\");",
  "JavaScript/60": "console.assert(sumToN(1) === 1, \"Test Case 1 Failed: n = 1\");\nconsole.assert(sumToN(5) === 15, \"Test Case 2 Failed: n = 5\");\nconsole.assert(sumToN(10) === 55, \"Test Case 3 Failed: n = 10\");\nconsole.assert(sumToN(0) === 0, \"Test Case 4 Failed: n = 0\");\nconsole.assert(sumToN(100) === 5050, \"Test Case 5 Failed: n = 100\");",
  "JavaScript/61": "console.assert(correctBracketing(\"()\") === true, \"Test Case 1 Failed: Simple balanced brackets\");\nconsole.assert(correctBracketing(\"((()))\") === true, \"Test Case 2 Failed: Multiple nested balanced brackets\");\nconsole.assert(correctBracketing(\"(()())\") === true, \"Test Case 3 Failed: Multiple balanced pairs\");\nconsole.assert(correctBracketing(\"(()\") === false, \"Test Case 4 Failed: Unbalanced opening bracket\");\nconsole.assert(correctBracketing(\"())\") === false, \"Test Case 5 Failed: Unbalanced closing bracket\");",
  "JavaScript/62": "console.assert(derivative([1, 2, 3, 4, 5])[0] === 2, \"Test Case 1 Failed\");\nconsole.assert(derivative([0, 0, 0, 0])[0] === 0, \"Test Case 2 Failed\");\nconsole.assert(derivative([1, 0, 1, 0])[1] === 2, \"Test Case 3 Failed\");\nconsole.assert(derivative([5, 10, 15])[1] === 30, \"Test Case 4 Failed\");\nconsole.assert(derivative([2])[0] === undefined, \"Test Case 5 Failed\");",
  "JavaScript/63": "console.assert(fibfib(0) === 0, \"Test Case 1 Failed: n = 0\");\nconsole.assert(fibfib(1) === 0, \"Test Case 2 Failed: n = 1\");\nconsole.assert(fibfib(2) === 1, \"Test Case 3 Failed: n = 2\");\nconsole.assert(fibfib(3) === 1, \"Test Case 4 Failed: n = 3\");",
  "JavaScript/64": "console.assert(vowelsCount(\"hello\") === 2, \"Test Case 1 Failed: Basic test\");\nconsole.assert(vowelsCount(\"AEIOU\") === 5, \"Test Case 2 Failed: All vowels uppercase\");\nconsole.assert(vowelsCount(\"aeiou\") === 5, \"Test Case 3 Failed: All vowels lowercase\");\nconsole.assert(vowelsCount(\"fly\") === 0 + 1, \"Test Case 4 Failed: 'y' at the end\");\nconsole.assert(vowelsCount(\"rhythm\") === 0, \"Test Case 5 Failed: No vowels\");",
  "JavaScript/65": "console.assert(circularShift(12345, 2) === '45123', \"Test Case 1 Failed\");\nconsole.assert(circularShift(123, 5) === '321', \"Test Case 2 Failed\");\nconsole.assert(circularShift(7890, 0) === '7890', \"Test Case 3 Failed\");\nconsole.assert(circularShift(1, 1) === '1', \"Test Case 4 Failed\");\nconsole.assert(circularShift(56789, 3) === '78956', \"Test Case 5 Failed\");",
  "JavaScript/66": "console.assert(digitSum(\"\") === 0, \"Test Case 1 Failed: Empty string\");\nconsole.assert(digitSum(\"ABC\") === 65+66+67, \"Test Case 2 Failed: Basic uppercase\");\nconsole.assert(digitSum(\"aBc\") === 66, \"Test Case 3 Failed: Mixed case\");\nconsole.assert(digitSum(\"123ABC456\") === 65+66+67, \"Test Case 4 Failed: Numbers and uppercase\");\nconsole.assert(digitSum(\"XYZXYZ\") === (88+89+90)*2, \"Test Case 5 Failed: Repeated uppercase\");",
  "JavaScript/67": "console.assert(fruitDistribution(\"1 2 3\", 10) === 4, \"Test Case 1 Failed\");\nconsole.assert(fruitDistribution(\"5 5\", 15) === 5, \"Test Case 2 Failed\");\nconsole.assert(fruitDistribution(\"10 20 30\", 100) === 40, \"Test Case 3 Failed\");\nconsole.assert(fruitDistribution(\"2\", 5) === 3, \"Test Case 4 Failed\");\nconsole.assert(fruitDistribution(\"1 1 1 1 1\", 10) === 5, \"Test Case 5 Failed\");",
  "JavaScript/68": "console.assert(pluck([1, 2, 3, 4, 5]) + '' === [2, 1] + '', \"Test Case 1 Failed\");\nconsole.assert(pluck([2, 4, 6, 8, 10]) + '' === [2, 0] + '', \"Test Case 2 Failed\");\nconsole.assert(pluck([1, 3, 5, 7, 9]) + '' === [].toString(), \"Test Case 3 Failed\");\nconsole.assert(pluck([1, 3, 2, 4, 5]) + '' === [2, 2] + '', \"Test Case 4 Failed\");\nconsole.assert(pluck([4, 2, 6, 1, 8]) + '' === [2, 1] + '', \"Test Case 5 Failed\");",
  "JavaScript/69": "console.assert(search([1, 2, 2, 3, 3, 3]) === 3, \"Test Case 1 Failed\");\nconsole.assert(search([1, 1, 2, 2]) === 2, \"Test Case 2 Failed\");\nconsole.assert(search([1, 1, 1]) === 1, \"Test Case 4 Failed\");",
  "JavaScript/70": "console.assert(JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) === JSON.stringify([1, 5, 2, 4, 3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(strangeSortList([5, 4, 3, 2, 1])) === JSON.stringify([1, 5, 2, 4, 3]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(strangeSortList([3, 1, 4, 1, 5, 9, 2, 6])) === JSON.stringify([1, 9, 1, 6, 2, 5, 3, 4]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(strangeSortList([1, 1, 1, 1, 1])) === JSON.stringify([1, 1, 1, 1, 1]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(strangeSortList([2, 2, 2, 3, 3])) === JSON.stringify([2, 3, 2, 3, 2]), \"Test Case 5 Failed\");",
  "JavaScript/71": "console.assert(triangleArea(3, 4, 5) === \"6.00\", \"Test Case 1 Failed: Right triangle\");\nconsole.assert(triangleArea(5, 12, 13) === \"30.00\", \"Test Case 2 Failed: Another right triangle\");\nconsole.assert(triangleArea(7, 24, 25) === \"84.00\", \"Test Case 3 Failed: Yet another right triangle\");\nconsole.assert(triangleArea(5, 5, 8) === \"12.00\", \"Test Case 4 Failed: Isosceles triangle\");\nconsole.assert(triangleArea(4, 13, 15) === \"24.00\", \"Test Case 5 Failed: Scalene triangle\");",
  "JavaScript/72": "console.assert(willItFly([1, 2, 1], 5), \"Test Case 1 Failed: Palindrome and within weight limit\");\nconsole.assert(!willItFly([1, 2, 1], 3), \"Test Case 2 Failed: Palindrome but exceeds weight limit\");\nconsole.assert(!willItFly([1, 2, 3], 10), \"Test Case 3 Failed: Not a palindrome, but within weight limit\");\nconsole.assert(!willItFly([1, 2, 3], 5), \"Test Case 4 Failed: Not a palindrome and exceeds weight limit\");\nconsole.assert(willItFly([1], 5), \"Test Case 5 Failed: Single element array\");",
  "JavaScript/73": "console.assert(smallestChange([1,2,3,2,1]) === 0, \"Test Case 1 Failed: Palindrome\");\nconsole.assert(smallestChange([1,2,3,4,5]) === 2, \"Test Case 2 Failed: No Palindrome\");\nconsole.assert(smallestChange([1,2,3,2,4]) === 1, \"Test Case 3 Failed: One Change\");\nconsole.assert(smallestChange([1,2,2,1]) === 0, \"Test Case 4 Failed: Even Palindrome\");\nconsole.assert(smallestChange([1,2,3,4,4,3,2,1]) === 0, \"Test Case 5 Failed: Longer Even Palindrome\");",
  "JavaScript/74": "",
  "JavaScript/75": "console.assert(isMultiplyPrime(30) === true, \"Test Case 1 Failed: 30\");\nconsole.assert(isMultiplyPrime(42) === true, \"Test Case 2 Failed: 42\");\nconsole.assert(isMultiplyPrime(1) === false, \"Test Case 4 Failed: 1\");\nconsole.assert(isMultiplyPrime(5) === false, \"Test Case 5 Failed: 5\");",
  "JavaScript/76": "console.assert(isSimplePower(8, 2) === true, \"Test Case 1 Failed: 8 is a power of 2\");\nconsole.assert(isSimplePower(27, 3) === true, \"Test Case 2 Failed: 27 is a power of 3\");\nconsole.assert(isSimplePower(10, 3) === false, \"Test Case 3 Failed: 10 is not a power of 3\");\nconsole.assert(isSimplePower(1, 1) === true, \"Test Case 4 Failed: 1 is a power of 1\");\nconsole.assert(isSimplePower(16, 4) === true, \"Test Case 5 Failed: 16 is a power of 4\");",
  "JavaScript/77": "console.assert(iscube(8) === true, \"Test Case 1 Failed: 8 is a cube\");\nconsole.assert(iscube(27) === true, \"Test Case 2 Failed: 27 is a cube\");\nconsole.assert(iscube(10) === false, \"Test Case 3 Failed: 10 is not a cube\");\nconsole.assert(iscube(0) === true, \"Test Case 4 Failed: 0 is a cube\");\nconsole.assert(iscube(-8) === true, \"Test Case 5 Failed: -8 is a cube\");",
  "JavaScript/78": "console.assert(hexKey(\"1A2B3C\") === 3, \"Test Case 1 Failed\");\nconsole.assert(hexKey(\"2357BD\") === 6, \"Test Case 3 Failed\");\nconsole.assert(hexKey(\"AF14CE\") === 0, \"Test Case 4 Failed\");\nconsole.assert(hexKey(\"22335577BBDD\") === 12, \"Test Case 5 Failed\");",
  "JavaScript/79": "console.assert(decimalToBinary(0) === \"db0db\", \"Test Case 1 Failed: Decimal 0\");\nconsole.assert(decimalToBinary(1) === \"db1db\", \"Test Case 2 Failed: Decimal 1\");\nconsole.assert(decimalToBinary(2) === \"db10db\", \"Test Case 3 Failed: Decimal 2\");\nconsole.assert(decimalToBinary(10) === \"db1010db\", \"Test Case 4 Failed: Decimal 10\");\nconsole.assert(decimalToBinary(255) === \"db11111111db\", \"Test Case 5 Failed: Decimal 255\");",
  "JavaScript/80": "console.assert(isHappy(\"abc\"), \"Test Case 1 Failed: Basic happy string\");\nconsole.assert(!isHappy(\"aab\"), \"Test Case 2 Failed: Short unhappy string\");\nconsole.assert(isHappy(\"abcdefg\"), \"Test Case 4 Failed: Longer happy string\");\nconsole.assert(!isHappy(\"abccde\"), \"Test Case 5 Failed: Unhappy string with adjacent repeats\");",
  "JavaScript/81": "console.assert(numericalLetterGrade([4.0])[0] === 'A+', \"Test Case 1 Failed: 4.0 should be A+\");\nconsole.assert(numericalLetterGrade([3.8])[0] === 'A', \"Test Case 2 Failed: 3.8 should be A\");\nconsole.assert(numericalLetterGrade([2.5])[0] === 'B-', \"Test Case 3 Failed: 2.5 should be B-\");",
  "JavaScript/82": "console.assert(primeLength(\"abcde\"), \"Test Case 1 Failed: Length 5 is prime\");\nconsole.assert(!primeLength(\"abcdef\"), \"Test Case 2 Failed: Length 6 is not prime\");\nconsole.assert(!primeLength(\"\"), \"Test Case 3 Failed: Length 0 is not prime\");\nconsole.assert(primeLength(\"ab\"), \"Test Case 4 Failed: Length 2 is prime\");\nconsole.assert(!primeLength(\"abcd\"), \"Test Case 5 Failed: Length 4 is not prime\");",
  "JavaScript/83": "console.assert(startsOneEnds(1) === 1, \"Test Case 1 Failed: n = 1\");\nconsole.assert(startsOneEnds(2) === 18, \"Test Case 2 Failed: n = 2\");\nconsole.assert(startsOneEnds(3) === 180, \"Test Case 3 Failed: n = 3\");\nconsole.assert(startsOneEnds(4) === 1800, \"Test Case 4 Failed: n = 4\");\nconsole.assert(startsOneEnds(5) === 18000, \"Test Case 5 Failed: n = 5\");",
  "JavaScript/84": "console.assert(solve(1) === \"1\", \"Test Case 1 Failed\");\nconsole.assert(solve(10) === \"1\", \"Test Case 2 Failed\");\nconsole.assert(solve(99) === \"10010\", \"Test Case 4 Failed\");",
  "JavaScript/85": "console.assert(add([1, 2, 3, 4, 5, 6]) === 12, \"Test Case 1 Failed\");\nconsole.assert(add([1, 3, 5, 7, 9, 11]) === 0, \"Test Case 3 Failed\");\nconsole.assert(add([2, 4, 6, 8, 10, 12]) === 24, \"Test Case 5 Failed\");",
  "JavaScript/86": "console.assert(antiShuffle(\"hello\") === \"ehllo\", \"Test Case 1 Failed\");\nconsole.assert(antiShuffle(\"javascript is fun\") === \"aacijprstv is fnu\", \"Test Case 3 Failed\");\nconsole.assert(antiShuffle(\"algorithm\") === \"aghilmort\", \"Test Case 4 Failed\");\nconsole.assert(antiShuffle(\"a bb ccc dddd\") === \"a bb ccc dddd\", \"Test Case 5 Failed\");",
  "JavaScript/87": "console.assert(JSON.stringify(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)) === JSON.stringify([1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)) === JSON.stringify([0]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9)) === JSON.stringify([2]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/88": "console.assert(JSON.stringify(sortArray([1, 2, 3, 4, 5])) === JSON.stringify([ 5, 4, 3, 2, 1 ]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(sortArray([5, 4, 3, 2, 1])) === JSON.stringify([ 5, 4, 3, 2, 1 ]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(sortArray([1, 1, 1, 1, 1])) === JSON.stringify([ 1, 1, 1, 1, 1 ]), \"Test Case 5 Failed\");",
  "JavaScript/89": "console.assert(encrypt(\"abc\") === \"efg\", \"Test Case 1 Failed\");\nconsole.assert(encrypt(\"xyz\") === \"bcd\", \"Test Case 2 Failed\");\nconsole.assert(encrypt(\"programming\") === \"tvskveqqmrk\", \"Test Case 3 Failed\");\nconsole.assert(encrypt(\"aaaa\") === \"eeee\", \"Test Case 4 Failed\");\nconsole.assert(encrypt(\"\") === \"\", \"Test Case 5 Failed\");",
  "JavaScript/90": "console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2, \"Test Case 1 Failed\");\nconsole.assert(nextSmallest([5, 4, 3, 2, 1]) === 2, \"Test Case 2 Failed\");\nconsole.assert(nextSmallest([1, 1, 1, 2, 3]) === 2, \"Test Case 3 Failed\");\nconsole.assert(nextSmallest([1, 1, 1, 1, 1]) === null, \"Test Case 4 Failed\");\nconsole.assert(nextSmallest([3, 1, 4, 1, 5, 9, 2, 6]) === 2, \"Test Case 5 Failed\");",
  "JavaScript/91": "console.assert(isBored(\"I am bored.\") === 1, \"Test Case 1 Failed\");\nconsole.assert(isBored(\"I am bored. I am very bored.\") === 2, \"Test Case 2 Failed\");\nconsole.assert(isBored(\"Are you bored? I am not.\") === 1, \"Test Case 3 Failed\");\nconsole.assert(isBored(\"I am. I am?\") === 2, \"Test Case 4 Failed\");\nconsole.assert(isBored(\"This is a test.\") === 0, \"Test Case 5 Failed\");",
  "JavaScript/92": "console.assert(anyInt(1, 2, 3) === true, \"Test Case 1 Failed\");\nconsole.assert(anyInt(3, 2, 1) === true, \"Test Case 2 Failed\");\nconsole.assert(anyInt(5, 5, 10) === true, \"Test Case 3 Failed\");\nconsole.assert(anyInt(10, 5, 5) === true, \"Test Case 4 Failed\");\nconsole.assert(anyInt(0, 0, 0) === true, \"Test Case 5 Failed\");",
  "JavaScript/93": "console.assert(encode(\"\") === \"\", \"Test Case 4 Failed\");",
  "JavaScript/94": "console.assert(skjkasdkd([2, 3, 4, 5, 6]) === 5, \"Test Case 1 Failed\");\nconsole.assert(skjkasdkd([10, 12, 14, 16, 17]) === 8, \"Test Case 2 Failed\");\nconsole.assert(skjkasdkd([20, 22, 24, 26, 29]) === 11, \"Test Case 3 Failed\");\nconsole.assert(skjkasdkd([31, 33, 35, 37, 39]) === 10, \"Test Case 4 Failed\");",
  "JavaScript/95": "console.assert(checkDictCase({\"a\": 1, \"b\": 2}), \"Test Case 1 Failed: Lowercase dictionary\");\nconsole.assert(checkDictCase({\"A\": 1, \"B\": 2}), \"Test Case 2 Failed: Uppercase dictionary\");\nconsole.assert(!checkDictCase({\"a\": 1, \"B\": 2}), \"Test Case 3 Failed: Mixed case dictionary\");\nconsole.assert(!checkDictCase({}), \"Test Case 4 Failed: Empty dictionary\");\nconsole.assert(checkDictCase({\"ABC\": 1, \"DEF\": 2}), \"Test Case 5 Failed: Uppercase strings\");",
  "JavaScript/96": "console.assert(JSON.stringify(countUpTo(2)) === JSON.stringify([]), \"Test Case 1 Failed: n = 2\");\nconsole.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2,3,5,7]), \"Test Case 2 Failed: n = 10\");\nconsole.assert(JSON.stringify(countUpTo(20)) === JSON.stringify([2,3,5,7,11,13,17,19]), \"Test Case 3 Failed: n = 20\");\nconsole.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2,3]), \"Test Case 4 Failed: n = 5\");\nconsole.assert(JSON.stringify(countUpTo(3)) === JSON.stringify([2]), \"Test Case 5 Failed: n = 3\");",
  "JavaScript/97": "console.assert(multiply(12, 13) === 6, \"Test Case 1 Failed: Positive numbers\");\nconsole.assert(multiply(-12, 13) === 6, \"Test Case 2 Failed: Negative and Positive numbers\");\nconsole.assert(multiply(12, -13) === 6, \"Test Case 3 Failed: Positive and Negative numbers\");\nconsole.assert(multiply(-12, -13) === 6, \"Test Case 4 Failed: Negative numbers\");\nconsole.assert(multiply(10, 20) === 0, \"Test Case 5 Failed: Numbers ending with zero\");",
  "JavaScript/98": "console.assert(countUpper(\"ACEGI\") === 3, \"Test Case 1 Failed\");\nconsole.assert(countUpper(\"AEIOU\") === 3, \"Test Case 2 Failed\");\nconsole.assert(countUpper(\"BCDFG\") === 0, \"Test Case 3 Failed\");",
  "JavaScript/99": "console.assert(closestInteger(2.4) === 2, \"Test Case 1 Failed: 2.4\");\nconsole.assert(closestInteger(2.5) === 3, \"Test Case 2 Failed: 2.5\");\nconsole.assert(closestInteger(-2.4) === -2, \"Test Case 4 Failed: -2.4\");",
  "JavaScript/100": "console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]), \"Test Case 3 Failed\");",
  "JavaScript/101": "console.assert(JSON.stringify(wordsString(\"hello world\")) === JSON.stringify([\"hello\", \"world\"]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(wordsString(\"hello,world\")) === JSON.stringify([\"hello\", \"world\"]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(wordsString(\"hello, world\")) === JSON.stringify([\"hello\", \"world\"]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(wordsString(\"single\")) === JSON.stringify([\"single\"]), \"Test Case 5 Failed\");",
  "JavaScript/102": "console.assert(chooseNum(1, 5) === 4, \"Test Case 1 Failed: Should return the largest even number in range [x, y]\");\nconsole.assert(chooseNum(6, 10) === 10, \"Test Case 2 Failed: Should return the largest even number when y is even\");\nconsole.assert(chooseNum(1, 1) === -1, \"Test Case 3 Failed: Should return -1 when no even number is present\");\nconsole.assert(chooseNum(3, 3) === -1, \"Test Case 4 Failed: Should return -1 when the only number is odd\");\nconsole.assert(chooseNum(2, 2) === 2, \"Test Case 5 Failed: Should return the number when x and y are equal and even\");",
  "JavaScript/103": "console.assert(roundedAvg(1, 3) === '0b10', 'Test Case 1 Failed');\nconsole.assert(roundedAvg(2, 4) === '0b11', 'Test Case 2 Failed');\nconsole.assert(roundedAvg(5, 5) === '0b101', 'Test Case 3 Failed');\nconsole.assert(roundedAvg(1, 2) === '0b10', 'Test Case 4 Failed');\nconsole.assert(roundedAvg(6, 7) === '0b111', 'Test Case 5 Failed');",
  "JavaScript/104": "console.assert(JSON.stringify(uniqueDigits([1, 2, 3, 4, 5])) === JSON.stringify([1, 3, 5]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(uniqueDigits([11, 22, 33, 44, 55])) === JSON.stringify([11, 33, 55]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(uniqueDigits([123, 456, 789, 135, 246])) === JSON.stringify([ 135 ]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(uniqueDigits([135, 31, 5, 79, 24])) === JSON.stringify([ 5, 31, 79, 135 ]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(uniqueDigits([2, 4, 6, 8, 10])) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/105": "console.assert(JSON.stringify(byLength([1, 2, 3, 4, 5])) === JSON.stringify([\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(byLength([5, 4, 3, 2, 1])) === JSON.stringify([\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(byLength([1, 11, 2, 12, 3])) === JSON.stringify([\"Three\", \"Two\", \"One\"]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(byLength([10, -1, 0, 6, 7])) === JSON.stringify([\"Seven\", \"Six\"]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(byLength([])) === JSON.stringify([]), \"Test Case 5 Failed\");",
  "JavaScript/106": "console.assert(JSON.stringify(f(1)) === JSON.stringify([1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(f(2)) === JSON.stringify([ 1, 2 ]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(f(3)) === JSON.stringify([ 1, 2, 6 ]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(f(4)) === JSON.stringify([ 1, 2, 6, 24 ]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(f(5)) === JSON.stringify([ 1, 2, 6, 24, 15 ]), \"Test Case 5 Failed\");",
  "JavaScript/107": "",
  "JavaScript/108": "console.assert(countNums([1, 2, 3]) === 3, \"Test Case 1 Failed\");\nconsole.assert(countNums([-1, -11, -123, 1, 2]) === 3, \"Test Case 2 Failed\");\nconsole.assert(countNums([-10, -20, -30]) === 0, \"Test Case 3 Failed\");\nconsole.assert(countNums([1, -100, 2, -200, 3]) === 3, \"Test Case 4 Failed\");\nconsole.assert(countNums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) === 0, \"Test Case 5 Failed\");",
  "JavaScript/109": "console.assert(moveOneBall([1, 2, 3]) === true, \"Test Case 1 Failed: Already sorted\");\nconsole.assert(moveOneBall([3, 1, 2]) === true, \"Test Case 2 Failed: One move needed\");\nconsole.assert(moveOneBall([2, 3, 1]) === true, \"Test Case 3 Failed: Two moves needed\");\nconsole.assert(moveOneBall([1, 3, 2]) === false, \"Test Case 4 Failed: Not sortable by moving one ball\");\nconsole.assert(moveOneBall([]) === true, \"Test Case 5 Failed: Empty array\");",
  "JavaScript/110": "console.assert(exchange([2, 4, 6], [1, 3, 5]) === 'YES', \"Test Case 1 Failed\");\nconsole.assert(exchange([2, 4], [1, 3]) === 'YES', \"Test Case 3 Failed\");\nconsole.assert(exchange([1, 3, 5], [1, 3]) === 'NO', \"Test Case 4 Failed\");\nconsole.assert(exchange([2, 4, 1], [2, 2]) === 'YES', \"Test Case 5 Failed\");",
  "JavaScript/111": "console.assert(JSON.stringify(histogram(\"a a b\")) === JSON.stringify({\"a\":2}), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(histogram(\"a b c\")) === JSON.stringify({\"a\":1,\"b\":1,\"c\":1}), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(histogram(\"\")) === JSON.stringify({}), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(histogram(\"a a a b b\")) === JSON.stringify({\"a\":3}), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(histogram(\"a a b b c c\")) === JSON.stringify({\"a\":2,\"b\":2,\"c\":2}), \"Test Case 5 Failed\");",
  "JavaScript/112": "console.assert(reverseDelete(\"rotor\", \"t\") === true, \"Test Case 2 Failed\");\nconsole.assert(reverseDelete(\"level\", \"\") === true, \"Test Case 3 Failed\");\nconsole.assert(reverseDelete(\"hello\", \"l\") === false, \"Test Case 4 Failed\");",
  "JavaScript/113": "console.assert(oddCount([\"abc\"]).length === 1, \"Test Case 1 Failed: Length should be 1\");\nconsole.assert(oddCount([\"abcd\"])[0] === \"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"Test Case 2 Failed: Incorrect message\");\nconsole.assert(oddCount([\"a\", \"b\", \"c\"]).length === 3, \"Test Case 3 Failed: Length should be 3\");",
  "JavaScript/114": "console.assert(minSubArraySum([1, -2, 3, -4, 5]) === -4, \"Test Case 1 Failed\");\nconsole.assert(minSubArraySum([1, 2, 3, 4, 5]) === 1, \"Test Case 2 Failed\");\nconsole.assert(minSubArraySum([-1, -2, -3, -4, -5]) === -15, \"Test Case 3 Failed\");\nconsole.assert(minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) === -5, \"Test Case 4 Failed\");\nconsole.assert(minSubArraySum([0, 0, 0, 0, 0]) === 0, \"Test Case 5 Failed\");",
  "JavaScript/115": "console.assert(maxFill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3) === 3, \"Test Case 1 Failed\");\nconsole.assert(maxFill([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) === 9, \"Test Case 3 Failed\");",
  "JavaScript/116": "console.assert(JSON.stringify(sortArray([5, 3, 7, 10])) === JSON.stringify([3, 5, 10, 7]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sortArray([0, 1, 2, 3, 4, 5, 6, 7, 8])) === JSON.stringify([0, 1, 2, 4, 8, 3, 5, 6, 7]), \"Test Case 2 Failed\");",
  "JavaScript/117": "console.assert(JSON.stringify(selectWords(\"fly high\", 1)) === JSON.stringify([]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(selectWords(\"\", 2)) === JSON.stringify([]), \"Test Case 4 Failed\");",
  "JavaScript/118": "console.assert(getClosestVowel(\"aeiou\") === \"\", \"Test Case 3 Failed: All vowels\");",
  "JavaScript/119": "console.assert(matchParens([\"(())\", \"\"]) === \"Yes\", \"Test Case 1 Failed\");\nconsole.assert(matchParens([\"\", \"(())\"]) === \"Yes\", \"Test Case 2 Failed\");\nconsole.assert(matchParens([\"(()\", \")\"]) === \"Yes\", \"Test Case 3 Failed\");\nconsole.assert(matchParens([\"(\", \")(\"]) === \"No\", \"Test Case 4 Failed\");\nconsole.assert(matchParens([\"((\", \"))\"]) === \"Yes\", \"Test Case 5 Failed\");",
  "JavaScript/120": "console.assert(JSON.stringify(maximum([1, 2, 3, 4, 5], 2)) === JSON.stringify([ 4, 5 ]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(maximum([5, 4, 3, 2, 1], 3)) === JSON.stringify([ 3, 4, 5 ]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(maximum([1, 5, 2, 4, 3], 1)) === JSON.stringify([ 5 ]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(maximum([1, 2, 3, 4, 5], 0)) === JSON.stringify([]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(maximum([5, 5, 5, 5, 5], 4)) === JSON.stringify([ 5, 5, 5, 5 ]), \"Test Case 5 Failed\");",
  "JavaScript/121": "console.assert(solution([1, 2, 3, 4, 5]) === 9, \"Test Case 1 Failed\");\nconsole.assert(solution([2, 3, 4, 5, 6]) === 0, \"Test Case 2 Failed\");\nconsole.assert(solution([2, 4, 6, 8, 10]) === 0, \"Test Case 4 Failed\");\nconsole.assert(solution([1, 2, 3]) === 4, \"Test Case 5 Failed\");",
  "JavaScript/122": "console.assert(addElements([1, 2, 3], 3) === 6, \"Test Case 1 Failed\");\nconsole.assert(addElements([100, 200, 300], 3) === 0, \"Test Case 2 Failed\");\nconsole.assert(addElements([-1, -2, -3], 3) === -6, \"Test Case 3 Failed\");\nconsole.assert(addElements([1, 2, 3, 4, 5], 2) === 3, \"Test Case 4 Failed\");",
  "JavaScript/123": "",
  "JavaScript/124": "console.assert(validDate(\"12-25-2023\") === true, \"Test Case 1 Failed: Valid Christmas date\");\nconsole.assert(validDate(\"02-28-2024\") === true, \"Test Case 2 Failed: Valid February date\");\nconsole.assert(validDate(\"04-30-2023\") === true, \"Test Case 3 Failed: Valid April date\");\nconsole.assert(validDate(\"11-30-2023\") === true, \"Test Case 4 Failed: Valid November date\");\nconsole.assert(validDate(\"06-15-2023\") === true, \"Test Case 5 Failed: Valid June date\");",
  "JavaScript/125": "console.assert(JSON.stringify(splitWords(\"hello world\")) === JSON.stringify([\"hello\", \"world\"]), \"Test Case 1 Failed: Space separated\");\nconsole.assert(JSON.stringify(splitWords(\"apple,banana\")) === JSON.stringify([\"apple\", \"banana\"]), \"Test Case 2 Failed: Comma separated\");\nconsole.assert(splitWords(\"abc\") === 1, \"Test Case 3 Failed: Single word with even lowercase\");\nconsole.assert(splitWords(\"axy\") === 1, \"Test Case 5 Failed: Mixed even and odd lowercase chars\");",
  "JavaScript/126": "console.assert(isSorted([]) === true, \"Test Case 1 Failed: Empty list\");\nconsole.assert(isSorted([1, 2, 3, 4, 5]) === true, \"Test Case 2 Failed: Sorted list\");\nconsole.assert(isSorted([1, 2, 2, 4, 5]) === true, \"Test Case 3 Failed: Sorted list with duplicates\");\nconsole.assert(isSorted([1, 2, 2, 2, 5]) === false, \"Test Case 4 Failed: Sorted list with too many duplicates\");\nconsole.assert(isSorted([5, 4, 3, 2, 1]) === false, \"Test Case 5 Failed: Unsorted list\");",
  "JavaScript/127": "console.assert(intersection([1, 5], [2, 4]) === 'YES', 'Test Case 1 Failed');\nconsole.assert(intersection([1, 3], [2, 4]) === 'NO', 'Test Case 2 Failed');\nconsole.assert(intersection([1, 6], [2, 8]) === 'NO', 'Test Case 3 Failed');\nconsole.assert(intersection([1, 4], [5, 7]) === 'NO', 'Test Case 4 Failed');",
  "JavaScript/128": "console.assert(prodSigns([1, 2, 3]) === 6, \"Test Case 1 Failed\");\nconsole.assert(prodSigns([-1, 2, 3]) === -6, \"Test Case 2 Failed\");\nconsole.assert(prodSigns([-1, -2, 3]) === 6, \"Test Case 3 Failed\");\nconsole.assert(prodSigns([-1, -2, -3]) === -6, \"Test Case 4 Failed\");\nconsole.assert(prodSigns([1, 0, 3]) === 0, \"Test Case 5 Failed\");",
  "JavaScript/129": "console.assert(JSON.stringify(minPath([[0, 0, 0], [0, 1, 0], [0, 0, 0]], 3)) === JSON.stringify([1, 0, 1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(minPath([[0, 0], [1, 0]], 2)) === JSON.stringify([1, 0]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(minPath([[1]], 4)) === JSON.stringify([1, 1, 1, 1]), \"Test Case 3 Failed\");",
  "JavaScript/130": "console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]), \"Test Case 1 Failed: n = 0\");\nconsole.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]), \"Test Case 2 Failed: n = 1\");\nconsole.assert(JSON.stringify(tri(2)) === JSON.stringify([1, 3, 2]), \"Test Case 3 Failed: n = 2\");\nconsole.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2, 8]), \"Test Case 4 Failed: n = 3\");\nconsole.assert(JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2, 8, 3]), \"Test Case 5 Failed: n = 4\");",
  "JavaScript/131": "console.assert(digits(12345) === 15, \"Test Case 1 Failed\");\nconsole.assert(digits(2468) === 0, \"Test Case 2 Failed\");\nconsole.assert(digits(13579) === 945, \"Test Case 3 Failed\");\nconsole.assert(digits(1) === 1, \"Test Case 4 Failed\");\nconsole.assert(digits(222) === 0, \"Test Case 5 Failed\");",
  "JavaScript/132": "console.assert(isNested(\"[[]]\"), \"Test Case 1 Failed: Simple nested brackets\");\nconsole.assert(isNested(\"[[][]]\"), \"Test Case 2 Failed: More complex nested brackets\");\nconsole.assert(!isNested(\"[][]\"), \"Test Case 3 Failed: Not nested, just adjacent\");\nconsole.assert(!isNested(\"[]\"), \"Test Case 4 Failed: Single pair of brackets\");\nconsole.assert(isNested(\"[[[]]]\"), \"Test Case 5 Failed: Deeply nested brackets\");",
  "JavaScript/133": "console.assert(sumSquares([1, 2, 3]) === 14, \"Test Case 1 Failed: Basic test\");\nconsole.assert(sumSquares([-1, -2, -3]) === 14, \"Test Case 3 Failed: Negative numbers\");\nconsole.assert(sumSquares([]) === 0, \"Test Case 4 Failed: Empty list\");\nconsole.assert(sumSquares([0, 0, 0]) === 0, \"Test Case 5 Failed: Zero values\");",
  "JavaScript/134": "console.assert(checkIfLastCharIsALetter(\"Hello A\") === true, \"Test Case 1 Failed: Last char after space\");\nconsole.assert(checkIfLastCharIsALetter(\"A\") === true, \"Test Case 2 Failed: Single letter\");\nconsole.assert(checkIfLastCharIsALetter(\" Hello\") === false, \"Test Case 3 Failed: Last char is not a letter\");\nconsole.assert(checkIfLastCharIsALetter(\"Hello 1\") === false, \"Test Case 4 Failed: Last char is a number after space\");\nconsole.assert(checkIfLastCharIsALetter(\"\") === false, \"Test Case 5 Failed: Empty string\");",
  "JavaScript/135": "console.assert(canArrange([1,2,3,4,5]) === -1, \"Test Case 1 Failed\");\nconsole.assert(canArrange([1,3,2,4,5]) === 2, \"Test Case 3 Failed\");\nconsole.assert(canArrange([1,2,3,5,4]) === 4, \"Test Case 4 Failed\");\nconsole.assert(canArrange([1,2]) === -1, \"Test Case 5 Failed\");",
  "JavaScript/136": "",
  "JavaScript/137": "console.assert(compareOne(1, 1) === null, 'Test Case 3 Failed');\nconsole.assert(compareOne('1,5', 1) === '1,5', 'Test Case 4 Failed');\nconsole.assert(compareOne('1', '2,5') === '2,5', 'Test Case 5 Failed');",
  "JavaScript/138": "console.assert(isEqualToSumEven(8) === true, \"Test Case 1 Failed: n = 8\");\nconsole.assert(isEqualToSumEven(10) === true, \"Test Case 2 Failed: n = 10\");\nconsole.assert(isEqualToSumEven(6) === false, \"Test Case 3 Failed: n = 6\");\nconsole.assert(isEqualToSumEven(9) === false, \"Test Case 4 Failed: n = 9\");\nconsole.assert(isEqualToSumEven(12) === true, \"Test Case 5 Failed: n = 12\");",
  "JavaScript/139": "console.assert(specialFactorial(1) === 1, \"Test Case 1 Failed: n = 1\");\nconsole.assert(specialFactorial(2) === 2, \"Test Case 2 Failed: n = 2\");",
  "JavaScript/140": "console.assert(fixSpaces(\"hello world\") === \"hello_world\", \"Test Case 1 Failed\");\nconsole.assert(fixSpaces(\"hello  world\") === \"hello__world\", \"Test Case 2 Failed\");\nconsole.assert(fixSpaces(\"hello   world\") === \"hello-world\", \"Test Case 3 Failed\");\nconsole.assert(fixSpaces(\" hello \") === \"_hello_\", \"Test Case 4 Failed\");",
  "JavaScript/141": "console.assert(fileNameCheck(\"file.txt\") === \"Yes\", \"Test Case 1 Failed\");\nconsole.assert(fileNameCheck(\"File123.dll\") === \"Yes\", \"Test Case 2 Failed\");\nconsole.assert(fileNameCheck(\"a1234.exe\") === \"No\", \"Test Case 3 Failed\");\nconsole.assert(fileNameCheck(\"1file.txt\") === \"No\", \"Test Case 4 Failed\");\nconsole.assert(fileNameCheck(\"file.pdf\") === \"No\", \"Test Case 5 Failed\");",
  "JavaScript/142": "console.assert(sumSquares([0, 0, 0, 0, 0]) === 0, \"Test Case 2 Failed\");\nconsole.assert(sumSquares([1, 1, 1, 1, 1]) === 1 + 1 + 1 + 1*1*1 + 1, \"Test Case 3 Failed\");\nconsole.assert(sumSquares([1]) === 1, \"Test Case 5 Failed\");",
  "JavaScript/143": "console.assert(wordsInSentence(\"Prime words are fun\") === \"Prime words are fun\", \"Test Case 3 Failed\");",
  "JavaScript/144": "console.assert(simplify(\"2/3\", \"3/2\") === true, \"Test Case 1 Failed\");\nconsole.assert(simplify(\"1/2\", \"1/4\") === false, \"Test Case 2 Failed\");\nconsole.assert(simplify(\"4/1\", \"1/2\") === true, \"Test Case 3 Failed\");\nconsole.assert(simplify(\"1/1\", \"1/1\") === true, \"Test Case 4 Failed\");\nconsole.assert(simplify(\"5/2\", \"2/5\") === true, \"Test Case 5 Failed\");",
  "JavaScript/145": "console.assert(JSON.stringify(orderByPoints([13, 2, 1])) === JSON.stringify([ 1, 2, 13 ]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(orderByPoints([1, 2, 3])) === JSON.stringify([ 1, 2, 3 ]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(orderByPoints([3, 2, 1])) === JSON.stringify([ 1, 2, 3 ]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(orderByPoints([-1, 2, -3])) === JSON.stringify([ -3, -1, 2 ]), \"Test Case 4 Failed\");",
  "JavaScript/146": "console.assert(specialFilter([11, 22, 33, 44, 55]) === 3, \"Test Case 1 Failed\");\nconsole.assert(specialFilter([21, 32, 43, 54, 65]) === 0, \"Test Case 2 Failed\");\nconsole.assert(specialFilter([11, 22, 33, 44, 55, 111]) === 4, \"Test Case 3 Failed\");\nconsole.assert(specialFilter([12, 34, 56, 78, 90]) === 0, \"Test Case 4 Failed\");\nconsole.assert(specialFilter([11, 23, 35, 47, 59, 10, 91, 73, 55, 37]) === 7, \"Test Case 5 Failed\");",
  "JavaScript/147": "",
  "JavaScript/148": "console.assert(JSON.stringify(bf('Earth', 'Jupiter')) === JSON.stringify(['Mars']), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(bf('Mercury', 'Earth')) === JSON.stringify(['Venus']), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(bf('Venus', 'Neptune')) === JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(bf('Earth', 'Mars')) === JSON.stringify([]), 'Test Case 5 Failed');",
  "JavaScript/149": "console.assert(JSON.stringify(sortedListSum([\"aaaa\", \"bb\", \"c\", \"dddd\"])) === JSON.stringify([\"bb\",\"aaaa\",\"dddd\"]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sortedListSum([\"a\", \"bb\", \"cccc\", \"ddd\"])) === JSON.stringify([\"bb\",\"cccc\"]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(sortedListSum([\"aa\", \"bbbb\", \"cc\", \"d\"])) === JSON.stringify([\"aa\",\"cc\",\"bbbb\"]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(sortedListSum([\"abc\", \"abcd\", \"ab\", \"abcde\"])) === JSON.stringify([\"ab\",\"abcd\"]), \"Test Case 4 Failed\");",
  "JavaScript/150": "console.assert(xOrY(1, 2, 3) === 3, \"Test Case 1 Failed: n=1\");\nconsole.assert(xOrY(4, 5, 6) === 6, \"Test Case 2 Failed: n=4\");\nconsole.assert(xOrY(7, 8, 9) === 8, \"Test Case 3 Failed: n=7\");\nconsole.assert(xOrY(12, 10, 11) === 11, \"Test Case 4 Failed: n=12\");\nconsole.assert(xOrY(13, 14, 15) === 14, \"Test Case 5 Failed: n=13\");",
  "JavaScript/151": "console.assert(doubleTheDifference([1, 2, 3, 4, 5]) === 35, \"Test Case 1 Failed\");\nconsole.assert(doubleTheDifference([2, 4, 6, 8, 10]) === 0, \"Test Case 2 Failed\");\nconsole.assert(doubleTheDifference([1, 3, 5, 7, 9]) === 165, \"Test Case 3 Failed\");\nconsole.assert(doubleTheDifference([1, 2, -3, 4, 5, 0]) === 26, \"Test Case 5 Failed\");",
  "JavaScript/152": "console.assert(compare([1, 2, 3], [1, 2, 3]).every((val, index) => val === 0), \"Test Case 1 Failed: Identical arrays\");\nconsole.assert(compare([5, 5, 5], [1, 2, 3]).every((val, index) => val === (5-[1,2,3][index]<0?-[5-[1,2,3][index]]:5-[1,2,3][index])), \"Test Case 3 Failed: Different values\");\nconsole.assert(compare([0, 0, 0], [1, 1, 1]).every((val, index) => val === 1), \"Test Case 5 Failed: Zero values\");",
  "JavaScript/153": "console.assert(strongestExtension('Document', ['txt', 'py', 'CoPy']) === 'Document.CoPy', 'Test Case 1 Failed');\nconsole.assert(strongestExtension('Image', ['jpg', 'PNG', 'gif']) === 'Image.PNG', 'Test Case 2 Failed');\nconsole.assert(strongestExtension('Data', ['csv', 'JSON', 'xml']) === 'Data.JSON', 'Test Case 3 Failed');\nconsole.assert(strongestExtension('Code', ['java', 'CPP', 'js']) === 'Code.CPP', 'Test Case 4 Failed');\nconsole.assert(strongestExtension('Report', ['pdf', 'DOC', 'docx']) === 'Report.DOC', 'Test Case 5 Failed');",
  "JavaScript/154": "console.assert(cycpatternCheck(\"abcdabcdabcd\", \"bcd\") === true, \"Test Case 1 Failed\");\nconsole.assert(cycpatternCheck(\"abcdabcdabcd\", \"def\") === false, \"Test Case 2 Failed\");\nconsole.assert(cycpatternCheck(\"abcdefg\", \"efg\") === true, \"Test Case 3 Failed\");\nconsole.assert(cycpatternCheck(\"abc\", \"abcd\") === false, \"Test Case 5 Failed\");",
  "JavaScript/155": "console.assert(evenOddCount(1234) === (2, 2), \"Test Case 1 Failed: 1234\");\nconsole.assert(evenOddCount(12345) === (2, 3), \"Test Case 2 Failed: 12345\");\nconsole.assert(evenOddCount(2468) === (4, 0), \"Test Case 3 Failed: 2468\");\nconsole.assert(evenOddCount(13579) === (0, 5), \"Test Case 4 Failed: 13579\");\nconsole.assert(evenOddCount(-12) === (1, 1), \"Test Case 5 Failed: -12\");",
  "JavaScript/156": "console.assert(intToMiniRoman(1) === 'i', 'Test Case 1 Failed: 1 should be i');\nconsole.assert(intToMiniRoman(4) === 'iv', 'Test Case 2 Failed: 4 should be iv');\nconsole.assert(intToMiniRoman(9) === 'ix', 'Test Case 3 Failed: 9 should be ix');\nconsole.assert(intToMiniRoman(42) === 'xlii', 'Test Case 4 Failed: 42 should be xlii');\nconsole.assert(intToMiniRoman(1994) === 'mcmxciv', 'Test Case 5 Failed: 1994 should be mcmxciv');",
  "JavaScript/157": "console.assert(rightAngleTriangle(3, 4, 5) === true, \"Test Case 1 Failed: Basic Pythagorean triple\");\nconsole.assert(rightAngleTriangle(5, 12, 13) === true, \"Test Case 2 Failed: Another Pythagorean triple\");\nconsole.assert(rightAngleTriangle(6, 8, 10) === true, \"Test Case 4 Failed: Scaled Pythagorean triple\");\nconsole.assert(rightAngleTriangle(2, 3, 4) === false, \"Test Case 5 Failed: Not a right triangle\");",
  "JavaScript/158": "console.assert(findMax([\"abc\", \"abd\", \"ade\"]) === \"abc\", \"Test Case 1 Failed: Basic test\");\nconsole.assert(findMax([\"a\", \"ab\", \"abc\"]) === \"abc\", \"Test Case 2 Failed: Increasing length\");\nconsole.assert(findMax([\"abc\", \"bca\", \"acb\"]) === \"abc\", \"Test Case 3 Failed: Same unique characters\");\nconsole.assert(findMax([\"abca\", \"abc\", \"abcd\"]) === \"abcd\", \"Test Case 4 Failed: Handling duplicates and length\");\nconsole.assert(findMax([]) === \"\", \"Test Case 5 Failed: Empty array\");",
  "JavaScript/159": "console.assert(eat(5, 3, 10)[0] === 8 && eat(5, 3, 10)[1] === 7, \"Test Case 1 Failed\");\nconsole.assert(eat(2, 7, 4)[0] === 6 && eat(2, 7, 4)[1] === 0, \"Test Case 2 Failed\");\nconsole.assert(eat(0, 5, 5)[0] === 5 && eat(0, 5, 5)[1] === 0, \"Test Case 3 Failed\");\nconsole.assert(eat(10, 2, 1)[0] === 11 && eat(10, 2, 1)[1] === 0, \"Test Case 4 Failed\");\nconsole.assert(eat(1, 1, 1)[0] === 2 && eat(1, 1, 1)[1] === 0, \"Test Case 5 Failed\");",
  "JavaScript/160": "",
  "JavaScript/161": "console.assert(solve(\"Hello\") === \"hELLO\", \"Test Case 1 Failed\");\nconsole.assert(solve(\"wORLD\") === \"World\", \"Test Case 2 Failed\");\nconsole.assert(solve(\"12345\") === \"54321\", \"Test Case 3 Failed\");\nconsole.assert(solve(\"abcDEF\") === \"ABCdef\", \"Test Case 4 Failed\");\nconsole.assert(solve(\"Programming\") === \"pROGRAMMING\", \"Test Case 5 Failed\");",
  "JavaScript/162": "console.assert(stringToMd5(\"hello\") === \"5d41402abc4b2a76b9719d911017c592\", \"Test Case 1 Failed: 'hello'\");\nconsole.assert(stringToMd5(\"12345\") === \"827ccb0eea8a706c4c34a16891f84e7b\", \"Test Case 3 Failed: '12345'\");\nconsole.assert(stringToMd5(\" \") === \"7215ee9c7d9dc229d2921a40e899ec5f\", \"Test Case 5 Failed: ' '\");",
  "JavaScript/163": "console.assert(JSON.stringify(generateIntegers(1, 3)) === JSON.stringify([2]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2,4,6,8]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(generateIntegers(5, 7)) === JSON.stringify([6]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(generateIntegers(7, 5)) === JSON.stringify([6]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(generateIntegers(9, 11)) === JSON.stringify([]), \"Test Case 5 Failed\");"
}