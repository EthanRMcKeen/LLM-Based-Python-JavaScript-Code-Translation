{
  "Python/0": "assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\nassert has_close_elements([1.0, 2.0, 3.0], 2.5) == True\nassert has_close_elements([10.5, 8.3, 6.7, 9.2], 1.0) == True\nassert has_close_elements([4.0, 8.0, 12.0, 16.0], 3.0) == False",
  "Python/1": "assert separate_paren_groups(\"((()))()\") == [\"((()))\", \"()\"]\nassert separate_paren_groups(\"(())(()())\") == [\"(())\", \"(()())\"]\nassert separate_paren_groups(\"()()()()\") == [\"()\", \"()\", \"()\", \"()\"]",
  "Python/2": "assert truncate_number(3.14) == 0.14000000000000012\nassert truncate_number(7.0) == 0.0\nassert truncate_number(123.456) == 0.45600000000000307\nassert truncate_number(0.5) == 0.5",
  "Python/3": "assert below_zero([1, 2, 3, 4, 5]) == False\nassert below_zero([-1, -2, -3, -4, -5]) == True\nassert below_zero([10, 10, 10, 10, 10]) == False",
  "Python/4": "assert mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.2\nassert mean_absolute_deviation([10, 20, 30, 40, 50]) == 12.0\nassert mean_absolute_deviation([3, 7, 11, 15, 19]) == 4.8",
  "Python/5": "assert intersperse([], 0) == []\nassert intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\nassert intersperse([5, 6, 7, 8], 9) == [5, 9, 6, 9, 7, 9, 8]\nassert intersperse([-1, -2, -3, -4], -5) == [-1, -5, -2, -5, -3, -5, -4]\nassert intersperse([10], 20) == [10]",
  "Python/6": "assert parse_nested_parens(\"\") == []\nassert parse_nested_parens(\"()\") == [1]\nassert parse_nested_parens(\"(()) ()\") == [2, 1]\nassert parse_nested_parens(\"() () ()\") == [1, 1, 1]",
  "Python/7": "assert filter_by_substring(['cat', 'dog', 'fish', 'rabbit'], 'at') == ['cat']\nassert filter_by_substring(['alpha', 'beta', 'gamma'], 'm') == ['gamma']\nassert filter_by_substring(['sun', 'moon', 'stars'], 's') == ['sun', 'stars']",
  "Python/8": "assert sum_product([1, 2, 3]) == (6, 6)\nassert sum_product([0, 4, 5]) == (9, 0)\nassert sum_product([10, 2, 1]) == (13, 20)\nassert sum_product([3, 3, 3]) == (9, 27)\nassert sum_product([-1, 2, -3]) == (-2, 6)",
  "Python/9": "assert rolling_max([1, 3, 5, 2, 4, 6, 3]) == [1, 3, 5, 5, 5, 6, 6]\nassert rolling_max([10, 9, 8, 7, 6, 5]) == [10, 10, 10, 10, 10, 10]\nassert rolling_max([3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3]\nassert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]",
  "Python/10": "assert make_palindrome(\"racecar\") == \"racecar\"\nassert make_palindrome(\"level\") == \"level\"\nassert make_palindrome(\"noon\") == \"noon\"\nassert make_palindrome(\"python\") == \"pythonohtyp\"",
  "Python/11": "assert string_xor('111', '000') == '111'\nassert string_xor('1010101', '1111000') == '0101101'\nassert string_xor('1100', '0011') == '1111'\nassert string_xor('01010101', '10101010') == '11111111'\nassert string_xor('1001', '0110') == '1111'",
  "Python/12": "assert longest([\"apple\", \"banana\", \"kiwi\", \"cherry\"]) == \"banana\"\nassert longest([\"cat\", \"dog\", \"lion\", \"elephant\"]) == \"elephant\"\nassert longest([\"blue\", \"red\", \"green\", \"yellow\"]) == \"yellow\"\nassert longest([\"python\", \"java\", \"javascript\", \"php\"]) == \"javascript\"\nassert longest([\"Tokyo\", \"Paris\", \"London\", \"New York\"]) == \"New York\"",
  "Python/13": "assert greatest_common_divisor(12, 18) == 6\nassert greatest_common_divisor(24, 36) == 12\nassert greatest_common_divisor(17, 23) == 1\nassert greatest_common_divisor(50, 75) == 25\nassert greatest_common_divisor(81, 27) == 27",
  "Python/14": "assert all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\nassert all_prefixes(\"world\") == [\"w\", \"wo\", \"wor\", \"worl\", \"world\"]\nassert all_prefixes(\"python\") == [\"p\", \"py\", \"pyt\", \"pyth\", \"pytho\", \"python\"]\nassert all_prefixes(\"test\") == [\"t\", \"te\", \"tes\", \"test\"]\nassert all_prefixes(\"12345\") == [\"1\", \"12\", \"123\", \"1234\", \"12345\"]",
  "Python/15": "assert string_sequence(0) == '0'\nassert string_sequence(1) == '0 1'\nassert string_sequence(5) == '0 1 2 3 4 5'\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\nassert string_sequence(3) == '0 1 2 3'",
  "Python/16": "assert count_distinct_characters(\"Hello World\") == 8\nassert count_distinct_characters(\"Hello\") == 4\nassert count_distinct_characters(\"abcABC\") == 3",
  "Python/17": "assert parse_music(\"o o| o o| o o| o o|\") == [4, 2, 4, 2, 4, 2, 4, 2]",
  "Python/18": "assert how_many_times(\"hellohellohello\", \"hello\") == 3\nassert how_many_times(\"aaaaaa\", \"aa\") == 5\nassert how_many_times(\"abcabcabcabc\", \"abc\") == 4\nassert how_many_times(\"12345\", \"6\") == 0\nassert how_many_times(\"wassup\", \"sup\") == 1",
  "Python/19": "assert sort_numbers(\"five zero two three\") == \"zero two three five\"\nassert sort_numbers(\"seven one four\") == \"one four seven\"\nassert sort_numbers(\"eight zero five six five\") == \"zero five five six eight\"\nassert sort_numbers(\"three two one nine\") == \"one two three nine\"\nassert sort_numbers(\"four seven six\") == \"four six seven\"",
  "Python/20": "assert find_closest_elements([10.5, 5.5, 20.5, 25.5]) == (5.5, 10.5)\nassert find_closest_elements([12.5, 15.5, 14.3, 16.8]) == (14.3, 15.5)\nassert find_closest_elements([3.5, 5.5, 0.0, 4.5, 10.2]) == (3.5, 4.5)",
  "Python/21": "assert rescale_to_unit([1, 2, 3, 4, 5]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert rescale_to_unit([10, 20, 30, 40, 50]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert rescale_to_unit([5, 15, 25, 35, 45]) == [0.0, 0.25, 0.5, 0.75, 1.0]\nassert rescale_to_unit([100, 200, 300, 400, 500]) == [0.0, 0.25, 0.5, 0.75, 1.0]",
  "Python/22": "assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert filter_integers([1, 'a', 2.5, 3, 'b', 4]) == [1, 3, 4]\nassert filter_integers([]) == []\nassert filter_integers(['a', 'b', 'c']) == []\nassert filter_integers([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]",
  "Python/23": "assert strlen(\"hello\") == 5\nassert strlen(\"\") == 0\nassert strlen(\"python\") == 6\nassert strlen(\"12345\") == 5\nassert strlen(\"testing 123!\") == 12",
  "Python/24": "assert largest_divisor(10) == 5\nassert largest_divisor(15) == 5\nassert largest_divisor(21) == 7\nassert largest_divisor(28) == 14\nassert largest_divisor(36) == 18",
  "Python/25": "assert factorize(10) == [2, 5]\nassert factorize(21) == [3, 7]\nassert factorize(56) == [2, 2, 2, 7]\nassert factorize(100) == [2, 2, 5, 5]\nassert factorize(999) == [3, 3, 3, 37]",
  "Python/26": "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, 2, 2, 3, 4, 5, 5]) == [1, 3, 4]\nassert remove_duplicates([1, 1, 1, 1, 1]) == []\nassert remove_duplicates([]) == []\nassert remove_duplicates([-1, 0, 1, 2, -1, 3, 4, 4]) == [0, 1, 2, 3]",
  "Python/27": "assert flip_case(\"Hello World\") == \"hELLO wORLD\"\nassert flip_case(\"123abcXYZ\") == \"123ABCxyz\"\nassert flip_case(\"Python Programming\") == \"pYTHON pROGRAMMING\"\nassert flip_case(\"abc123\") == \"ABC123\"\nassert flip_case(\"eXaMpLe\") == \"ExAmPlE\"",
  "Python/28": "assert concatenate(['hello', 'world']) == 'helloworld'\nassert concatenate(['Python', 'is', 'awesome']) == 'Pythonisawesome'\nassert concatenate(['test', 'case']) == 'testcase'\nassert concatenate(['123', '456']) == '123456'\nassert concatenate([]) == ''",
  "Python/29": "assert filter_by_prefix(['apple', 'banana', 'cherry'], 'b') == ['banana']\nassert filter_by_prefix(['hello', 'world', 'python'], 'p') == ['python']\nassert filter_by_prefix(['cat', 'dog', 'elephant'], 'd') == ['dog']\nassert filter_by_prefix(['green', 'blue', 'yellow'], 'y') == ['yellow']\nassert filter_by_prefix(['car', 'bus', 'bike'], 'c') == ['car']",
  "Python/30": "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert get_positive([-1, -2, 3, -4, 5]) == [3, 5]\nassert get_positive([-10, -20, -30]) == []\nassert get_positive([0, 0, 0, 0]) == []\nassert get_positive([7, -8, 9, -10]) == [7, 9]",
  "Python/31": "assert is_prime(2) == True\nassert is_prime(3) == True\nassert is_prime(7) == True\nassert is_prime(10) == False\nassert is_prime(13) == True",
  "Python/32": "assert math.isclose(find_zero([1, 0, -1]), -1.0, rel_tol=1e-9)",
  "Python/33": "assert sort_third([10, 20, 30, 40, 50, 60]) == [10, 20, 30, 40, 50, 60]",
  "Python/34": "assert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert unique([3, 3, 5, 1, 3]) == [1, 3, 5]\nassert unique([7, 7, 7, 7, 7]) == [7]\nassert unique([]) == []\nassert unique([-5, 0, 2, -3, 2, 0, -5]) == [-5, -3, 0, 2]",
  "Python/35": "assert max_element([12, 34, 56, 78, 90]) == 90\nassert max_element([5, 3, 11, 17, 2, 8]) == 17\nassert max_element([99, 88, 77, 66, 55, 44]) == 99\nassert max_element([-5, -12, -7, -3, -9]) == -3\nassert max_element([2]) == 2",
  "Python/36": "assert fizz_buzz(20) == 0\nassert fizz_buzz(200) == 6",
  "Python/37": "assert sort_even([6, 4, 2, 8, 10]) == [2, 4, 6, 8, 10]\nassert sort_even([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9, 11]",
  "Python/38": "assert encode_cyclic(\"abc\") == \"bca\"",
  "Python/39": "assert prime_fib(1) == 2\nassert prime_fib(2) == 3",
  "Python/40": "assert triples_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert triples_sum_to_zero([-1, 2, 3, -2, 1]) == True\nassert triples_sum_to_zero([0, 0, 0, 0, 0]) == True\nassert triples_sum_to_zero([0, 1, 2, 3, 4, -5, -3]) == True\nassert triples_sum_to_zero([-1, -2, -3, -4, -5]) == False",
  "Python/41": "assert car_race_collision(0) == 0\nassert car_race_collision(1) == 1\nassert car_race_collision(2) == 4\nassert car_race_collision(5) == 25\nassert car_race_collision(10) == 100",
  "Python/42": "assert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([0, 10, 20]) == [1, 11, 21]\nassert incr_list([-1, -2, -3]) == [0, -1, -2]\nassert incr_list([5, 5, 5]) == [6, 6, 6]\nassert incr_list([]) == []",
  "Python/43": "assert pairs_sum_to_zero([1, 2, 3, -3]) == True\nassert pairs_sum_to_zero([0, 1, 2, 3]) == False\nassert pairs_sum_to_zero([0, 0, 0, 0]) == True\nassert pairs_sum_to_zero([1, -1]) == True",
  "Python/44": "assert change_base(10, 2) == \"1010\"\nassert change_base(16, 16) == \"10\"\nassert change_base(255, 8) == \"377\"\nassert change_base(100, 5) == \"400\"\nassert change_base(42, 7) == \"60\"",
  "Python/45": "assert triangle_area(3, 4) == 6.0\nassert triangle_area(5, 7) == 17.5\nassert triangle_area(10, 10) == 50.0\nassert triangle_area(6, 9) == 27.0\nassert triangle_area(12, 8) == 48.0",
  "Python/46": "assert fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2",
  "Python/47": "assert median([1, 2, 3]) == 2\nassert median([5, 2, 10, 6, 1]) == 5\nassert median([4, 8, 3, 1, 6, 2]) == 3.5\nassert median([0, 0, 0, 0, 0, 0, 0]) == 0\nassert median([-3, -2, 0, 4, 7]) == 0",
  "Python/48": "assert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"madam\") == True\nassert is_palindrome(\"level\") == True\nassert is_palindrome(\"hello\") == False\nassert is_palindrome(\"12321\") == True",
  "Python/49": "assert modp(0, 7) == 1\nassert modp(4, 3) == 1\nassert modp(6, 2) == 0",
  "Python/50": "assert encode_shift(\"hello\") == \"mjqqt\"\nassert encode_shift(\"xyz\") == \"cde\"",
  "Python/51": "assert remove_vowels(\"hello\") == \"hll\"\nassert remove_vowels(\"python\") == \"pythn\"\nassert remove_vowels(\"apple\") == \"ppl\"\nassert remove_vowels(\"banana\") == \"bnn\"\nassert remove_vowels(\"programming\") == \"prgrmmng\"",
  "Python/52": "assert below_threshold([1, 2, 3, 4, 5], 6) == True\nassert below_threshold([10, 20, 30, 40, 50], 50) == False\nassert below_threshold([100, 200, 300], 50) == False",
  "Python/53": "assert add(2, 3) == 5\nassert add(-5, 5) == 0\nassert add(0, 0) == 0\nassert add(10, -5) == 5\nassert add(100, 100) == 200",
  "Python/54": "assert same_chars(\"hello\", \"olelh\") == True\nassert same_chars(\"abc\", \"cba\") == True\nassert same_chars(\"12345\", \"54321\") == True\nassert same_chars(\"hello\", \"world\") == False\nassert same_chars(\"python\", \"java\") == False",
  "Python/55": "assert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(5) == 5\nassert fib(10) == 55",
  "Python/56": "assert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<>>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"<<>>><<\") == False\nassert correct_bracketing(\"><\") == False",
  "Python/57": "assert monotonic([1, 2, 3, 4, 5]) == True\nassert monotonic([5, 4, 3, 2, 1]) == True\nassert monotonic([1, 3, 2, 4, 5]) == False\nassert monotonic([5, 4, 3, 2, 6]) == False\nassert monotonic([1, 1, 1, 1, 1]) == True",
  "Python/58": "assert common([1, 2, 3, 4], [3, 4, 5]) == [3, 4]\nassert common([5, 6, 7], [7, 8, 9]) == [7]\nassert common(['a', 'b', 'c'], ['b', 'c', 'd']) == ['b', 'c']\nassert common([], [1, 2, 3]) == []\nassert common([1, 2, 3], []) == []",
  "Python/59": "assert largest_prime_factor(10) == 5\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(21) == 7\nassert largest_prime_factor(56) == 7\nassert largest_prime_factor(13195) == 29",
  "Python/60": "assert sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(5) == 15\nassert sum_to_n(10) == 55\nassert sum_to_n(100) == 5050",
  "Python/61": "assert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"()()\") == True\nassert correct_bracketing(\"(())\") == True\nassert correct_bracketing(\"(()()())\") == True\nassert correct_bracketing(\")(\") == False",
  "Python/62": "assert derivative([1, 2, 3]) == [2, 6]\nassert derivative([0, 1, 2, 3, 4]) == [1, 4, 9, 16]\nassert derivative([1, 0, 1, 0, 1]) == [0, 2, 0, 4]\nassert derivative([0, 0, 0, 0, 0]) == [0, 0, 0, 0]",
  "Python/63": "assert fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1",
  "Python/64": "assert vowels_count(\"Hello\") == 2\nassert vowels_count(\"AEIOU\") == 5\nassert vowels_count(\"qwrtY\") == 1\nassert vowels_count(\"This is a test\") == 4",
  "Python/65": "assert circular_shift(12345, 2) == \"45123\"\nassert circular_shift(123, 5) == \"321\"\nassert circular_shift(777, 1) == \"777\"\nassert circular_shift(54321, 0) == \"54321\"",
  "Python/66": "assert digitSum(\"\") == 0\nassert digitSum(\"123\") == 0",
  "Python/67": "assert fruit_distribution(\"10 apples 5 oranges 3 bananas\", 20) == 2\nassert fruit_distribution(\"3 apples 2 bananas\", 10) == 5\nassert fruit_distribution(\"5 apples 10 oranges\", 15) == 0\nassert fruit_distribution(\"1 apple 2 oranges 3 bananas\", 7) == 1\nassert fruit_distribution(\"0 apples 0 oranges 0 bananas\", 10) == 10",
  "Python/68": "assert pluck([1, 3, 5, 7]) == []\nassert pluck([2, 4, 6, 8]) == [2, 0]\nassert pluck([3, 1, 7, 9, 2, 4, 6, 8]) == [2, 4]\nassert pluck([5, 7, 9, 11, 13]) == []\nassert pluck([10, 7, 6, 8, 2, 4]) == [2, 4]",
  "Python/69": "assert search([1, 1, 1, 3, 3, 3, 3, 4, 4]) == 3\nassert search([1, 1, 1, 1]) == 1\nassert search([5, 5, 5, 5, 5]) == 5",
  "Python/70": "assert strange_sort_list([3, 1, 4, 1, 5, 9, 2, 6]) == [1, 9, 1, 6, 2, 5, 3, 4]\nassert strange_sort_list([2, 3, 1, 4, 5]) == [1, 5, 2, 4, 3]\nassert strange_sort_list([9, 8, 7, 6, 5, 4, 3]) == [3, 9, 4, 8, 5, 7, 6]\nassert strange_sort_list([1, 2, 3, 4, 5, 6, 7]) == [1, 7, 2, 6, 3, 5, 4]\nassert strange_sort_list([5, 5, 5, 1, 1, 1]) == [1, 5, 1, 5, 1, 5]",
  "Python/71": "assert triangle_area(3, 4, 5) == 6.0\nassert triangle_area(6, 8, 10) == 24.0\nassert triangle_area(5, 12, 13) == 30.0\nassert triangle_area(7, 24, 25) == 84.0\nassert triangle_area(8, 15, 17) == 60.0",
  "Python/72": "assert will_it_fly([1, 2, 3, 2, 1], 10) == True\nassert will_it_fly([1, 2, 3, 4, 5], 9) == False\nassert will_it_fly([1], 1) == True",
  "Python/73": "assert smallest_change([1, 2, 3, 4, 5]) == 2\nassert smallest_change([1, 1, 1, 1, 1, 1]) == 0\nassert smallest_change([2, 2, 4, 4, 5, 5]) == 2\nassert smallest_change([1, 2, 3, 2, 1]) == 0\nassert smallest_change([1, 2, 3, 4, 3, 2, 1]) == 0",
  "Python/74": "assert total_match(['apple', 'banana', 'cherry'], ['pear', 'kiwi', 'grape']) == ['pear', 'kiwi', 'grape']\nassert total_match(['elephant', 'giraffe'], ['lion', 'tiger', 'monkey']) == ['elephant', 'giraffe']\nassert total_match(['blue', 'red'], ['yellow', 'green']) == ['blue', 'red']\nassert total_match(['one'], ['two', 'three']) == ['one']\nassert total_match(['python', 'java', 'ruby'], ['javascript', 'c++']) == ['javascript', 'c++']",
  "Python/75": "assert is_multiply_prime(2) == False\nassert is_multiply_prime(17) == False\nassert is_multiply_prime(30) == True",
  "Python/76": "assert is_simple_power(8, 2) == True\nassert is_simple_power(27, 3) == True\nassert is_simple_power(16, 4) == True\nassert is_simple_power(125, 5) == True\nassert is_simple_power(10, 2) == False",
  "Python/77": "assert iscube(27) == True\nassert iscube(-8) == True\nassert iscube(64) == True\nassert iscube(-125) == True",
  "Python/78": "assert hex_key('2357') == 4\nassert hex_key('BDBD') == 4\nassert hex_key('') == 0\nassert hex_key('BBBB') == 4",
  "Python/79": "assert decimal_to_binary(0) == \"db0db\"\nassert decimal_to_binary(5) == \"db101db\"\nassert decimal_to_binary(10) == \"db1010db\"\nassert decimal_to_binary(15) == \"db1111db\"\nassert decimal_to_binary(27) == \"db11011db\"",
  "Python/80": "assert is_happy(\"abcdef\") == True\nassert is_happy(\"123456\") == True\nassert is_happy(\"111111\") == False",
  "Python/81": "assert numerical_letter_grade([3.5, 2.0, 1.0]) == ['A-', 'C', 'D']",
  "Python/82": "assert prime_length(\"hello\") == True\nassert prime_length(\"\") == False\nassert prime_length(\"a\") == False\nassert prime_length(\"engineering\") == True",
  "Python/83": "assert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 18\nassert starts_one_ends(3) == 180\nassert starts_one_ends(4) == 1800\nassert starts_one_ends(5) == 18000",
  "Python/84": "",
  "Python/85": "assert add([1, 3, 5, 7, 9]) == 0",
  "Python/86": "assert anti_shuffle(\"hello world\") == \"ehllo dlorw\"\nassert anti_shuffle(\"abcdef\") == \"abcdef\"\nassert anti_shuffle(\"aaa bbb ccc\") == \"aaa bbb ccc\"",
  "Python/87": "assert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(1, 1)]\nassert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0)]\nassert get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) == [(2, 2)]\nassert get_row([[1, 2], [4, 5], [7, 8]], 8) == [(2, 1)]\nassert get_row([[1, 2], [4, 2], [7, 8]], 2) == [(0, 1), (1, 1)]",
  "Python/88": "assert sort_array([1, 3, 5, 7, 9]) == [9, 7, 5, 3, 1]\nassert sort_array([]) == []",
  "Python/89": "",
  "Python/90": "assert next_smallest([3, 5, 1, 2]) == 2\nassert next_smallest([5, 7, 4, 2, 9]) == 4\nassert next_smallest([1, 1, 1, 1]) == None\nassert next_smallest([-5, 0, 10, 3, -2]) == -2\nassert next_smallest([100, 200, 300, 400]) == 200",
  "Python/91": "assert is_bored(\"I love Python. Python is fun!\") == 1\nassert is_bored(\"Is this working? Yes, it is.\") == 0\nassert is_bored(\"I like testing code. Testing is important.\") == 1",
  "Python/92": "assert any_int(3, 4, 7) == True\nassert any_int(-2, 5, 3) == True\nassert any_int(0, 0, 0) == True\nassert any_int(1, 2, 10) == False",
  "Python/93": "",
  "Python/94": "assert skjkasdkd([17, 19, 23, 29, 31, 37]) == 10\nassert skjkasdkd([97, 99, 101, 103, 107, 109]) == 10",
  "Python/95": "assert check_dict_case({'apple': 1, 'banana': 2}) == True\nassert check_dict_case({'Apple': 1, 'banana': 2}) == False\nassert check_dict_case({'apple': 1, 'Banana': 2}) == False\nassert check_dict_case({}) == False",
  "Python/96": "assert count_up_to(5) == [2, 3]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(15) == [2, 3, 5, 7, 11, 13]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(25) == [2, 3, 5, 7, 11, 13, 17, 19, 23]",
  "Python/97": "assert multiply(10, 4) == 0\nassert multiply(-9, -2) == 8",
  "Python/98": "",
  "Python/99": "assert closest_integer(\"3.5\") == 4\nassert closest_integer(\"-2.6\") == -3\nassert closest_integer(\"10.0\") == 10\nassert closest_integer(\"7.8\") == 8\nassert closest_integer(\"0.001\") == 0",
  "Python/100": "assert make_a_pile(0) == []\nassert make_a_pile(1) == [1]\nassert make_a_pile(2) == [2, 4]\nassert make_a_pile(5) == [5, 7, 9, 11, 13]\nassert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28]",
  "Python/101": "assert words_string(\"\") == []\nassert words_string(\"Hello, world\") == ['Hello', 'world']\nassert words_string(\"Python,is,awesome\") == ['Python', 'is', 'awesome']\nassert words_string(\"One,two,three,four\") == ['One', 'two', 'three', 'four']\nassert words_string(\"Testing, the, function, now\") == ['Testing', 'the', 'function', 'now']",
  "Python/102": "assert choose_num(3, 5) == 4\nassert choose_num(2, 6) == 6\nassert choose_num(5, 3) == -1\nassert choose_num(7, 9) == 8",
  "Python/103": "assert rounded_avg(0, 10) == '0b101'\nassert rounded_avg(2, 2) == '0b10'",
  "Python/104": "assert unique_digits([135, 246, 579]) == [135, 579]\nassert unique_digits([98765, 4321, 13579]) == [13579]",
  "Python/105": "assert by_length([3, 5, 8, 2]) == ['Eight', 'Five', 'Three', 'Two']\nassert by_length([9, 4, 2, 3, 6]) == ['Nine', 'Six', 'Four', 'Three', 'Two']\nassert by_length([7, 5, 2]) == ['Seven', 'Five', 'Two']",
  "Python/106": "assert f(1) == [1]",
  "Python/107": "",
  "Python/108": "assert count_nums([123, -45, 678, -90]) == 3\nassert count_nums([0, 0, 0, 0]) == 0\nassert count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert count_nums([-1, -2, -3, -4, -5]) == 0\nassert count_nums([10, 20, 30, 40, 50]) == 5",
  "Python/109": "assert move_one_ball([]) == True\nassert move_one_ball([1, 2, 3, 4, 5]) == True\nassert move_one_ball([5, 1, 2, 3, 4]) == True",
  "Python/110": "assert exchange([1, 3, 5], [2, 4, 6]) == \"YES\"\nassert exchange([2, 4, 6], [1, 3, 5]) == \"YES\"\nassert exchange([11, 13, 15], [22, 24, 26]) == \"YES\"",
  "Python/111": "assert histogram(\"apple banana apple grape banana\") == {'apple': 2, 'banana': 2}\nassert histogram(\"red blue green blue\") == {'blue': 2}\nassert histogram(\"hello world\") == {'hello': 1, 'world': 1}\nassert histogram(\"python python python is is awesome\") == {'python': 3}\nassert histogram(\"\") == {}",
  "Python/112": "assert reverse_delete(\"racecar\", \"r\") == ('aceca', True)\nassert reverse_delete(\"abcdef\", \"x\") == ('abcdef', False)",
  "Python/113": "",
  "Python/114": "assert minSubArraySum([-1, -2, -3, -4, -5]) == -15\nassert minSubArraySum([5, 5, 5, -15, 5]) == -15\nassert minSubArraySum([-2, -3, -5, -5, -3]) == -18\nassert minSubArraySum([10, -3, 2, 5, -19]) == -19",
  "Python/115": "",
  "Python/116": "assert sort_array([9, 8, 7, 6, 5]) == [8, 5, 6, 9, 7]",
  "Python/117": "",
  "Python/118": "assert get_closest_vowel(\"\") == \"\"\nassert get_closest_vowel(\"hello\") == \"e\"\nassert get_closest_vowel(\"programming\") == \"i\"",
  "Python/119": "assert match_parens(['(', ')']) == 'Yes'\nassert match_parens(['(', '(', ')', ')', '(']) == 'No'",
  "Python/120": "assert maximum([3, 1, 4, 1, 5, 9, 2, 6, 5], 4) == [5, 5, 6, 9]\nassert maximum([7, 2, 5, 8, 4, 3], 2) == [7, 8]\nassert maximum([1, 2, 3, 4, 5], 1) == [5]\nassert maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == [7, 8, 9]",
  "Python/121": "assert solution([1, 2, 3, 4, 5, 6]) == 9\nassert solution([1, 1, 1, 1, 1, 1]) == 3\nassert solution([2, 4, 6, 8, 10, 12]) == 0\nassert solution([0, 0, 0, 0, 0, 0]) == 0",
  "Python/122": "assert add_elements([1, 23, 456, 78], 3) == 24\nassert add_elements([9, 87, 654, 32], 1) == 9\nassert add_elements([567, 89, 123, 45], 3) == 89",
  "Python/123": "",
  "Python/124": "assert valid_date(\"01-15-2022\") == True\nassert valid_date(\"02-29-2020\") == True\nassert valid_date(\"11-31-2021\") == False\nassert valid_date(\"02-30-2022\") == False",
  "Python/125": "assert split_words(\"Hello World\") == ['Hello', 'World']\nassert split_words(\"apple,orange,banana\") == ['apple', 'orange', 'banana']\nassert split_words(\"PythonIsGreat\") == 5\nassert split_words(\"test\") == 2\nassert split_words(\"12345\") == 0",
  "Python/126": "assert is_sorted([1, 2, 3, 4]) == True\nassert is_sorted([5, 3, 2, 1]) == False\nassert is_sorted([10, 15, 20, 25, 30]) == True\nassert is_sorted([5, 5, 5, 4, 3, 2]) == False",
  "Python/127": "assert intersection([1, 5], [3, 7]) == \"YES\"\nassert intersection([10, 15], [17, 23]) == \"NO\"\nassert intersection([2, 8], [5, 10]) == \"YES\"\nassert intersection([0, 20], [21, 30]) == \"NO\"\nassert intersection([3, 11], [11, 20]) == \"NO\"",
  "Python/128": "assert prod_signs([1, 2, 3, 4]) == 10\nassert prod_signs([-1, 2, 3, 4]) == -10\nassert prod_signs([0, 2, 3, 4]) == 0\nassert prod_signs([0, 0, 0, 0]) == 0",
  "Python/129": "",
  "Python/130": "assert tri(0) == [1]\nassert tri(1) == [1, 3]",
  "Python/131": "assert digits(24680) == 0\nassert digits(1111) == 1\nassert digits(777) == 343\nassert digits(531) == 15",
  "Python/132": "assert is_nested(\"[]\") == False\nassert is_nested(\"[[]]\") == True\nassert is_nested(\"[ [[]] ]\") == True\nassert is_nested(\"[[[]]]\") == True",
  "Python/133": "assert sum_squares([1, 2, 3]) == 14\nassert sum_squares([-1, -2, -3]) == 14\nassert sum_squares([0, 0, 0, 0]) == 0\nassert sum_squares([4, 5, 6]) == 77",
  "Python/134": "assert check_if_last_char_is_a_letter(\"Hello World!\") == False\nassert check_if_last_char_is_a_letter(\"Hello123\") == False\nassert check_if_last_char_is_a_letter(\"Testing 1 2 3\") == False\nassert check_if_last_char_is_a_letter(\"Ends with z\") == True",
  "Python/135": "assert can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([5, 4, 3, 2, 1]) == 4\nassert can_arrange([3, 2, 4, 1]) == 3\nassert can_arrange([1, 2, 3, 5, 4]) == 4",
  "Python/136": "assert largest_smallest_integers([-10, 5, 7, 9, 2]) == (-10, 2)\nassert largest_smallest_integers([0, 0, 0, 0, 0]) == (None, None)\nassert largest_smallest_integers([-3, 0, 2, 4, 1]) == (-3, 1)",
  "Python/137": "assert compare_one(10.5, \"10.5\") == None\nassert compare_one(\"15.6\", 15.6) == None\nassert compare_one(20, 10) == 20\nassert compare_one(\"3.5\", 2.5) == \"3.5\"",
  "Python/138": "assert is_equal_to_sum_even(8) == True\nassert is_equal_to_sum_even(10) == True\nassert is_equal_to_sum_even(7) == False\nassert is_equal_to_sum_even(12) == True\nassert is_equal_to_sum_even(5) == False",
  "Python/139": "assert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 12\nassert special_factorial(4) == 288\nassert special_factorial(5) == 34560",
  "Python/140": "assert fix_spaces(\"no_spaces_here\") == \"no_spaces_here\"",
  "Python/141": "assert file_name_check(\"document.txt\") == \"Yes\"\nassert file_name_check(\"program.exe\") == \"Yes\"\nassert file_name_check(\"file.dll\") == \"Yes\"\nassert file_name_check(\"file.\") == \"No\"\nassert file_name_check(\"123.exe\") == \"No\"",
  "Python/142": "",
  "Python/143": "",
  "Python/144": "assert simplify(\"1/2\", \"3/5\") == False",
  "Python/145": "assert order_by_points([11, 22, 33, 44]) == [11, 22, 33, 44]",
  "Python/146": "assert specialFilter([12, 25, 37, 41, 59, 101]) == 3",
  "Python/147": "",
  "Python/148": "assert bf(\"Earth\", \"Neptune\") == (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nassert bf(\"Venus\", \"Uranus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")",
  "Python/149": "",
  "Python/150": "assert x_or_y(1, 10, 20) == 20\nassert x_or_y(2, 10, 20) == 10\nassert x_or_y(3, 10, 20) == 10\nassert x_or_y(4, 10, 20) == 20\nassert x_or_y(7, 10, 20) == 10",
  "Python/151": "assert double_the_difference([3, 5, 7]) == 83\nassert double_the_difference([-2, 4, 6, 8]) == 0\nassert double_the_difference([1, 2, 3, 4, 5]) == 35\nassert double_the_difference([0, -1, -3, -5]) == 0",
  "Python/152": "assert compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert compare([4, 5, 6], [2, 3, 1]) == [2, 2, 5]\nassert compare([10, 20, 30], [5, 17, 25]) == [5, 3, 5]\nassert compare([0, 0, 0], [1, 2, 3]) == [1, 2, 3]\nassert compare([0], [0]) == [0]",
  "Python/153": "assert Strongest_Extension(\"File\", [\"pdf\", \"txt\", \"IMG\"]) == \"File.IMG\"\nassert Strongest_Extension(\"Image\", [\"svg\", \"png\", \"JPEG\"]) == \"Image.JPEG\"\nassert Strongest_Extension(\"Code\", [\"py\", \"java\", \"CPP\"]) == \"Code.CPP\"",
  "Python/154": "assert cycpattern_check(\"hello\", \"world\") == False\nassert cycpattern_check(\"hellohello\", \"hello\") == True",
  "Python/155": "assert even_odd_count(123456) == (3, 3)\nassert even_odd_count(13579) == (0, 5)\nassert even_odd_count(2468) == (4, 0)\nassert even_odd_count(0) == (1, 0)",
  "Python/156": "assert int_to_mini_roman(3) == 'iii'\nassert int_to_mini_roman(15) == 'xv'\nassert int_to_mini_roman(89) == 'lxxxix'",
  "Python/157": "assert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(5, 12, 13) == True\nassert right_angle_triangle(8, 15, 17) == True\nassert right_angle_triangle(7, 24, 25) == True\nassert right_angle_triangle(9, 40, 41) == True",
  "Python/158": "assert find_max([\"apple\", \"banana\", \"cherry\"]) == \"cherry\"\nassert find_max([\"cat\", \"dog\", \"elephant\"]) == \"elephant\"\nassert find_max([\"python\", \"java\", \"javascript\"]) == \"javascript\"",
  "Python/159": "assert eat(5, 3, 4) == [8, 1]\nassert eat(10, 5, 7) == [15, 2]\nassert eat(0, 10, 10) == [10, 0]\nassert eat(100, 50, 75) == [150, 25]",
  "Python/160": "assert do_algebra(['+', '-'], [5, 3, 2]) == 6",
  "Python/161": "assert solve(\"Hello World\") == \"hELLO wORLD\"\nassert solve(\"12345\") == \"54321\"\nassert solve(\"abc123#$%\") == \"ABC123#$%\"\nassert solve(\"lowercase\") == \"LOWERCASE\"",
  "Python/162": "assert string_to_md5('12345') == '827ccb0eea8a706c4c34a16891f84e7b'\nassert string_to_md5('') == None",
  "Python/163": "assert generate_integers(3, 5) == [4]\nassert generate_integers(5, 3) == [4]\nassert generate_integers(2, 8) == [2, 4, 6, 8]\nassert generate_integers(8, 2) == [2, 4, 6, 8]\nassert generate_integers(1, 10) == [2, 4, 6, 8]"
}