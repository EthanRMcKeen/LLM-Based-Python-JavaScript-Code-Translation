{
  "JavaScript/0": "console.assert(hasCloseElements([10, 20, 30, 40], 5) === false, 'Test Case 2 Failed');\nconsole.assert(hasCloseElements([5, 10, 15, 20], 6) === true, 'Test Case 3 Failed');\nconsole.assert(hasCloseElements([-5, -10, -15, -20], 4) === false, 'Test Case 4 Failed');\nconsole.assert(hasCloseElements([100, 200, 300, 400], 50) === false, 'Test Case 5 Failed');",
  "JavaScript/1": "console.assert(JSON.stringify(separateParenGroups(\"()\")) === '[\"()\"]');\nconsole.assert(JSON.stringify(separateParenGroups(\"(())\")) === '[\"(())\"]');\nconsole.assert(JSON.stringify(separateParenGroups(\"((()))\")) === '[\"((()))\"]');\nconsole.assert(JSON.stringify(separateParenGroups(\"()()\")) === '[\"()\",\"()\"]');",
  "JavaScript/2": "console.assert(truncateNumber(10.5) === 0.5, 'Test Case 1 Failed');\nconsole.assert(truncateNumber(0) === 0, 'Test Case 4 Failed');",
  "JavaScript/3": "console.assert(belowZero([5, -6, 7, 8, 9]) === true, 'Test case 2 failed');\nconsole.assert(belowZero([1, 2, 3, 4, 5]) === false, 'Test case 5 failed');",
  "JavaScript/4": "console.assert(meanAbsoluteDeviation([1, 2, 3, 4, 5]) === 1.2, \"Test Case 1 Failed\");\nconsole.assert(meanAbsoluteDeviation([7, 7, 7, 7, 7]) === 0, \"Test Case 3 Failed\");\nconsole.assert(meanAbsoluteDeviation([0, -1, 1, -2, 2]) === 1.2, \"Test Case 5 Failed\");",
  "JavaScript/5": "console.assert(JSON.stringify(intersperse([1, 2, 3], \"-\")) === JSON.stringify([1, \"-\", 2, \"-\", 3]));\nconsole.assert(JSON.stringify(intersperse([4, 5], \",\")) === JSON.stringify([4, \",\", 5]));\nconsole.assert(JSON.stringify(intersperse([], \".\")) === JSON.stringify([]));\nconsole.assert(JSON.stringify(intersperse([6, 7, 8, 9], \" \")) === JSON.stringify([6, \" \", 7, \" \", 8, \" \", 9]));\nconsole.assert(JSON.stringify(intersperse([10], \"*\")) === JSON.stringify([10]));",
  "JavaScript/6": "",
  "JavaScript/7": "console.assert(JSON.stringify(filterBySubstring(['apple', 'banana', 'cherry'], 'a')) === JSON.stringify(['apple', 'banana']), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(filterBySubstring(['cat', 'dog', 'elephant'], 'z')) === JSON.stringify([]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(filterBySubstring(['sun', 'moon', 'star'], 'u')) === JSON.stringify(['sun']), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(filterBySubstring(['javascript', 'is', 'fun'], 'is')) === JSON.stringify(['is']), 'Test Case 5 Failed');",
  "JavaScript/8": "console.assert(JSON.stringify(sumProduct([1, 2, 3], 2)) === JSON.stringify([6, 6]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sumProduct([4, 5, 6], 3)) === JSON.stringify([15, 120]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(sumProduct([10, 20, 30], 1)) === JSON.stringify([60, 6000]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(sumProduct([2, 4, 6, 8], 4)) === JSON.stringify([20, 384]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(sumProduct([3, 6, 9], 2)) === JSON.stringify([18, 162]), \"Test Case 5 Failed\");",
  "JavaScript/9": "console.assert(JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(rollingMax([5, 3, 7, 2, 8])) === JSON.stringify([5, 5, 7, 7, 8]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(rollingMax([10, 20, 15])) === JSON.stringify([10, 20, 20]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(rollingMax([100, 90, 80, 70])) === JSON.stringify([100, 100, 100, 100]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(rollingMax([1, 1, 1])) === JSON.stringify([1, 1, 1]), 'Test Case 5 Failed');",
  "JavaScript/10": "console.assert(makePalindrome('race') === 'racecar', 'Test Case 1 Failed');\nconsole.assert(makePalindrome('madam') === 'madam', 'Test Case 2 Failed');\nconsole.assert(makePalindrome('level') === 'level', 'Test Case 4 Failed');\nconsole.assert(makePalindrome('noon') === 'noon', 'Test Case 5 Failed');",
  "JavaScript/11": "console.assert(stringXor('1010', '1100') === '0110', 'Test Case 1 Failed');\nconsole.assert(stringXor('1111', '0000') === '1111', 'Test Case 2 Failed');\nconsole.assert(stringXor('0101', '1010') === '1111', 'Test Case 3 Failed');\nconsole.assert(stringXor('1100', '0011') === '1111', 'Test Case 4 Failed');\nconsole.assert(stringXor('1001', '0110') === '1111', 'Test Case 5 Failed');",
  "JavaScript/12": "console.assert(longest([\"apple\", \"banana\", \"kiwi\", \"pear\"]) === \"banana\", \"Test Case 1 Failed\");\nconsole.assert(longest([\"cat\", \"dog\", \"elephant\"]) === \"elephant\", \"Test Case 2 Failed\");\nconsole.assert(longest([\"red\", \"green\", \"blue\"]) === \"green\", \"Test Case 3 Failed\");\nconsole.assert(longest([\"sun\", \"moon\", \"stars\"]) === \"stars\", \"Test Case 5 Failed\");",
  "JavaScript/13": "console.assert(greatestCommonDivisor(8, 12) === 4, 'Test Case 1 Failed');\nconsole.assert(greatestCommonDivisor(21, 14) === 7, 'Test Case 2 Failed');\nconsole.assert(greatestCommonDivisor(48, 18) === 6, 'Test Case 3 Failed');\nconsole.assert(greatestCommonDivisor(35, 105) === 35, 'Test Case 4 Failed');\nconsole.assert(greatestCommonDivisor(81, 27) === 27, 'Test Case 5 Failed');",
  "JavaScript/14": "console.assert(JSON.stringify(allPrefixes(\"hello\")) === JSON.stringify([\"h\", \"he\", \"hel\", \"hell\", \"hello\"]));\nconsole.assert(JSON.stringify(allPrefixes(\"test\")) === JSON.stringify([\"t\", \"te\", \"tes\", \"test\"]));\nconsole.assert(JSON.stringify(allPrefixes(\"\")) === JSON.stringify([]));\nconsole.assert(JSON.stringify(allPrefixes(\"12345\")) === JSON.stringify([\"1\", \"12\", \"123\", \"1234\", \"12345\"]));\nconsole.assert(JSON.stringify(allPrefixes(\"a\")) === JSON.stringify([\"a\"]));",
  "JavaScript/15": "console.assert(stringSequence(0) === '0', 'Test Case 1 Failed');\nconsole.assert(stringSequence(1) === '0 1', 'Test Case 2 Failed');\nconsole.assert(stringSequence(3) === '0 1 2 3', 'Test Case 3 Failed');\nconsole.assert(stringSequence(5) === '0 1 2 3 4 5', 'Test Case 4 Failed');\nconsole.assert(stringSequence(8) === '0 1 2 3 4 5 6 7 8', 'Test Case 5 Failed');",
  "JavaScript/16": "console.assert(countDistinctCharacters(\"Hello World\") === 8, \"Test case 1 failed\");\nconsole.assert(countDistinctCharacters(\"aaaaa\") === 1, \"Test case 2 failed\");\nconsole.assert(countDistinctCharacters(\"12345\") === 5, \"Test case 3 failed\");\nconsole.assert(countDistinctCharacters(\"\") === 0, \"Test case 5 failed\");",
  "JavaScript/17": "console.assert(JSON.stringify(parseMusic('o o .| o|')) === JSON.stringify([4, 4, 1, 2]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o| o .| .| o')) === JSON.stringify([2, 4, 1, 1, 4]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o o o| o .|')) === JSON.stringify([4, 4, 2, 4, 1]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(parseMusic('o| o| o| .| o')) === JSON.stringify([2, 2, 2, 1, 4]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(parseMusic('.| o .| .| o|')) === JSON.stringify([1, 4, 1, 1, 2]), \"Test Case 5 Failed\");",
  "JavaScript/18": "console.assert(howManyTimes('hello', 'l') === 2, 'Test Case 1 Failed');\nconsole.assert(howManyTimes('ababcabc', 'abc') === 2, 'Test Case 2 Failed');\nconsole.assert(howManyTimes('aaaaaa', 'aa') === 5, 'Test Case 3 Failed');\nconsole.assert(howManyTimes('12312312345', '12') === 3, 'Test Case 4 Failed');\nconsole.assert(howManyTimes('javascript is fun', 'fun') === 1, 'Test Case 5 Failed');",
  "JavaScript/19": "console.assert(sortNumbers('three seven two') === 'two three seven', 'Test Case 1 Failed');\nconsole.assert(sortNumbers('one four five') === 'one four five', 'Test Case 2 Failed');\nconsole.assert(sortNumbers('eight zero nine six') === 'zero six eight nine', 'Test Case 3 Failed');\nconsole.assert(sortNumbers('nine five one') === 'one five nine', 'Test Case 4 Failed');\nconsole.assert(sortNumbers('seven six four three two one') === 'one two three four six seven', 'Test Case 5 Failed');",
  "JavaScript/20": "console.assert(JSON.stringify(findClosestElements([1, 2, 3, 4, 5])) === JSON.stringify([1, 2]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(findClosestElements([10, 20, 30, 40, 50])) === JSON.stringify([10, 20]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(findClosestElements([100, 200, 300, 400, 500])) === JSON.stringify([100, 200]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(findClosestElements([7, 14, 21, 28, 35])) === JSON.stringify([7, 14]), \"Test Case 5 Failed\");",
  "JavaScript/21": "",
  "JavaScript/22": "console.assert(filterIntegers([1, 2, 3]).toString() === \"1,2,3\", \"Test Case 1 Failed\");\nconsole.assert(filterIntegers([1.5, 2, 3.2]).toString() === \"2\", \"Test Case 2 Failed\");\nconsole.assert(filterIntegers([-1, 0, \"three\"]).toString() === \"-1,0\", \"Test Case 3 Failed\");\nconsole.assert(filterIntegers([]).toString() === \"\", \"Test Case 4 Failed\");\nconsole.assert(filterIntegers([4, 5, \"6\"]).toString() === \"4,5\", \"Test Case 5 Failed\");",
  "JavaScript/23": "console.assert(strlen(\"Hello\") === 5, \"Test case 1 failed\");\nconsole.assert(strlen(\"\") === 0, \"Test case 2 failed\");\nconsole.assert(strlen(\"12345\") === 5, \"Test case 3 failed\");\nconsole.assert(strlen(\"Test case\") === 9, \"Test case 4 failed\");",
  "JavaScript/24": "console.assert(largestDivisor(10) === 5, 'Test Case 1 Failed');\nconsole.assert(largestDivisor(15) === 5, 'Test Case 2 Failed');\nconsole.assert(largestDivisor(24) === 12, 'Test Case 3 Failed');\nconsole.assert(largestDivisor(36) === 18, 'Test Case 4 Failed');\nconsole.assert(largestDivisor(100) === 50, 'Test Case 5 Failed');",
  "JavaScript/25": "console.assert(JSON.stringify(factorize(10)) === JSON.stringify([2, 5]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(factorize(30)) === JSON.stringify([2, 3, 5]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(factorize(72)) === JSON.stringify([2, 2, 2, 3, 3]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(factorize(97)) === JSON.stringify([97]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(factorize(120)) === JSON.stringify([2, 2, 2, 3, 5]), \"Test Case 5 Failed\");",
  "JavaScript/26": "console.assert(JSON.stringify(removeDuplicates([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(removeDuplicates([1, 1, 2, 2, 3, 3])) === JSON.stringify([]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(removeDuplicates([4, 4, 5, 5, 6, 6, 7])) === JSON.stringify([7]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(removeDuplicates([1, 2, 3, 1, 2, 3])) === JSON.stringify([]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(removeDuplicates([5, 5, 5, 5, 5])) === JSON.stringify([]), 'Test Case 5 Failed');",
  "JavaScript/27": "console.assert(flipCase(\"Hello\") === \"hELLO\", \"Test Case 1 Failed\");\nconsole.assert(flipCase(\"Goodbye\") === \"gOODBYE\", \"Test Case 2 Failed\");\nconsole.assert(flipCase(\"JavaScript\") === \"jAVAsCRIPT\", \"Test Case 3 Failed\");\nconsole.assert(flipCase(\"12345\") === \"12345\", \"Test Case 4 Failed\");\nconsole.assert(flipCase(\"AbCdEf\") === \"aBcDeF\", \"Test Case 5 Failed\");",
  "JavaScript/28": "console.assert(concatenate(['hello', 'world']) === 'helloworld', 'Test Case 1 Failed');\nconsole.assert(concatenate(['apple', 'banana', 'cherry']) === 'applebananacherry', 'Test Case 2 Failed');\nconsole.assert(concatenate(['cat', 'dog', 'mouse', 'rabbit']) === 'catdogmouserabbit', 'Test Case 3 Failed');\nconsole.assert(concatenate(['JavaScript', 'is', 'fun']) === 'JavaScriptisfun', 'Test Case 4 Failed');\nconsole.assert(concatenate(['one', 'two', 'three']) === 'onetwothree', 'Test Case 5 Failed');",
  "JavaScript/29": "console.assert(JSON.stringify(filterByPrefix([\"apple\", \"banana\", \"kiwi\", \"pear\"], \"a\")) === '[\"apple\"]');\nconsole.assert(JSON.stringify(filterByPrefix([\"apple\", \"banana\", \"kiwi\", \"pear\"], \"b\")) === '[\"banana\"]');\nconsole.assert(JSON.stringify(filterByPrefix([\"apple\", \"banana\", \"kiwi\", \"pear\"], \"k\")) === '[\"kiwi\"]');\nconsole.assert(JSON.stringify(filterByPrefix([], \"a\")) === '[]');\nconsole.assert(JSON.stringify(filterByPrefix([\"apple\", \"banana\", \"kiwi\", \"pear\"], \"c\")) === '[]');",
  "JavaScript/30": "console.assert(JSON.stringify(getPositive([1, 2, -3, 4, -5])) === JSON.stringify([1, 2, 4]), \"Test case 1 failed\");\nconsole.assert(JSON.stringify(getPositive([-1, -2, -3])) === JSON.stringify([]), \"Test case 2 failed\");\nconsole.assert(JSON.stringify(getPositive([0, 0, 0])) === JSON.stringify([]), \"Test case 3 failed\");\nconsole.assert(JSON.stringify(getPositive([-1, -2, 3, 4, 5])) === JSON.stringify([3, 4, 5]), \"Test case 4 failed\");\nconsole.assert(JSON.stringify(getPositive([1])) === JSON.stringify([1]), \"Test case 5 failed\");",
  "JavaScript/31": "console.assert(isPrime(2) === true, 'Test case 1 failed');\nconsole.assert(isPrime(7) === true, 'Test case 2 failed');\nconsole.assert(isPrime(10) === false, 'Test case 3 failed');\nconsole.assert(isPrime(31) === true, 'Test case 4 failed');\nconsole.assert(isPrime(100) === false, 'Test case 5 failed');",
  "JavaScript/32": "console.assert(Math.abs(findZero([1, 2, 1]) + 1) < 1e-10, 'Test Case 3 Failed');",
  "JavaScript/33": "console.assert(JSON.stringify(sortThird([10,20,30,40,50,60,70])) === JSON.stringify([10,20,30,40,50,60,70]), \"Test Case 4 failed\");",
  "JavaScript/34": "console.assert(JSON.stringify(unique([1, 2, 3, 3, 4, 2])) === JSON.stringify([1, 2, 3, 4]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(unique([])) === JSON.stringify([]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(unique([7, 7, 7, 7])) === JSON.stringify([7]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(unique([-5, -2, 0, 1, 1, 3])) === JSON.stringify([-5, -2, 0, 1, 3]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(unique([10, -3, 5, 5, 20, 10])) === JSON.stringify([-3, 5, 10, 20]), \"Test Case 5 Failed\");",
  "JavaScript/35": "console.assert(maxElement([1, 2, 3]) === 3, \"Test case 1 failed\");\nconsole.assert(maxElement([10, 5, 8, 2]) === 10, \"Test case 2 failed\");\nconsole.assert(maxElement([-1, -5, -3]) === -1, \"Test case 3 failed\");\nconsole.assert(maxElement([0, 0, 0, 0]) === 0, \"Test case 4 failed\");\nconsole.assert(maxElement([100]) === 100, \"Test case 5 failed\");",
  "JavaScript/36": "",
  "JavaScript/37": "console.assert(JSON.stringify(sortEven([2, 4, 6, 8])) === JSON.stringify([2, 4, 6, 8]), \"Test Case 2 Failed\");",
  "JavaScript/38": "console.assert(encodeCyclic(\"abc\") === \"bca\", \"Test Case 1 Failed\");\nconsole.assert(encodeCyclic(\"\") === \"\", \"Test Case 3 Failed\");",
  "JavaScript/39": "console.assert(primeFib(1) === 2, \"Test Case 1 Failed\");\nconsole.assert(primeFib(3) === 5, \"Test Case 2 Failed\");",
  "JavaScript/40": "console.assert(triplesSumToZero([1, 2, 3, 4, 5]) === false, 'Test case 1 failed');\nconsole.assert(triplesSumToZero([0, 0, 0]) === true, 'Test case 2 failed');\nconsole.assert(triplesSumToZero([-2, 3, 1, 5, -1]) === true, 'Test case 3 failed');\nconsole.assert(triplesSumToZero([-3, -2, 1, 4, 6]) === false, 'Test case 4 failed');\nconsole.assert(triplesSumToZero([-5, 2, -7, 4, 3]) === true, 'Test case 5 failed');",
  "JavaScript/41": "console.assert(carRaceCollision(0) === 0, 'Test Case 1 Failed');\nconsole.assert(carRaceCollision(2) === 4, 'Test Case 2 Failed');\nconsole.assert(carRaceCollision(5) === 25, 'Test Case 3 Failed');\nconsole.assert(carRaceCollision(-3) === 9, 'Test Case 4 Failed');\nconsole.assert(carRaceCollision(10) === 100, 'Test Case 5 Failed');",
  "JavaScript/42": "console.assert(JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(incrList([0, 5, 10, 15])) === JSON.stringify([1, 6, 11, 16]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(incrList([-1, -2, -3])) === JSON.stringify([0, -1, -2]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(incrList([])) === JSON.stringify([]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(incrList([100])) === JSON.stringify([101]), \"Test Case 5 Failed\");",
  "JavaScript/43": "console.assert(pairsSumToZero([1, -1, 2, 3]) === true, \"Test Case 1 Failed\");\nconsole.assert(pairsSumToZero([0]) === false, \"Test Case 2 Failed\");\nconsole.assert(pairsSumToZero([5, 6, 7, -5, -6]) === true, \"Test Case 3 Failed\");\nconsole.assert(pairsSumToZero([3, 2, 1]) === false, \"Test Case 4 Failed\");\nconsole.assert(pairsSumToZero([-2, 0, 2]) === true, \"Test Case 5 Failed\");",
  "JavaScript/44": "console.assert(changeBase(10, 2) === \"1010\", \"Test Case 1 Failed\");\nconsole.assert(changeBase(16, 8) === \"20\", \"Test Case 2 Failed\");\nconsole.assert(changeBase(100, 10) === \"100\", \"Test Case 4 Failed\");\nconsole.assert(changeBase(20, 3) === \"202\", \"Test Case 5 Failed\");",
  "JavaScript/45": "console.assert(triangleArea(4, 6) === 12, \"Test Case 1 Failed\");\nconsole.assert(triangleArea(3, 5) === 7.5, \"Test Case 2 Failed\");\nconsole.assert(triangleArea(10, 8) === 40, \"Test Case 3 Failed\");\nconsole.assert(triangleArea(7, 9) === 31.5, \"Test Case 4 Failed\");\nconsole.assert(triangleArea(2, 4) === 4, \"Test Case 5 Failed\");",
  "JavaScript/46": "console.assert(fib4(0) === 0, 'Test Case 1 Failed');",
  "JavaScript/47": "console.assert(median([1, 2, 3]) === 2, 'Test Case 1 Failed');\nconsole.assert(median([4, 7, 3, 9, 5]) === 5, 'Test Case 2 Failed');\nconsole.assert(median([10, 20, 30, 40]) === 25, 'Test Case 3 Failed');\nconsole.assert(median([100, 200, 300, 400, 500, 600, 700]) === 400, 'Test Case 5 Failed');",
  "JavaScript/48": "console.assert(isPalindrome(\"level\") === true, 'Test Case 1 Failed');\nconsole.assert(isPalindrome(\"hello\") === false, 'Test Case 2 Failed');\nconsole.assert(isPalindrome(\"racecar\") === true, 'Test Case 3 Failed');\nconsole.assert(isPalindrome(\"madam\") === true, 'Test Case 4 Failed');\nconsole.assert(isPalindrome(\"apple\") === false, 'Test Case 5 Failed');",
  "JavaScript/49": "console.assert(modp(3, 11) === 8, 'Test Case 2 Failed');\nconsole.assert(modp(0, 5) === 1, 'Test Case 3 Failed');\nconsole.assert(modp(8, 3) === 1, 'Test Case 4 Failed');\nconsole.assert(modp(6, 2) === 0, 'Test Case 5 Failed');",
  "JavaScript/50": "console.assert(encodeShift(\"hello\") === \"mjqqt\");\nconsole.assert(encodeShift(\"apple\") === \"fuuqj\");\nconsole.assert(decodeShift(\"mjqqt\") === \"hello\");\nconsole.assert(decodeShift(\"fuuqj\") === \"apple\");\nconsole.assert(encodeShift(\"xyz\") === \"cde\");",
  "JavaScript/51": "console.assert(removeVowels(\"Hello\") === \"Hll\");\nconsole.assert(removeVowels(\"JavaScript\") === \"JvScrpt\");\nconsole.assert(removeVowels(\"banana\") === \"bnn\");\nconsole.assert(removeVowels(\"elephant\") === \"lphnt\");\nconsole.assert(removeVowels(\"apple\") === \"ppl\");",
  "JavaScript/52": "console.assert(belowThreshold([1, 2, 3, 4, 5], 6) === true, 'Test Case 1 Failed');\nconsole.assert(belowThreshold([10, 20, 30, 40, 50], 5) === false, 'Test Case 2 Failed');\nconsole.assert(belowThreshold([7, 8, 9, 10, 11], 6) === false, 'Test Case 3 Failed');\nconsole.assert(belowThreshold([-1, -2, -3, -4, -5], 0) === true, 'Test Case 4 Failed');\nconsole.assert(belowThreshold([], 10) === true, 'Test Case 5 Failed');",
  "JavaScript/53": "console.assert(add(2, 3) === 5, \"Test Case 1 Failed\");\nconsole.assert(add(-5, 5) === 0, \"Test Case 2 Failed\");\nconsole.assert(add(10, 10) === 20, \"Test Case 3 Failed\");\nconsole.assert(add(0, 0) === 0, \"Test Case 4 Failed\");\nconsole.assert(add(100, -50) === 50, \"Test Case 5 Failed\");",
  "JavaScript/54": "console.assert(sameChars(\"abc\", \"cba\"), \"Test Case 1 Failed\");\nconsole.assert(sameChars(\"hello\", \"llohe\"), \"Test Case 2 Failed\");\nconsole.assert(sameChars(\"12345\", \"54321\"), \"Test Case 3 Failed\");\nconsole.assert(sameChars(\"good\", \"dog\"), \"Test Case 4 Failed\");",
  "JavaScript/55": "console.assert(fib(0) === 0, \"Test Case 1 Failed\");\nconsole.assert(fib(1) === 1, \"Test Case 2 Failed\");\nconsole.assert(fib(2) === 1, \"Test Case 3 Failed\");\nconsole.assert(fib(5) === 5, \"Test Case 4 Failed\");\nconsole.assert(fib(10) === 55, \"Test Case 5 Failed\");",
  "JavaScript/56": "console.assert(correctBracketing(\"<>\"), \"Test Case 1 Failed\");\nconsole.assert(correctBracketing(\"<><>\"), \"Test Case 2 Failed\");\nconsole.assert(correctBracketing(\"<<>>\"), \"Test Case 3 Failed\");\nconsole.assert(correctBracketing(\"<<>><<>>\"), \"Test Case 5 Failed\");",
  "JavaScript/57": "console.assert(monotonic([1, 2, 3, 4, 5]) === true, 'Test Case 1 Failed');\nconsole.assert(monotonic([5, 4, 3, 2, 1]) === true, 'Test Case 2 Failed');\nconsole.assert(monotonic([1, 1, 1, 1, 1]) === true, 'Test Case 3 Failed');\nconsole.assert(monotonic([3, 5, 1, 9, 2]) === false, 'Test Case 4 Failed');\nconsole.assert(monotonic([1, 3, 2, 4, 5]) === false, 'Test Case 5 Failed');",
  "JavaScript/58": "console.assert(JSON.stringify(common([1, 2, 3], [2, 3, 4])) === JSON.stringify([2, 3]));\nconsole.assert(JSON.stringify(common(['a', 'b', 'c'], ['b', 'c', 'd'])) === JSON.stringify(['b', 'c']));\nconsole.assert(JSON.stringify(common([10, 20, 30], [20, 30, 40])) === JSON.stringify([20, 30]));\nconsole.assert(JSON.stringify(common(['x', 'y', 'z'], ['z', 'y', 'w'])) === JSON.stringify(['y', 'z']));\nconsole.assert(JSON.stringify(common([100, 200, 300], [200, 300, 400])) === JSON.stringify([200, 300]));",
  "JavaScript/59": "console.assert(largestPrimeFactor(10) === 5, \"Test Case 1 Failed\");\nconsole.assert(largestPrimeFactor(15) === 5, \"Test Case 2 Failed\");\nconsole.assert(largestPrimeFactor(21) === 7, \"Test Case 3 Failed\");\nconsole.assert(largestPrimeFactor(48) === 3, \"Test Case 4 Failed\");\nconsole.assert(largestPrimeFactor(97) === 97, \"Test Case 5 Failed\");",
  "JavaScript/60": "console.assert(sumToN(1) === 1, 'Test Case 1 Failed');\nconsole.assert(sumToN(3) === 6, 'Test Case 2 Failed');\nconsole.assert(sumToN(5) === 15, 'Test Case 3 Failed');\nconsole.assert(sumToN(10) === 55, 'Test Case 4 Failed');\nconsole.assert(sumToN(100) === 5050, 'Test Case 5 Failed');",
  "JavaScript/61": "console.assert(correctBracketing(\"()\") === true, \"Test Case 1 Failed\");\nconsole.assert(correctBracketing(\"()()\") === true, \"Test Case 2 Failed\");\nconsole.assert(correctBracketing(\"((()))\") === true, \"Test Case 3 Failed\");\nconsole.assert(correctBracketing(\"((())\") === false, \"Test Case 4 Failed\");\nconsole.assert(correctBracketing(\"))((\") === false, \"Test Case 5 Failed\");",
  "JavaScript/62": "console.assert(JSON.stringify(derivative([1, 2, 3, 4, 5])) === JSON.stringify([2, 6, 12, 20]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(derivative([-2, 1, -3, 4, -5])) === JSON.stringify([1, -6, 12, -20]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(derivative([0, 0, 0, 0])) === JSON.stringify([0, 0, 0]), 'Test Case 3 Failed');",
  "JavaScript/63": "console.assert(fibfib(0) === 0);\nconsole.assert(fibfib(1) === 0);\nconsole.assert(fibfib(2) === 1);\nconsole.assert(fibfib(3) === 1);",
  "JavaScript/64": "console.assert(vowelsCount(\"Hello\") === 2, \"Test case 1 failed\");\nconsole.assert(vowelsCount(\"JavaScript\") === 3, \"Test case 2 failed\");\nconsole.assert(vowelsCount(\"Engineering\") === 5, \"Test case 4 failed\");",
  "JavaScript/65": "console.assert(circularShift(12345, 2) === \"45123\", \"Test Case 1 Failed\");\nconsole.assert(circularShift(987654, 3) === \"654987\", \"Test Case 2 Failed\");\nconsole.assert(circularShift(123, 5) === \"321\", \"Test Case 3 Failed\");\nconsole.assert(circularShift(9876, 1) === \"6987\", \"Test Case 4 Failed\");\nconsole.assert(circularShift(45678, 0) === \"45678\", \"Test Case 5 Failed\");",
  "JavaScript/66": "console.assert(digitSum('12345') === 0, 'Test Case 2 Failed');\nconsole.assert(digitSum('') === 0, 'Test Case 4 Failed');",
  "JavaScript/67": "console.assert(fruitDistribution(\"apple 5 banana 3 cherry 2\", 15) === 5, \"Test Case 1 Failed\");\nconsole.assert(fruitDistribution(\"orange 4 pineapple 2 strawberry 3\", 10) === 1, \"Test Case 2 Failed\");\nconsole.assert(fruitDistribution(\"kiwi 5 mango 2 papaya 1\", 10) === 2, \"Test Case 3 Failed\");\nconsole.assert(fruitDistribution(\"blueberry 3 raspberry 4 blackberry 2\", 10) === 1, \"Test Case 4 Failed\");\nconsole.assert(fruitDistribution(\"pear 2 peach 4 plum 3\", 15) === 6, \"Test Case 5 Failed\");",
  "JavaScript/68": "",
  "JavaScript/69": "console.assert(search([0, 0, 0, 1, 1, 2, 2, 3]) === 2, \"Test Case 3 Failed\");",
  "JavaScript/70": "console.assert(JSON.stringify(strangeSortList([3, 1, 4, 1, 5, 9, 2, 6, 5])) === JSON.stringify([1, 9, 1, 6, 2, 5, 3, 5, 4]));\nconsole.assert(JSON.stringify(strangeSortList([9, 8, 7, 6, 5, 4, 3, 2, 1])) === JSON.stringify([1, 9, 2, 8, 3, 7, 4, 6, 5]));\nconsole.assert(JSON.stringify(strangeSortList([2, 4, 6, 8, 10, 12, 14, 16, 18])) === JSON.stringify([2, 18, 4, 16, 6, 14, 8, 12, 10]));\nconsole.assert(JSON.stringify(strangeSortList([5, 10, 15, 20, 25, 30, 35, 40, 45])) === JSON.stringify([5, 45, 10, 40, 15, 35, 20, 30, 25]));\nconsole.assert(JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9])) === JSON.stringify([1, 9, 2, 8, 3, 7, 4, 6, 5]));",
  "JavaScript/71": "",
  "JavaScript/72": "console.assert(willItFly([3, 7, 9], 10) === false, \"Test Case 4 Failed\");\nconsole.assert(willItFly([2, 4, 6, 8], 11) === false, \"Test Case 5 Failed\");",
  "JavaScript/73": "console.assert(smallestChange([5, 5, 5, 5, 5]) === 0, \"Test Case 4 Failed\");",
  "JavaScript/74": "console.assert(JSON.stringify(totalMatch(['apple', 'banana'], ['orange', 'pear'])) === JSON.stringify(['orange', 'pear']), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(totalMatch(['one', 'two'], ['three', 'four'])) === JSON.stringify(['one', 'two']), 'Test Case 4 Failed');",
  "JavaScript/75": "console.assert(isMultiplyPrime(3) === false, 'Test Case 2 Failed');",
  "JavaScript/76": "console.assert(isSimplePower(1, 1) === true, \"Test Case 1 Failed\");\nconsole.assert(isSimplePower(16, 2) === true, \"Test Case 2 Failed\");\nconsole.assert(isSimplePower(27, 3) === true, \"Test Case 3 Failed\");\nconsole.assert(isSimplePower(10000, 10) === true, \"Test Case 4 Failed\");\nconsole.assert(isSimplePower(81, 9) === true, \"Test Case 5 Failed\");",
  "JavaScript/77": "console.assert(iscube(27) === true);\nconsole.assert(iscube(-64) === true);\nconsole.assert(iscube(125) === true);\nconsole.assert(iscube(8) === true);",
  "JavaScript/78": "console.assert(hexKey(\"2357\") === 4, \"Test case 1 failed\");\nconsole.assert(hexKey(\"BD\") === 2, \"Test case 2 failed\");\nconsole.assert(hexKey(\"2357BD\") === 6, \"Test case 3 failed\");\nconsole.assert(hexKey(\"\") === 0, \"Test case 5 failed\");",
  "JavaScript/79": "console.assert(decimalToBinary(10) === \"db1010db\", \"Test Case 1 Failed\");\nconsole.assert(decimalToBinary(25) === \"db11001db\", \"Test Case 2 Failed\");\nconsole.assert(decimalToBinary(0) === \"db0db\", \"Test Case 3 Failed\");\nconsole.assert(decimalToBinary(100) === \"db1100100db\", \"Test Case 4 Failed\");\nconsole.assert(decimalToBinary(7) === \"db111db\", \"Test Case 5 Failed\");",
  "JavaScript/80": "console.assert(isHappy(\"aaaaa\") === false, \"Test Case 3 Failed\");\nconsole.assert(isHappy(\"abcdefgh\") === true, \"Test Case 4 Failed\");\nconsole.assert(isHappy(\"12345\") === true, \"Test Case 5 Failed\");",
  "JavaScript/81": "console.assert(JSON.stringify(numericalLetterGrade([4.0, 3.9, 3.6])) === JSON.stringify(['A+', 'A', 'A-']), 'Test Case 1 Failed');",
  "JavaScript/82": "console.assert(primeLength(\"hello\") === true);\nconsole.assert(primeLength(\"\") === false);\nconsole.assert(primeLength(\"Test\") === false);",
  "JavaScript/83": "console.assert(startsOneEnds(1) === 1, \"Test Case 1 Failed\");",
  "JavaScript/84": "console.assert(solve(0) === \"0\", \"Test Case 4 Failed\");",
  "JavaScript/85": "console.assert(add([1, 2, 3, 4, 5]) === 6, \"Test Case 1 Failed\");\nconsole.assert(add([1, 3, 5, 7, 9]) === 0, \"Test Case 3 Failed\");\nconsole.assert(add([11, 22, 33, 44, 55]) === 66, \"Test Case 5 Failed\");",
  "JavaScript/86": "console.assert(antiShuffle(\"hello world\") === \"ehllo dlorw\", 'Test Case 1 Failed');\nconsole.assert(antiShuffle(\"abc def\") === \"abc def\", 'Test Case 2 Failed');",
  "JavaScript/87": "console.assert(JSON.stringify(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10)) === JSON.stringify([]), \"Test Case 4 Failed\");",
  "JavaScript/88": "console.assert(JSON.stringify(sortArray([1, 1, 1, 1, 1])) === JSON.stringify([1, 1, 1, 1, 1]), 'Test Case 4 Failed');",
  "JavaScript/89": "console.assert(encrypt(\"hello\") === \"lipps\");\nconsole.assert(encrypt(\"world\") === \"asvph\");\nconsole.assert(encrypt(\"testing\") === \"xiwxmrk\");",
  "JavaScript/90": "console.assert(nextSmallest([4, 2, 6, 1, 5]) === 2, \"Test case 1 failed\");\nconsole.assert(nextSmallest([100, 50, 75, 25, 150]) === 50, \"Test case 3 failed\");\nconsole.assert(nextSmallest([1, 2, 3, 4, 5]) === 2, \"Test case 4 failed\");\nconsole.assert(nextSmallest([8, 12, 6, 4, 10]) === 6, \"Test case 5 failed\");",
  "JavaScript/91": "console.assert(isBored(\"I love JavaScript!\") === 1, \"Test Case 1 Failed\");\nconsole.assert(isBored(\"I am bored. I need a break!\") === 2, \"Test Case 2 Failed\");\nconsole.assert(isBored(\"Hello! I am here.\") === 1, \"Test Case 3 Failed\");\nconsole.assert(isBored(\"Today is a great day!\") === 0, \"Test Case 4 Failed\");",
  "JavaScript/92": "console.assert(anyInt(3, 4, 7) === true, 'Test Case 1 Failed');\nconsole.assert(anyInt(8, 10, 19) === false, 'Test Case 3 Failed');\nconsole.assert(anyInt(7, 7, 14) === true, 'Test Case 4 Failed');\nconsole.assert(anyInt(1, 2, 3) === true, 'Test Case 5 Failed');",
  "JavaScript/93": "",
  "JavaScript/94": "console.assert(skjkasdkd([13, 17, 19]) === 10, 'Test Case 2 Failed');",
  "JavaScript/95": "console.assert(!checkDictCase({'key@': 'Value7', 'key8': 'Value8'}), \"Test case 4 failed\");\nconsole.assert(!checkDictCase({}), \"Test case 5 failed\");",
  "JavaScript/96": "console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(countUpTo(20)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(countUpTo(30)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(countUpTo(50)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(countUpTo(100)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]), 'Test Case 5 Failed');",
  "JavaScript/97": "console.assert(multiply(5, 3) === 15, \"Test case 1 failed\");\nconsole.assert(multiply(10, 7) === 0, \"Test case 2 failed\");\nconsole.assert(multiply(0, 4) === 0, \"Test case 4 failed\");\nconsole.assert(multiply(9, -2) === 18, \"Test case 5 failed\");",
  "JavaScript/98": "console.assert(countUpper(\"AEIOU\") === 3, \"Test Case 1 Failed\");\nconsole.assert(countUpper(\"12345\") === 0, \"Test Case 3 Failed\");\nconsole.assert(countUpper(\"\") === 0, \"Test Case 4 Failed\");",
  "JavaScript/99": "console.assert(closestInteger(9.2) === 9);\nconsole.assert(closestInteger(-5.5) === -6);\nconsole.assert(closestInteger(0) === 0);",
  "JavaScript/100": "",
  "JavaScript/101": "console.assert(wordsString('hello world') instanceof Array, 'Test Case 1 Failed');\nconsole.assert(wordsString('apple,orange,banana') instanceof Array && wordsString('apple,orange,banana').length === 3, 'Test Case 3 Failed');\nconsole.assert(wordsString('one,two three') instanceof Array && wordsString('one,two three').includes('two'), 'Test Case 4 Failed');",
  "JavaScript/102": "console.assert(chooseNum(1, 10) === 10, 'Test Case 1 Failed');\nconsole.assert(chooseNum(2, 5) === 4, 'Test Case 2 Failed');\nconsole.assert(chooseNum(3, 8) === 8, 'Test Case 3 Failed');\nconsole.assert(chooseNum(6, 9) === 8, 'Test Case 4 Failed');\nconsole.assert(chooseNum(1, 3) === 2, 'Test Case 5 Failed');",
  "JavaScript/103": "console.assert(roundedAvg(7, 7) === '0b111', \"Test case 3 failed\");\nconsole.assert(roundedAvg(0, 0) === '0b0', \"Test case 5 failed\");",
  "JavaScript/104": "",
  "JavaScript/105": "",
  "JavaScript/106": "console.assert(JSON.stringify(f(1)) === JSON.stringify([1]), \"Test Case 1 Failed\");",
  "JavaScript/107": "",
  "JavaScript/108": "",
  "JavaScript/109": "console.assert(moveOneBall([]) === true, 'Test Case 1');\nconsole.assert(moveOneBall([1, 2, 3, 4]) === true, 'Test Case 2');\nconsole.assert(moveOneBall([1, 2, 3, 6, 5, 4]) === false, 'Test Case 5');",
  "JavaScript/110": "console.assert(exchange([1, 3, 5], [2, 4, 6]) === 'YES', 'Test Case 1 Failed');\nconsole.assert(exchange([1, 2, 3, 4], [5, 6, 7, 8]) === 'YES', 'Test Case 3 Failed');\nconsole.assert(exchange([5, 6, 7, 8], [1, 2, 3, 4]) === 'YES', 'Test Case 4 Failed');",
  "JavaScript/111": "console.assert(JSON.stringify(histogram('apple banana apple')) === '{\"apple\":2}')\nconsole.assert(JSON.stringify(histogram('')) === '{}')\nconsole.assert(JSON.stringify(histogram('apple orange orange banana apple')) === '{\"apple\":2,\"orange\":2}')\nconsole.assert(JSON.stringify(histogram('a b c d a b c d')) === '{\"a\":2,\"b\":2,\"c\":2,\"d\":2}')",
  "JavaScript/112": "console.assert(reverseDelete('hello', 'e') === false, 'Test Case 1 Failed');\nconsole.assert(reverseDelete('programming', 'g') === false, 'Test Case 4 Failed');\nconsole.assert(reverseDelete('algorithm', 'a') === false, 'Test Case 5 Failed');",
  "JavaScript/113": "",
  "JavaScript/114": "console.assert(minSubArraySum([1, 2, 3, 4, 5]) === 1, 'Test Case 1 Failed');\nconsole.assert(minSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3]) === -5, 'Test Case 3 Failed');\nconsole.assert(minSubArraySum([10, 20, 30, 40, 50]) === 10, 'Test Case 4 Failed');\nconsole.assert(minSubArraySum([5, 10, 15, 20, 25]) === 5, 'Test Case 5 Failed');",
  "JavaScript/115": "console.assert(maxFill([[0, 0, 0], [0, 0, 0]], 1) === 0, 'Test Case 3 Failed');\nconsole.assert(maxFill([[1, 1, 1], [1, 1, 1]], 1) === 6, 'Test Case 4 Failed');",
  "JavaScript/116": "console.assert(JSON.stringify(sortArray([3, 7, 4, 1, 5])) === JSON.stringify([1, 4, 3, 5, 7]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(sortArray([31, 63, 12, 5, 9])) === JSON.stringify([5, 9, 12, 31, 63]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(sortArray([255, 0, 127, 8, 15])) === JSON.stringify([0, 8, 15, 127, 255]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(sortArray([128, 64, 32, 16, 8])) === JSON.stringify([8, 16, 32, 64, 128]), \"Test Case 5 Failed\");",
  "JavaScript/117": "console.assert(JSON.stringify(selectWords(\"I love coding\", 4)) === JSON.stringify([\"coding\"]), \"Test Case 3 Failed\");",
  "JavaScript/118": "console.assert(getClosestVowel('hello') === 'e', 'Test Case 1 Failed');\nconsole.assert(getClosestVowel('world') === 'o', 'Test Case 2 Failed');",
  "JavaScript/119": "console.assert(matchParens([\"(\", \")\"]) === 'Yes', 'Test Case 1 Failed');\nconsole.assert(matchParens([\"(\", \"(\"]) === 'No', 'Test Case 2 Failed');\nconsole.assert(matchParens([\"()\", \"()\"]) === 'Yes', 'Test Case 4 Failed');\nconsole.assert(matchParens([\")(\", \"()\"]) === 'No', 'Test Case 5 Failed');",
  "JavaScript/120": "console.assert(JSON.stringify(maximum([10, 20, 30, 40, 50], 2)) === JSON.stringify([40, 50]), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(maximum([5, 4, 3, 2, 1], 1)) === JSON.stringify([5]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(maximum([8, 6, 7, 5, 3, 0, 9], 4)) === JSON.stringify([6, 7, 8, 9]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(maximum([100, 200, 50, 75, 125], 5)) === JSON.stringify([50, 75, 100, 125, 200]), \"Test Case 5 Failed\");",
  "JavaScript/121": "console.assert(solution([1, 2, 3, 4, 5, 6]) === 9, 'Test Case 1 Failed');\nconsole.assert(solution([2, 4, 6, 8]) === 0, 'Test Case 2 Failed');\nconsole.assert(solution([0, 0, 0, 0]) === 0, 'Test Case 5 Failed');",
  "JavaScript/122": "console.assert(addElements([1, 2, 3, 4, 5], 3) === 6, \"Test Case 1 Failed\");\nconsole.assert(addElements([-1, -2, -3, -4, -5], 5) === -15, \"Test Case 2 Failed\");\nconsole.assert(addElements([50, 25, 75], 3) === 150, \"Test Case 3 Failed\");\nconsole.assert(addElements([0, 0, 0, 0, 0], 5) === 0, \"Test Case 4 Failed\");\nconsole.assert(addElements([100, 200, 300, 400, 500], 3) === 0, \"Test Case 5 Failed\");",
  "JavaScript/123": "",
  "JavaScript/124": "console.assert(validDate(\"1999-11-31\") === false, \"Test case 3 failed\");\nconsole.assert(validDate(\"2023-02-29\") === false, \"Test case 4 failed\");\nconsole.assert(validDate(\"2022-04-31\") === false, \"Test case 5 failed\");",
  "JavaScript/125": "console.assert(splitWords(\"Hello World\").join(\" \") === \"Hello World\", 'Test Case 1 Failed');\nconsole.assert(splitWords(\"123456\").toString() === \"0\", 'Test Case 3 Failed');\nconsole.assert(splitWords(\"Testing split by space\").join(\" \") === \"Testing split by space\", 'Test Case 4 Failed');",
  "JavaScript/126": "console.assert(isSorted([1, 2, 3, 4, 5]) === true, \"Test Case 1 Failed\");\nconsole.assert(isSorted([5, 4, 3, 2, 1]) === false, \"Test Case 2 Failed\");\nconsole.assert(isSorted([1, 1, 2, 3, 4]) === true, \"Test Case 3 Failed\");\nconsole.assert(isSorted([1, 2, 2, 3, 4]) === true, \"Test Case 4 Failed\");\nconsole.assert(isSorted([]) === true, \"Test Case 5 Failed\");",
  "JavaScript/127": "console.assert(intersection([3, 7], [5, 9]) === 'YES', 'Test Case 1 Failed');\nconsole.assert(intersection([1, 3], [4, 6]) === 'NO', 'Test Case 2 Failed');\nconsole.assert(intersection([20, 30], [25, 35]) === 'YES', 'Test Case 4 Failed');",
  "JavaScript/128": "console.assert(prodSigns([0, 3, 4]) === 0, \"Test Case 3 Failed\");",
  "JavaScript/129": "console.assert(JSON.stringify(minPath([[0, 1, 0], [0, 0, 0], [1, 0, 0]], 5)) === JSON.stringify([1, 0, 1, 0, 1]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(minPath([[0, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 1, 0], [0, 0, 0]], 4)) === JSON.stringify([1, 0, 1, 0]), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(minPath([[0, 0, 0], [0, 1, 0]], 3)) === JSON.stringify([1, 0, 1]), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(minPath([[0, 1, 0, 0, 1], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0]], 6)) === JSON.stringify([1, 0, 1, 0, 1, 0]), \"Test Case 5 Failed\");",
  "JavaScript/130": "console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]), 'Test Case 2 Failed');",
  "JavaScript/131": "console.assert(digits(2468) === 0, 'Test Case 2 Failed');\nconsole.assert(digits(33333) === 243, 'Test Case 3 Failed');\nconsole.assert(digits(987654321) === 945, 'Test Case 4 Failed');\nconsole.assert(digits(0) === 0, 'Test Case 5 Failed');",
  "JavaScript/132": "console.assert(isNested(\"[[]]\") === true, \"Test Case 2 Failed\");\nconsole.assert(isNested(\"[[[]]]\") === true, \"Test Case 3 Failed\");\nconsole.assert(isNested(\"[[]]\") === true, \"Test Case 4 Failed\");\nconsole.assert(isNested(\"[[[[[]]]]]\") === true, \"Test Case 5 Failed\");",
  "JavaScript/133": "console.assert(sumSquares([1, 2, 3]) === 14, \"Test Case 1 Failed\");\nconsole.assert(sumSquares([-2, 5, 3]) === 38, \"Test Case 2 Failed\");\nconsole.assert(sumSquares([0, 0, 0]) === 0, \"Test Case 3 Failed\");\nconsole.assert(sumSquares([-3, -4, -5]) === 50, \"Test Case 4 Failed\");",
  "JavaScript/134": "console.assert(checkIfLastCharIsALetter(\"12345\") === false, \"Test Case 2 Failed\");\nconsole.assert(checkIfLastCharIsALetter(\"Hello \") === false, \"Test Case 3 Failed\");\nconsole.assert(checkIfLastCharIsALetter(\"Hi there!\") === false, \"Test Case 4 Failed\");\nconsole.assert(checkIfLastCharIsALetter(\"\") === false, \"Test Case 5 Failed\");",
  "JavaScript/135": "console.assert(canArrange([1, 2, 3, 4]) === -1, 'Test Case 1 Failed');\nconsole.assert(canArrange([4, 3, 2, 1]) === 3, 'Test Case 2 Failed');\nconsole.assert(canArrange([5, 4, 3, 2, 1]) === 4, 'Test Case 3 Failed');\nconsole.assert(canArrange([]) === -1, 'Test Case 4 Failed');\nconsole.assert(canArrange([1, 3, 2]) === 2, 'Test Case 5 Failed');",
  "JavaScript/136": "console.assert(JSON.stringify(largestSmallestIntegers([1, 2, 3])) === JSON.stringify((null, 1)), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(largestSmallestIntegers([-3, -2, -1])) === JSON.stringify((-2, null)), \"Test Case 2 Failed\");\nconsole.assert(JSON.stringify(largestSmallestIntegers([-5, 10, 3])) === JSON.stringify((-5, 3)), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(largestSmallestIntegers([0, 0, 0])) === JSON.stringify((null, null)), \"Test Case 4 Failed\");\nconsole.assert(JSON.stringify(largestSmallestIntegers([5, -10, 15])) === JSON.stringify((-10, 5)), \"Test Case 5 Failed\");",
  "JavaScript/137": "console.assert(compareOne(3, 5) === 5, 'Test Case 1 Failed');\nconsole.assert(compareOne(\"9\", 10) === 10, 'Test Case 2 Failed');\nconsole.assert(compareOne(-5, 0) === 0, 'Test Case 5 Failed');",
  "JavaScript/138": "console.assert(isEqualToSumEven(8) === true, \"Test Case 1 Failed\");\nconsole.assert(isEqualToSumEven(10) === true, \"Test Case 2 Failed\");\nconsole.assert(isEqualToSumEven(7) === false, \"Test Case 3 Failed\");\nconsole.assert(isEqualToSumEven(12) === true, \"Test Case 4 Failed\");\nconsole.assert(isEqualToSumEven(5) === false, \"Test Case 5 Failed\");",
  "JavaScript/139": "console.assert(specialFactorial(0) === 1, 'Test Case 1 Failed');\nconsole.assert(specialFactorial(1) === 1, 'Test Case 2 Failed');",
  "JavaScript/140": "console.assert(fixSpaces(\"hello world\") === \"hello_world\", \"Test Case 1 Failed\");\nconsole.assert(fixSpaces(\"noSpaces\") === \"noSpaces\", \"Test Case 3 Failed\");",
  "JavaScript/141": "console.assert(fileNameCheck(\"file1.txt\") === 'Yes', 'Test Case 1 Failed');\nconsole.assert(fileNameCheck(\"myFile.dll\") === 'Yes', 'Test Case 2 Failed');\nconsole.assert(fileNameCheck(\"data2.exe\") === 'Yes', 'Test Case 3 Failed');\nconsole.assert(fileNameCheck(\"wrongname.pdf\") === 'No', 'Test Case 5 Failed');",
  "JavaScript/142": "",
  "JavaScript/143": "",
  "JavaScript/144": "console.assert(simplify(\"2/3\", \"1/2\") === false);\nconsole.assert(simplify(\"3/7\", \"2/5\") === false);",
  "JavaScript/145": "console.assert(JSON.stringify(orderByPoints([23, 58, 11, 47, 99])) === JSON.stringify([11, 23, 47, 58, 99]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(orderByPoints([5, 8, 3, 2, 1])) === JSON.stringify([1, 2, 3, 5, 8]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(orderByPoints([-3, -1, -5, -2, -4])) === JSON.stringify([-5, -4, -3, -2, -1]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(orderByPoints([0, 0, 0, 0, 0])) === JSON.stringify([0, 0, 0, 0, 0]), 'Test Case 5 Failed');",
  "JavaScript/146": "console.assert(specialFilter([123, 45, 6789, 11]) === 2, 'Test Case 1 Failed');\nconsole.assert(specialFilter([8, 12, 334, 5678]) === 0, 'Test Case 2 Failed');\nconsole.assert(specialFilter([12, 3456, 7890, 12345]) === 1, 'Test Case 4 Failed');\nconsole.assert(specialFilter([1, 23, 45, 67]) === 0, 'Test Case 5 Failed');",
  "JavaScript/147": "console.assert(getMaxTriples(7) === 10, \"Test Case 3 Failed\");\nconsole.assert(getMaxTriples(2) === 0, \"Test Case 4 Failed\");",
  "JavaScript/148": "console.assert(JSON.stringify(bf('Mercury', 'Earth')) === JSON.stringify(['Venus']), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(bf('Venus', 'Neptune')) === JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus']), \"Test Case 3 Failed\");\nconsole.assert(JSON.stringify(bf('Earth', 'Mars')) === JSON.stringify([]), \"Test Case 4 Failed\");",
  "JavaScript/149": "",
  "JavaScript/150": "console.assert(xOrY(1, \"apple\", \"banana\") === \"banana\", 'Test Case 1 Failed');\nconsole.assert(xOrY(0, \"cherry\", \"date\") === \"date\", 'Test Case 2 Failed');\nconsole.assert(xOrY(2, \"grape\", \"kiwi\") === \"grape\", 'Test Case 3 Failed');\nconsole.assert(xOrY(3, \"mango\", \"orange\") === \"mango\", 'Test Case 4 Failed');\nconsole.assert(xOrY(7, \"watermelon\", \"strawberry\") === \"watermelon\", 'Test Case 5 Failed');",
  "JavaScript/151": "console.assert(doubleTheDifference([1, 2, 3, 4]) === 10, 'Test Case 1 Failed');\nconsole.assert(doubleTheDifference([0, 0, 0, 0]) === 0, 'Test Case 3 Failed');\nconsole.assert(doubleTheDifference([1, 3, 5, 7, 9]) === 165, 'Test Case 4 Failed');\nconsole.assert(doubleTheDifference([-1, -2, -3, -4, -5]) === 0, 'Test Case 5 Failed');",
  "JavaScript/152": "console.assert(JSON.stringify(compare([1,2,3], [1,0,0])) === JSON.stringify([0, 2, 3]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(compare([5,7,9], [2,3,4])) === JSON.stringify([3, 4, 5]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(compare([10,20,30,40], [9,18,27,36])) === JSON.stringify([1, 2, 3, 4]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(compare([0,0,0], [0,0,0])) === JSON.stringify([0, 0, 0]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(compare([100,200,300,400], [100,200,300,400])) === JSON.stringify([0, 0, 0, 0]), 'Test Case 5 Failed');",
  "JavaScript/153": "console.assert(strongestExtension('classB', ['extension1', 'extension2']) === 'classB.extension1', 'Test Case 2 Failed');\nconsole.assert(strongestExtension('classC', ['ext1', 'EXT2', 'extension3']) === 'classC.EXT2', 'Test Case 3 Failed');\nconsole.assert(strongestExtension('classD', ['EXT1', 'ext2']) === 'classD.EXT1', 'Test Case 4 Failed');",
  "JavaScript/154": "console.assert(cycpatternCheck(\"abcabcabc\", \"abc\") === true, \"Test Case 1 Failed\");\nconsole.assert(cycpatternCheck(\"123123123\", \"123\") === true, \"Test Case 2 Failed\");\nconsole.assert(cycpatternCheck(\"xyzxyzxyz\", \"xyz\") === true, \"Test Case 3 Failed\");\nconsole.assert(cycpatternCheck(\"aabbaabb\", \"aabb\") === true, \"Test Case 4 Failed\");\nconsole.assert(cycpatternCheck(\"abcdabcdabcd\", \"abcd\") === true, \"Test Case 5 Failed\");",
  "JavaScript/155": "",
  "JavaScript/156": "console.assert(intToMiniRoman(3) === 'iii', 'Test Case 1 Failed');\nconsole.assert(intToMiniRoman(7) === 'vii', 'Test Case 2 Failed');\nconsole.assert(intToMiniRoman(49) === 'xlix', 'Test Case 3 Failed');\nconsole.assert(intToMiniRoman(99) === 'xcix', 'Test Case 4 Failed');\nconsole.assert(intToMiniRoman(444) === 'cdxliv', 'Test Case 5 Failed');",
  "JavaScript/157": "console.assert(rightAngleTriangle(3, 4, 5) === true, 'Test Case 1 Failed');\nconsole.assert(rightAngleTriangle(5, 12, 13) === true, 'Test Case 2 Failed');\nconsole.assert(rightAngleTriangle(8, 15, 17) === true, 'Test Case 3 Failed');\nconsole.assert(rightAngleTriangle(7, 24, 25) === true, 'Test Case 4 Failed');\nconsole.assert(rightAngleTriangle(20, 21, 29) === true, 'Test Case 5 Failed');",
  "JavaScript/158": "console.assert(findMax(['cat', 'dog', 'rabbit']) === 'rabbit', 'Test Case 1 Failed');\nconsole.assert(findMax(['elephant', 'giraffe', 'lion']) === 'elephant', 'Test Case 3 Failed');",
  "JavaScript/159": "console.assert(JSON.stringify(eat(5, 3, 6)) === JSON.stringify([8, 3]), \"Test Case 1 Failed\");\nconsole.assert(JSON.stringify(eat(0, 0, 0)) === JSON.stringify([0, 0]), \"Test Case 4 Failed\");",
  "JavaScript/160": "console.assert(doAlgebra(['*'], [2, 3]) === 6, \"Test Case 1 Failed\");\nconsole.assert(doAlgebra(['+', '*'], [2, 3, 4]) === 14, \"Test Case 2 Failed\");",
  "JavaScript/161": "console.assert(solve(\"12345\") === \"54321\", 'Test Case 3 Failed');",
  "JavaScript/162": "console.assert(stringToMd5('hello') === '5d41402abc4b2a76b9719d911017c592', 'Test Case 1 Failed');\nconsole.assert(stringToMd5('world') === '7d793037a0760186574b0282f2f435e7', 'Test Case 2 Failed');",
  "JavaScript/163": "console.assert(JSON.stringify(generateIntegers(1, 10)) === JSON.stringify([2, 4, 6, 8]), 'Test Case 1 Failed');\nconsole.assert(JSON.stringify(generateIntegers(5, 15)) === JSON.stringify([6, 8]), 'Test Case 2 Failed');\nconsole.assert(JSON.stringify(generateIntegers(0, 10)) === JSON.stringify([2, 4, 6, 8]), 'Test Case 3 Failed');\nconsole.assert(JSON.stringify(generateIntegers(8, 12)) === JSON.stringify([8]), 'Test Case 4 Failed');\nconsole.assert(JSON.stringify(generateIntegers(2, 6)) === JSON.stringify([2, 4, 6]), 'Test Case 5 Failed');"
}