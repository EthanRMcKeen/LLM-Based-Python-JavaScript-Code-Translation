{
  "Python/6": "const parseNestedParens = (parenString) => {\n\n  const parseParenGroup = (s) => {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let c of s) {\n      if (c === '(') {\n        depth++;\n        maxDepth = Math.max(depth, maxDepth);\n      } else {\n        depth--;\n      }\n    }\n    return maxDepth;\n  }\n\n  return parenString.split(' ')\n    .map(x => parseParenGroup(x))\n    .filter(x => x !== undefined);\n}\n\nassert(JSON.stringify(parseNestedParens(\"\")) === JSON.stringify([]));\nassert(JSON.stringify(parseNestedParens(\"()\")) === JSON.stringify([1]));\nassert(JSON.stringify(parseNestedParens(\"(()) ()\")) === JSON.stringify([2, 1]));\nassert(JSON.stringify(parseNestedParens(\"() () ()\")) === JSON.stringify([1, 1, 1]);\n\n\n\n",
  "Python/9": "const rollingMax = (numbers) => {\n\n    let runningMax = null;\n    let result = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}\n\nassert(JSON.stringify(rollingMax([1, 3, 5, 2, 4, 6, 3])) === JSON.stringify([1, 3, 5, 5, 5, 6, 6]), 't1');\nassert(JSON.stringify(rollingMax([10, 9, 8, 7, 6, 5])) === JSON.stringify([10, 10, 10, 10, 10, 10]), 't2');\nassert(JSON.stringify(rollingMax([3, 3, 3, 3, 3])) === JSON.stringify([3, 3, 3, 3, 3]), 't3');\nassert(JSON.stringify(rollingMax([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), 't4');\nassert(JSON.stringify(rollingMax([5, 4, 3, 2, 1])) === JSON.stringify([5, 5, 5, 5, 5]), 't5');\n\n",
  "Python/24": "function largestDivisor(n) {\n  for (let i = n - 1; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}\n",
  "Python/31": "const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let k = 2; k <= Math.sqrt(n); k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(isPrime(2) === true);\nconsole.log(isPrime(3) === true);\nconsole.log(isPrime(7) === true);\nconsole.log(isPrime(10) === false);\nconsole.log(isPrime(13) === true);\n\n",
  "Python/34": "function unique(l) {\n  return [...new Set(l)].sort();\n}",
  "Python/37": "const sortEven = (l) => {\n\n    const evens = l.filter((_, index) => index % 2 === 0);\n    const odds = l.filter((_, index) => index % 2 !== 0);\n    evens.sort((a, b) => a - b);\n    \n    const ans = [];\n    for (let i = 0; i < evens.length; i++) {\n        ans.push(evens[i]);\n        ans.push(odds[i]);\n    }\n    \n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n\n    return ans;\n}\n  ",
  "Python/44": "function changeBase(x, base) {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\nconsole.assert(changeBase(10, 2) === \"1010\");\nconsole.assert(changeBase(16, 16) === \"10\");\nconsole.assert(changeBase(255, 8) === \"377\");\nconsole.assert(changeBase(100, 5) === \"400\");\nconsole.assert(changeBase(42, 7) === \"60\");\n",
  "Python/54": "function sameChars(s0, s1) {\n    return new Set(s0).size === new Set(s1).size;\n}",
  "Python/55": "const fib = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nconsole.assert(fib(0) === 0);\nconsole.assert(fib(1) === 1);\nconsole.assert(fib(2) === 1);\nconsole.assert(fib(5) === 5);\nconsole.assert(fib(10) === 55);\n",
  "Python/66": "const digitSum = (s) => {\n    if (s === \"\") return 0;\n    return [...s].reduce((acc, char) => {\n        return char.toUpperCase() === char ? acc + char.charCodeAt(0) : acc;\n    }, 0);\n}\n",
  "Python/77": "function isCube(a) {\n    a = Math.abs(a);\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}\n",
  "Python/87": "const getRow = (lst, x) => {\n  let coords = lst.flatMap((row, i) => row.map((val, j) => val === x ? [i, j] : null)).filter(Boolean);\n  \n  return coords.sort((a, b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n}\n",
  "Python/93": "const encodeMessage = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries(Array.from(vowels, i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n    message = message.split('').map(char => vowelsReplace[char] ? vowelsReplace[char] : char).join('');\n    return message;\n}",
  "Python/95": "const checkDictCase = (dict) => {\n    if (Object.keys(dict).length === 0) {\n        return false;\n    } else {\n        let state = \"start\";\n        for (let key in dict) {\n            if (typeof key !== 'string') {\n                state = \"mixed\";\n                break;\n            }\n            if (state === \"start\") {\n                if (key === key.toUpperCase()) {\n                    state = \"upper\";\n                } else if (key === key.toLowerCase()) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state === \"upper\" && key !== key.toUpperCase()) || (state === \"lower\" && key !== key.toLowerCase())) {\n                state = \"mixed\";\n                break;\n            } else {\n                break;\n            }\n        }\n        return state === \"upper\" || state === \"lower\";\n    }\n}\n\n// Test Cases\nconsole.assert(checkDictCase({ 'apple': 1, 'banana': 2 }) === true);\nconsole.assert(checkDictCase({ 'Apple': 1, 'banana': 2 }) === false);\nconsole.assert(checkDictCase({ 'apple': 1, 'Banana': 2 }) === false);\nconsole.assert(checkDictCase({}) === false);\n",
  "Python/101": "function wordsString(s) {\n    if (!s) {\n        return [];\n    }\n\n    let sList = [];\n    for (let letter of s) {\n        if (letter === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(letter);\n        }\n    }\n\n    sList = sList.join(\"\");\n    return sList.split(\" \");\n}",
  "Python/103": "const roundedAvg = (n, m) => {\n\n  if (m < n) {\n    return -1;\n  }\n  let summation = 0;\n  for (let i = n; i <= m; i++) {\n    summation += i;\n  }\n  return (Math.round(summation / (m - n + 1))).toString(2);\n}\n\nassert(roundedAvg(0, 10) === '101');\nassert(roundedAvg(2, 2) === '10');\n\n",
  "Python/105": "function byLength(arr) {\n  const dic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  const sortedArr = arr.slice().sort((a, b) => b - a);\n  const newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    try {\n      newArr.push(dic[sortedArr[i]]);\n    } catch (err) {\n      continue;\n    }\n  }\n  return newArr;\n}\n",
  "Python/107": "const evenOddPalindrome = (n) => {\n\n    const isPalindrome = (num) => {\n        return num.toString() === num.toString().split(\"\").reverse().join(\"\");\n    };\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n};\n\n",
  "Python/113": "function oddCount(lst) {\n    let res = [];\n    for (let arr of lst) {\n        let n = arr.filter(d => parseInt(d) % 2 === 1).length;\n        res.push(`the number of odd elements ${n} in the string ${n} of the ${n}th input.`);\n    }\n    return res;\n}\n",
  "Python/116": "const sortArray = (arr) => {\n    return arr.slice().sort((a, b) => {\n        const countBits = num => {\n            return (num.toString(2).match(/1/g) || []).length;\n        }\n        const bitCountA = countBits(a);\n        const bitCountB = countBits(b);\n        if (bitCountA === bitCountB) {\n            return a - b;\n        }\n        return bitCountA - bitCountB;\n    });\n}\n\nconsole.assert(sortArray([9, 8, 7, 6, 5]).toString(), [8, 5, 6, 9, 7].toString());\n\n",
  "Python/118": "const getClosestVowel = (word) => {\n\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"]);\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n",
  "Python/120": "const maximum = (arr, k) => {\n\n    if (k === 0) {\n        return [];\n    }\n    const sortedArr = arr.slice().sort((a, b) => a - b);\n    const ans = sortedArr.slice(-k);\n    return ans;\n}\n\nassert(JSON.stringify(maximum([3, 1, 4, 1, 5, 9, 2, 6, 5], 4)) === JSON.stringify([5, 5, 6, 9]), \"Test Case 1 Failed\");\nassert(JSON.stringify(maximum([7, 2, 5, 8, 4, 3], 2)) === JSON.stringify([7, 8]), \"Test Case 2 Failed\");\nassert(JSON.stringify(maximum([1, 2, 3, 4, 5], 1)) === JSON.stringify([5]), \"Test Case 3 Failed\");\nassert(JSON.stringify(maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 3)) === JSON.stringify([7, 8, 9]), \"Test Case 4 Failed\");\n",
  "Python/123": "function getOddCollatz(n) {\n    let oddCollatz;\n    if (n % 2 === 0) {\n        oddCollatz = [];\n    } else {\n        oddCollatz = [n];\n    }\n\n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n\n        if (n % 2 === 1) {\n            oddCollatz.push(Math.floor(n));\n        }\n    }\n\n    return oddCollatz.sort((a, b) => a - b);\n}",
  "Python/124": "const validDate = (date) => {\n\n    try {\n        date = date.trim();\n        let [month, day, year] = date.split('-');\n        month = parseInt(month);\n        day = parseInt(day);\n        year = parseInt(year);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (([1, 3, 5, 7, 8, 10, 12].includes(month) && (day < 1 || day > 31)) ||\n            ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) ||\n            (month === 2 && (day < 1 || day > 29))) {\n            return false;\n        }\n    } catch (e) {\n        return false;\n    }\n\n    return true;\n}\n",
  "Python/128": "const prodSigns = (arr) => {\n    if (arr.length === 0) return null;\n    const hasZero = arr.includes(0);\n    const hasNegatives = arr.some(num => num < 0);\n    \n    let prod = 0;\n    if (hasZero) {\n        prod = 0;\n    } else {\n        prod = hasNegatives ? Math.pow(-1, arr.filter(num => num < 0).length) : 1;\n    }\n    \n    return prod * arr.reduce((sum, num) => sum + Math.abs(num), 0);\n}\n",
  "Python/134": "function checkIfLastCharIsALetter(txt) {\n    const check = txt.split(\" \").pop();\n    return (check.length === 1 && (check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122)) ? true : false;\n}",
  "Python/135": "function canArrange(arr) {\n    let index = -1;\n    let i = 1;\n    while (i < arr.length) {\n        if (arr[i] < arr[i - 1]) {\n            index = i;\n        }\n        i++;\n    }\n    return index;\n}\n\nconsole.assert(canArrange([1, 2, 3, 4, 5]) === -1);\nconsole.assert(canArrange([5, 4, 3, 2, 1]) === 4);\nconsole.assert(canArrange([3, 2, 4, 1]) === 3);\nconsole.assert(canArrange([1, 2, 3, 5, 4]) === 4);\n",
  "Python/136": "const largestSmallestIntegers = (lst) => {\n  const smallest = lst.filter(x => x < 0);\n  const largest = lst.filter(x => x > 0);\n  return [(smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null)];\n};\n",
  "Python/141": "const fileNameCheck = (fileName) => {\n  const suffix = ['txt', 'exe', 'dll'];\n  const parts = fileName.split('.');\n  if (parts.length !== 2) return 'No';\n  if (!suffix.includes(parts[1])) return 'No';\n  if (parts[0].length === 0) return 'No';\n  if (!isNaN(parts[0][0])) return 'No';\n  const digitCount = parts[0].split('').filter(x => !isNaN(x)).length;\n  if (digitCount > 3) return 'No';\n  return 'Yes';\n}",
  "Python/145": "const orderByPoints = (nums) => {\n\n  const digitsSum = (n) => {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((acc, val) => acc + val, 0);\n  };\n\n  return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n};\n\nconsole.log(orderByPoints([11, 22, 33, 44]).toString() === [11, 22, 33, 44].toString());\n",
  "Python/150": "function xOrY(n, x, y) {\n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n        }\n    }\n    return x;\n}\n\nconsole.assert(xOrY(1, 10, 20) === 20);\nconsole.assert(xOrY(2, 10, 20) === 10);\nconsole.assert(xOrY(3, 10, 20) === 10);\nconsole.assert(xOrY(4, 10, 20) === 20);\nconsole.assert(xOrY(7, 10, 20) === 10);\n",
  "Python/154": "const cycPatternCheck = (a, b) => {\n\n  const lenB = b.length;\n  const pattern = b + b;\n\n  for (let i = 0; i < a.length - lenB + 1; i++) {\n    for (let j = 0; j < lenB; j++) {\n      if (a.slice(i, i + lenB) === pattern.slice(j, j + lenB)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n",
  "Python/155": "function evenOddCount(num) {\n  let evenCount = 0;\n  let oddCount = 0;\n\n  const numStr = Math.abs(num).toString();\n\n  for (let i = 0; i < numStr.length; i++) {\n    if (parseInt(numStr[i]) % 2 === 0) {\n      evenCount += 1;\n    } else {\n      oddCount += 1;\n    }\n  }\n\n  return [evenCount, oddCount];\n}\n",
  "Python/160": "const doAlgebra = (operator, operand) => {\n  let expression = operand[0].toString();\n  for (let i = 0; i < operator.length; i++) {\n    const oprt = operator[i];\n    const oprn = operand[i + 1];\n    expression += oprt + oprn;\n  }\n  return eval(expression);\n}\n"
}