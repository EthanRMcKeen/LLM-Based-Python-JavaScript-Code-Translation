{
  "JavaScript/6": "def parse_nested_parens(paren_string):\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        return max_depth\n\n    return list(map(parse_paren_group, filter(lambda x: x != '', paren_string.split(' ')))\n\n",
  "JavaScript/8": "def sum_product(numbers, integer):\n    sum_value = 0\n    prod_value = 1\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return [sum_value, prod_value]\n",
  "JavaScript/9": "def rolling_max(numbers):\n    running_max, result = None, []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n    return result\n",
  "JavaScript/20": "def find_closest_elements(numbers):\n    closest_pair, distance = None, None\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                a, b = numbers[i], numbers[j]\n                if distance is None:\n                    distance = abs(a - b)\n                    closest_pair = [min(a, b), max(a, b)]\n                else:\n                    new_distance = abs(a - b)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = [min(a, b), max(a, b)]\n    return closest_pair\n",
  "JavaScript/23": "def strlen(string):\n    return len(string)",
  "JavaScript/30": "def get_positive(l: list) -> list:\n    return [e for e in l if e > 0]\n",
  "JavaScript/34": "def unique(l):\n    return sorted(list(set(l)))\n",
  "JavaScript/66": "def digit_sum(s: str) -> int:\n    if s == '':\n        return 0\n    return sum(ord(char) if ord(char) > 64 and ord(char) < 91 else 0 for char in s)\n",
  "JavaScript/88": "def sort_array(array):\n    arr = array.copy()\n    tot = arr[0] + arr[-1]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if (tot % 2 == 1 and arr[k] < arr[ind]) or (tot % 2 == 0 and arr[k] > arr[ind]):\n                ind = k\n        arr[j], arr[ind] = arr[ind], arr[j]\n    return arr\n",
  "JavaScript/90": "def next_smallest(lst):\n    arr = lst[:]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if arr[k] < arr[ind]:\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n\n    smallest = arr[0]\n    pt = 1\n    while pt < len(arr):\n        if arr[pt] > smallest:\n            return arr[pt]\n        pt += 1\n    return None\n",
  "JavaScript/91": "def is_bored(S):\n    t = 0\n    if S[0] == 'I' and S[1] == ' ':\n        t = 1\n    for i in range(len(S)):\n        if i < len(S) - 3 and (S[i] in ['.', '!', '?']):\n            if S[i + 1] == ' ' and S[i + 2] == 'I' and S[i + 3] == ' ':\n                t += 1\n    return t\n",
  "JavaScript/92": "def any_int(x, y, z):\n    if type(x) == int and type(y) == int and type(z) == int and (x + y == z or x + z == y or x == y + z):\n        return True\n    return False\n\n",
  "JavaScript/94": "def skjkasdkd(lst):\n    t = 0\n    for i in range(len(lst)):\n        p = 1\n        for j in range(2, int(lst[i] ** 0.5) + 1):\n            if lst[i] % j == 0:\n                p = 0\n                break\n        if p == 1 and lst[i] > t:\n            t = lst[i]\n    \n    k = 0\n    while t != 0:\n        k += t % 10\n        t = t // 10\n    \n    return k\n ",
  "JavaScript/95": "def check_dict_case(dict_input):\n    c = 0\n    lo = 1\n    hi = 1\n    for key in dict_input:\n        c += 1\n        for char in key:\n            if not (65 <= ord(char) <= 90): \n                hi = 0\n            if not (97 <= ord(char) <= 122):\n                lo = 0\n    if (lo == 0 and hi == 0) or c == 0:\n        return False\n    return True\n",
  "JavaScript/99": "def closest_integer(value):\n    value = int(value)\n    t = value % 1\n    if t < 0.5 and t > -0.5:\n        value -= t\n    else:\n        value += t\n    return value\n",
  "JavaScript/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    k = (n + m) / 2\n    if k % 1 != 0:\n        k = (n + m + 1) / 2\n    return bin(int(k))[2:]\n",
  "JavaScript/112": "def reverse_delete(s, c):\n    t = ''\n    for i in range(len(s)):\n        y = 1\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                y = 0\n        if y == 1:\n            t += s[i]\n    z = 1\n    for i in range(len(t)):\n        if t[i] != t[len(t) - i - 1]:\n            z = 0\n    if z == 0:\n        return z, False\n    return z, True\n",
  "JavaScript/114": "def min_sub_array_sum(nums):\n\n    min_sum = sum(nums)\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n",
  "JavaScript/120": "def maximum(arr, k):\n    p = arr.copy()\n    for j in range(len(p)):\n        ind = j\n        for m in range(j + 1, len(p)):\n            if p[m] < p[ind]:\n                ind = m\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    if k == 0:\n        return []\n    return p[-k:]\n",
  "JavaScript/128": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    n = 1\n    s = 0\n    \n    for i in range(len(arr)):\n        s += arr[i]\n        if arr[i] == 0:\n            return 0\n        if arr[i] < 0:\n            n = -n\n            s -= 2 * arr[i]\n    \n    return s * n\n",
  "JavaScript/129": "def min_path(grid, k):\n    m = 0\n    n = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                m = i\n                n = j\n                break\n    min_val = len(grid) * len(grid)\n    if m > 0 and grid[m - 1][n] < min_val:\n        min_val = grid[m - 1][n]\n    if n > 0 and grid[m][n - 1] < min_val:\n        min_val = grid[m][n - 1]\n    if m < len(grid) - 1 and grid[m + 1][n] < min_val:\n        min_val = grid[m + 1][n]\n    if n < len(grid[0]) - 1 and grid[m][n + 1] < min_val:\n        min_val = grid[m][n + 1]\n    p = []\n    for i in range(k):\n        if i % 2 == 0:\n            p.append(1)\n        else:\n            p.append(min_val)\n    return p\n  ",
  "JavaScript/137": "def compare_one(a, b):\n\n    aa = float(a.replace(',', '.')) if isinstance(a, str) else float(a)\n    bb = float(b.replace(',', '.')) if isinstance(b, str) else float(b)\n\n    if aa > bb:\n        return a\n    elif aa < bb:\n        return b\n\n    return None\n",
  "JavaScript/146": "def special_filter(nums):\n    p = 0\n    for num in nums:\n        if num < 10:\n            continue\n        str_num = str(num)\n        if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n            p += 1\n    return p\n",
  "JavaScript/148": "def find_planets_between(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    result = []\n    lo = -1\n    hi = -1\n    for i in range(8):\n        if planets[i] == planet1:\n            lo = i\n        if planets[i] == planet2:\n            hi = i\n    if lo == -1 or hi == -1 or lo == hi:\n        return []\n    if lo > hi:\n        lo, hi = hi, lo\n    for i in range(lo + 1, hi):\n        result.append(planets[i])\n    return result\n",
  "JavaScript/153": "def strongest_extension(class_name, extensions):\n    u = 0\n    s = float('-inf')\n    for i in range(len(extensions) - 1, -1, -1):\n        y = 0\n        for j in range(len(extensions[i])):\n            k = ord(extensions[i][j])\n            if k >= 65 and k <= 90:\n                y += 1\n            if k >= 97 and k <= 122:\n                y -= 1\n        if y >= s:\n            s = y\n            u = i\n    return class_name + '.' + extensions[u]\n",
  "JavaScript/155": "def even_odd_count(num):\n    o = 0\n    e = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        num = num // 10\n    return e, o\n",
  "JavaScript/162": "def string_to_md5(text):\n    if text == '':\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\n"
}