{
  "JavaScript/1": "def separate_paren_groups(paren_string):\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n    return result\n",
  "JavaScript/8": "def sum_product(numbers):\n    sum_value = 0\n    prod_value = 1\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return (sum_value, prod_value)\n",
  "JavaScript/20": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n\n    closest_pair = None\n    distance = None\n\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                a = numbers[i]\n                b = numbers[j]\n                if distance is None:\n                    distance = abs(a - b)\n                    closest_pair = (min(a, b), max(a, b))\n                else:\n                    new_distance = abs(a - b)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = (min(a, b), max(a, b))\n\n    return closest_pair\n",
  "JavaScript/40": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n",
  "JavaScript/57": "def monotonic(l):\n    sort1 = sorted(l)\n    sort2 = sorted(l, reverse=True)\n    \n    if l == sort1 or l == sort2:\n        return True\n\n    return False\n\n",
  "JavaScript/66": "def digit_sum(s):\n    if s == '':\n        return 0\n    return sum(ord(char) if 64 < ord(char) < 91 else 0 for char in s)\n",
  "JavaScript/77": "def is_cube(a):\n    a = abs(a)\n    return round(pow(a, 1.0/3)) ** 3 == a\n",
  "JavaScript/88": "def sort_array(array):\n    arr = array.copy()\n    tot = arr[0] + arr[-1]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if (tot % 2 == 1 and arr[k] < arr[ind]) or (tot % 2 == 0 and arr[k] > arr[ind]):\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n    return arr\n",
  "JavaScript/90": "def next_smallest(lst):\n    arr = lst.copy()\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j+1, len(arr)):\n            if arr[k] < arr[ind]:\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n    smallest = arr[0]\n    pt = 1\n    while pt < len(arr):\n        if arr[pt] > smallest:\n            return arr[pt]\n        pt += 1\n    return None\n",
  "JavaScript/91": "def is_bored(S):\n    t = 0\n    if S[0] == 'I' and S[1] == ' ':\n        t = 1\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '!' or S[i] == '?':\n            if i + 3 < len(S) and S[i + 1] == ' ' and S[i + 2] == 'I' and S[i + 3] == ' ':\n                t += 1\n    return t\n\n",
  "JavaScript/92": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or x == y + z):\n        return True\n    return False\n",
  "JavaScript/95": "def check_dict_case(input_dict):\n    c = 0\n    lo = 1\n    hi = 1\n    for key in input_dict:\n        c += 1\n        for i in range(0, len(key)):\n            if ord(key[i]) < 65 or ord(key[i]) > 90:\n                hi = 0\n            if ord(key[i]) < 97 or ord(key[i]) > 122:\n                lo = 0\n    if (lo == 0 and hi == 0) or c == 0:\n        return False\n    return True\n",
  "JavaScript/99": "def closest_integer(value):\n    value = int(value)\n    t = value % 1\n    if t < 0.5 and t > -0.5:\n        value -= t\n    else:\n        value += t\n    return value\n",
  "JavaScript/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    k = (n + m) / 2\n    if k % 1 != 0:\n        k = (n + m + 1) / 2\n    return '0b' + bin(int(k))[2:]\n",
  "JavaScript/110": "def exchange(lst1, lst2):\n    k = len(lst1)\n    t = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            t += 1\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            t += 1\n    if t >= k:\n        return 'YES'\n    return 'NO'\n",
  "JavaScript/112": "def reverse_delete(s, c):\n    t = ''\n    for i in range(len(s)):\n        y = 1\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                y = 0\n        if y == 1:\n            t += s[i]\n    \n    z = 1\n    for i in range(len(t)):\n        if t[i] != t[len(t) - i - 1]:\n            z = 0\n    \n    if z == 0:\n        return z, False\n    return z, True\n",
  "JavaScript/113": "def odd_count(lst):\n    d = []\n    for item in lst:\n        p = 0\n        for char in item:\n            if ord(char) % 2 == 1:\n                p += 1\n        p = str(p)\n        d.append('the number of odd elements ' + p + ' in the string ' + item + ' of the input.')\n    return d\n",
  "JavaScript/114": "def min_sub_array_sum(nums):\n    min_val = nums[0]\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)+1):\n            s = sum(nums[i:j])\n            if s < min_val:\n                min_val = s\n    return min_val\n\n",
  "JavaScript/115": "def max_fill(grid: List[List[int]], capacity: int) -> int:\n    p = 0\n    for i in range(len(grid)):\n        m = 0\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                m += 1\n        while m > 0:\n            m -= capacity\n            p += 1\n    return p\n",
  "JavaScript/120": "def maximum(arr, k):\n\n    p = arr.copy()\n    for j in range(len(p)):\n        ind = j\n        for m in range(j + 1, len(p)):\n            if p[m] < p[ind]:\n                ind = m\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    if k == 0:\n        return []\n    return p[-k:]\n\n",
  "JavaScript/129": "def min_path(grid, k):\n\n    m = 0\n    n = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                m = i\n                n = j\n                break\n\n    min_val = len(grid) * len(grid)\n    if m > 0 and grid[m - 1][n] < min_val:\n        min_val = grid[m - 1][n]\n    if n > 0 and grid[m][n - 1] < min_val:\n        min_val = grid[m][n - 1]\n    if m < len(grid) - 1 and grid[m + 1][n] < min_val:\n        min_val = grid[m + 1][n]\n    if n < len(grid[0]) - 1 and grid[m][n + 1] < min_val:\n        min_val = grid[m][n + 1]\n\n    p = [1 if i % 2 == 0 else min_val for i in range(k)]\n    return p\n",
  "JavaScript/136": "def largest_smallest_integers(lst):\n    a = float('inf')\n    b = float('-inf')\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] < a:\n            a = lst[i]\n        if lst[i] < 0 and lst[i] > b:\n            b = lst[i]\n            \n    if a == float('inf'):\n        a = None\n    if b == float('-inf'):\n        b = None\n        \n    return (b, a)\n",
  "JavaScript/137": "def compare_one(a, b):\n\n    aa = float(a)\n    if isinstance(a, str):\n        aa = float(a.replace(',', '.'))\n    bb = float(b)\n    if isinstance(b, str):\n        bb = float(b.replace(',', '.'))\n    if aa > bb:\n        return a\n    if aa < bb:\n        return b\n    return None\n",
  "JavaScript/146": "def special_filter(nums):\n    p = 0\n    for num in nums:\n        if num < 10:\n            continue\n        num_str = str(num)\n        if int(num_str[0]) % 2 == 1 and int(num_str[-1]) % 2 == 1:\n            p += 1\n\n    return p\n",
  "JavaScript/148": "def find_planets_between(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    result = []\n    start_index = -1\n    end_index = -1\n    \n    for i in range(8):\n        if planets[i] == planet1:\n            start_index = i\n\n    for i in range(8):\n        if planets[i] == planet2:\n            end_index = i\n\n    if start_index == -1 or end_index == -1 or start_index == end_index:\n        return []\n\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n\n    for i in range(start_index + 1, end_index):\n        result.append(planets[i])\n\n    return result\n",
  "JavaScript/153": "def strongest_extension(class_name, extensions):\n    u = 0\n    s = float('-inf')\n    \n    for i in range(len(extensions) - 1, -1, -1):\n        y = 0\n        for j in range(len(extensions[i])):\n            k = ord(extensions[i][j])\n            if k >= 65 and k <= 90:\n                y += 1\n            if k >= 97 and k <= 122:\n                y -= 1\n        if y >= s:\n            s = y\n            u = i\n        \n    return class_name + '.' + extensions[u]\n",
  "JavaScript/155": "def even_odd_count(num):\n    o = 0\n    e = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        num = num // 10\n    return e, o\n"
}