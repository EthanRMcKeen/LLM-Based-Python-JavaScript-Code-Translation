{
  "Python/22": "const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n",
  "Python/23": "function strlen(string) {\n    return string.length;\n}\n",
  "Python/34": "const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => a - b);\n}  \n",
  "Python/37": "const sortEven = (l) => {\n  let evens = l.filter((_, index) => index % 2 === 0);\n  let odds = l.filter((_, index) => index % 2 !== 0);\n  evens.sort((a, b) => a - b);\n\n  let ans = [];\n  for (let i = 0; i < evens.length; i++) {\n    ans.push(evens[i]);\n    if (i < odds.length) {\n      ans.push(odds[i]);\n    }\n  }\n\n  if (evens.length > odds.length) {\n    ans.push(evens[evens.length - 1]);\n  }\n\n  return ans;\n}\n",
  "Python/54": "const sameChars = (s0, s1) => {\n    return new Set(s0).size === new Set(s1).size;\n}\n",
  "Python/58": "const common = (l1, l2) => {\n    let ret = new Set();\n    for (let e1 of l1) {\n        for (let e2 of l2) {\n            if (e1 === e2) {\n                ret.add(e1);\n            }\n        }\n    }\n    return Array.from(ret).sort((a, b) => a - b);\n}\n\nconst check = (func) => {\n    assertArraysEqual(func([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]), [1, 5, 653]);\n    assertArraysEqual(func([5, 3, 2, 8], [3, 2]), [2, 3]);\n    assertArraysEqual(func([4, 3, 2, 8], [3, 2, 4]), [2, 3, 4]);\n    assertArraysEqual(func([4, 3, 2, 8], []), []);\n}\n\ncheck(common);\n",
  "Python/60": "function sumToN(n) {\n  return n * (n + 1) / 2;\n}\n\nfunction checkSumToN(sumToN) {\n  assert(sumToN(0) === 0);\n  assert(sumToN(6) === 21);\n  assert(sumToN(11) === 66);\n  assert(sumToN(30) === 465);\n  assert(sumToN(100) === 5050);\n}\n\nfunction assert(condition) {\n  if (!condition) {\n    console.error(\"Assertion failed\");\n  }\n}\n\ncheckSumToN(sumToN);\n\n",
  "Python/66": "function digitSum(s) {\n    if (s === \"\") return 0;\n\n    return s.split('').reduce((sum, char) => {\n        return sum + (char.toUpperCase() === char ? char.charCodeAt(0) : 0);\n    }, 0);\n}\n",
  "Python/69": "function search(lst) {\n    let frq = Array.from({length: Math.max(...lst) + 1}, () => 0);\n    lst.forEach(i => frq[i]++);\n\n    let ans = -1;\n    for (let i = 1; i < frq.length; i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n\n    return ans;\n}\n",
  "Python/77": "const isCube = (a) => {\n    a = Math.abs(a);\n    return Math.pow(Math.round(Math.pow(a, 1 / 3)), 3) === a;\n}\n\nconst check = (isCube) => {\n    // Check some simple cases\n    console.assert(isCube(1) === true, \"First test error: \" + isCube(1));\n    console.assert(isCube(2) === false, \"Second test error: \" + isCube(2));\n    console.assert(isCube(-1) === true, \"Third test error: \" + isCube(-1));\n    console.assert(isCube(64) === true, \"Fourth test error: \" + isCube(64));\n    console.assert(isCube(180) === false, \"Fifth test error: \" + isCube(180));\n    console.assert(isCube(1000) === true, \"Sixth test error: \" + isCube(1000));\n\n    // Check some edge cases that are easy to work out by hand.\n    console.assert(isCube(0) === true, \"1st edge test error: \" + isCube(0));\n    console.assert(isCube(1728) === true, \"2nd edge test error: \" + isCube(1728));\n}\n\ncheck(isCube);\n\n",
  "Python/84": "const solve = (N) => {\n  return (N.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0).toString(2));\n}\n",
  "Python/87": "const getRow = (lst, x) => {\n    let coords = lst.flatMap((row, i) =>\n        row.map((val, j) => val === x ? [i, j] : null)\n    ).filter(Boolean);\n\n    return coords.sort((a, b) => {\n        if (a[0] === b[0]) {\n            return a[1] - b[1];\n        } else {\n            return b[0] - a[0];\n        }\n    }).sort((a, b) => a[0] - b[0]);\n};\n",
  "Python/88": "const sortArray = (array) => {\n  return array.length === 0 ? [] : array.slice().sort((a, b) => (a + b) % 2 === 0 ? b - a : a - b);\n}\n",
  "Python/90": "function nextSmallest(lst) {\n    lst = [...new Set(lst)].sort((a, b) => a - b);\n    return (lst.length < 2) ? null : lst[1];\n}\n",
  "Python/93": "const encodeMessage = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries([...vowels].map(i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n    message = message.split('').map(char => {\n        if (vowels.includes(char)) {\n            return vowelsReplace[char];\n        } else if (vowels.includes(char.toLowerCase())) {\n            return vowelsReplace[char.toLowerCase()].toUpperCase();\n        }\n        return char;\n    }).join('');\n    return message;\n}\n",
  "Python/100": "const makeAPile = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(n + 2 * i);\n  }\n  return result;\n}\n\nconst check = (makeAPile) => {\n  assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]), \"Test 3\");\n  assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]), \"Test 4\");\n  assert(JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13]));\n  assert(JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16]));\n  assert(JSON.stringify(makeAPile(8)) === JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22]));\n\n  assert(true, \"This prints if this assert fails 2 (also good for debugging!)\");\n}\n\ncheck(makeAPile);\n",
  "Python/101": "function wordsString(s) {\n    if (!s) {\n        return [];\n    }\n\n    const sList = [];\n\n    for (let char of s) {\n        if (char === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(char);\n        }\n    }\n\n    const stringWithSpaces = sList.join('');\n    return stringWithSpaces.split(' ');\n}\n",
  "Python/103": "const roundedAvg = (n, m) => {\n\n    if (m < n) {\n        return -1;\n    }\n\n    let summation = 0;\n    for (let i = n; i <= m; i++) {\n        summation += i;\n    }\n\n    return (summation / (m - n + 1)).toString(2);\n}\n",
  "Python/105": "const byLength = (arr) => {\n    const dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    };\n\n    const sortedArr = arr.slice().sort((a, b) => b - a);\n    const newArr = [];\n    for (let val of sortedArr) {\n        if (dic[val]) {\n            newArr.push(dic[val]);\n        }\n    }\n    return newArr;\n};\n",
  "Python/107": "const evenOddPalindrome = (n) => {\n\n  const isPalindrome = (num) => {\n    return num.toString() === num.toString().split('').reverse().join('');\n  }\n\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1 && isPalindrome(i)) {\n      oddPalindromeCount++;\n    } else if (i % 2 === 0 && isPalindrome(i)) {\n      evenPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n}\n",
  "Python/108": "const countNums = (arr) => {\n\n  const digitsSum = (n) => {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a, b) => a + b, 0);\n  }\n\n  return arr.filter(x => x > 0).map(i => digitsSum(i)).length;\n}\n",
  "Python/117": "const selectWords = (s, n) => {\n    let result = [];\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    \n    s.split(\" \").forEach(word => {\n        let nConsonants = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (vowels.indexOf(word[i].toLowerCase()) === -1) {\n                nConsonants += 1;\n            }\n        }\n        if (nConsonants === n) {\n            result.push(word);\n        }\n    });\n\n    return result;\n}\n\nconst check = (selectWords) => {\n    assert(JSON.stringify(selectWords(\"Mary had a little lamb\", 4)), JSON.stringify([\"little\"]), \"First test error: \" + JSON.stringify(selectWords(\"Mary had a little lamb\", 4)));\n    assert(JSON.stringify(selectWords(\"Mary had a little lamb\", 3)), JSON.stringify([\"Mary\", \"lamb\"]), \"Second test error: \" + JSON.stringify(selectWords(\"Mary had a little lamb\", 3)));\n    assert(JSON.stringify(selectWords(\"simple white space\", 2)), JSON.stringify([]), \"Third test error: \" + JSON.stringify(selectWords(\"simple white space\", 2)));\n    assert(JSON.stringify(selectWords(\"Hello world\", 4)), JSON.stringify([\"world\"]), \"Fourth test error: \" + JSON.stringify(selectWords(\"Hello world\", 4));\n    assert(JSON.stringify(selectWords(\"Uncle sam\", 3)), JSON.stringify([\"Uncle\"]), \"Fifth test error: \" + JSON.stringify(selectWords(\"Uncle sam\", 3)));\n\n    assert(JSON.stringify(selectWords(\"\", 4)), JSON.stringify([]), \"1st edge test error: \" + JSON.stringify(selectWords(\"\", 4));\n    assert(JSON.stringify(selectWords(\"a b c d e f\", 1)), JSON.stringify([\"b\", \"c\", \"d\", \"f\"]), \"2nd edge test error: \" + JSON.stringify(selectWords(\"a b c d e f\", 1));\n}\n\ncheck(selectWords);\n\n",
  "Python/118": "const getClosestVowel = (word) => {\n    if (word.length < 3) {\n        return \"\";\n    }\n\n    const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n    for (let i = word.length - 3; i > 0; i--) {\n        if (vowels.has(word[i])) {\n            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n",
  "Python/132": "const isNested = (string) => {\n    let openingBracketIndex = [];\n    let closingBracketIndex = [];\n    \n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openingBracketIndex.push(i);\n        } else if (string[i] === ']') {\n            closingBracketIndex.push(i);\n        }\n    }\n    closingBracketIndex.reverse();\n    \n    let count = 0;\n    let index = 0;\n    const length = closingBracketIndex.length;\n    \n    for (let idx of openingBracketIndex) {\n        if (index < length && idx < closingBracketIndex[index]) {\n            count++;\n            index++;\n        }\n    }\n    \n    return count >= 2;\n}\n\nconst checkIsNested = (isNested) => {\n    // Check some simple cases\n    console.assert(isNested('[[]]') === true, \"This prints if this assert fails 1 (good for debugging!)\");\n    console.assert(isNested('[]]]]]]][[[[[]') === false);\n    console.assert(isNested('[][]') === false);\n    console.assert(isNested('[]') === false);\n    console.assert(isNested('[[[[]]]]') === true);\n    console.assert(isNested('[]]]]]]]]]]') === false);\n    console.assert(isNested('[][][[]]') === true);\n    console.assert(isNested('[[]') === false);\n    console.assert(isNested('[]]') === false);\n    console.assert(isNested('[[]][[') === true);\n    console.assert(isNested('[[][]]') === true);\n\n    // Check some edge cases that are easy to work out by hand.\n    console.assert(isNested('') === false, \"This prints if this assert fails 2 (also good for debugging!)\");\n    console.assert(isNested('[[[[[[[[') === false);\n    console.assert(isNested(']]]]]]]]') === false);\n}\n\ncheckIsNested(isNested);\n\n",
  "Python/136": "const largestSmallestIntegers = (lst) => {\n\n  const smallest = lst.filter(x => x < 0);\n  const largest = lst.filter(x => x > 0);\n  return [(smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null)];\n\n};",
  "Python/141": "const fileNameCheck = (fileName) => {\n    const allowedExtensions = ['txt', 'exe', 'dll'];\n    const parts = fileName.split('.');\n    \n    if (parts.length !== 2) return 'No';\n    if (!allowedExtensions.includes(parts[1])) return 'No';\n    if (parts[0].length === 0) return 'No';\n    if (!isNaN(parts[0][0])) return 'No';\n    \n    const digitCount = parts[0].split('').filter(char => !isNaN(parseInt(char))).length;\n    if (digitCount > 3) return 'No';\n    \n    return 'Yes';\n}\n\nconst check = (fileNameCheck) => {\n    assert(fileNameCheck(\"example.txt\") === 'Yes');\n    assert(fileNameCheck(\"1example.dll\") === 'No');\n    assert(fileNameCheck('s1sdf3.asd') === 'No');\n    assert(fileNameCheck('K.dll') === 'Yes');\n    assert(fileNameCheck('MY16FILE3.exe') === 'Yes');\n    assert(fileNameCheck('His12FILE94.exe') === 'No');\n    assert(fileNameCheck('_Y.txt') === 'No');\n    assert(fileNameCheck('?aREYA.exe') === 'No');\n    assert(fileNameCheck('/this_is_valid.dll') === 'No');\n    assert(fileNameCheck('this_is_valid.wow') === 'No');\n    assert(fileNameCheck('this_is_valid.txt') === 'Yes');\n    assert(fileNameCheck('this_is_valid.txtexe') === 'No');\n    assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No');\n    assert(fileNameCheck('@this1_is6_valid.exe') === 'No');\n    assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No');\n    assert(fileNameCheck('all.exe.txt') === 'No');\n    assert(fileNameCheck('I563_No.exe') === 'Yes');\n    assert(fileNameCheck('Is3youfault.txt') === 'Yes');\n    assert(fileNameCheck('no_one#knows.dll') === 'Yes');\n    assert(fileNameCheck('1I563_Yes3.exe') === 'No');\n    assert(fileNameCheck('I563_Yes3.txtt') === 'No');\n    assert(fileNameCheck('final..txt') === 'No');\n    assert(fileNameCheck('final132') === 'No');\n    assert(fileNameCheck('_f4indsartal132.') === 'No');\n    assert(fileNameCheck('.txt') === 'No');\n    assert(fileNameCheck('s.') === 'No');\n}\n\ncheck(fileNameCheck);\n \n\nI have corrected the translation of the code.",
  "Python/149": "function sortedListSum(lst) {\n    lst.sort();\n    const newLst = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newLst.push(i);\n        }\n    }\n    return newLst.sort((a, b) => a.length - b.length);\n}\n",
  "Python/153": "const Strongest_Extension = (class_name, extensions) => {\n\n  let strong = extensions[0];\n  let my_val = extensions[0].match(/[A-Z]/g).length - extensions[0].match(/[a-z]/g).length;\n\n  for (let s of extensions) {\n    let val = s.match(/[A-Z]/g).length - s.match(/[a-z]/g).length;\n    if (val > my_val) {\n        strong = s;\n        my_val = val;\n    }\n  }\n\n  let ans = `${class_name}.${strong}`;\n  return ans;\n}\n\n",
  "Python/154": "function cycpatternCheck(a, b) {\n    const l = b.length;\n    const pat = b + b;\n    for (let i = 0; i < a.length - l + 1; i++) {\n        for (let j = 0; j < l; j++) {\n            if (a.slice(i, i + l) === pat.slice(j, j + l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "Python/155": "function evenOddCount(num) {\n    let evenCount = 0;\n    let oddCount = 0;\n    for (let i of Math.abs(num).toString()) {\n        if (parseInt(i) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n",
  "Python/156": "const intToMiniRoman = (number) => {\n  const num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  const sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n  let i = 12;\n  let res = '';\n  \n  while (number) {\n    const div = Math.floor(number / num[i]);\n    number %= num[i];\n    \n    while (div) {\n      res += sym[i];\n      div--;\n    }\n    i--;\n  }\n  \n  return res.toLowerCase();\n}\n\n",
  "Python/157": "function rightAngleTriangle(a, b, c) {\n    return a*a === b*b + c*c || b*b === a*a + c*c || c*c === a*a + b*b;\n}\n",
  "Python/158": "const findMax = (words) => {\n    return words.sort((a, b) => {\n        return new Set(b).size - new Set(a).size || a.localeCompare(b);\n    })[0];\n}\n",
  "Python/160": "const doAlgebra = (operator, operand) => {\n\n  let expression = String(operand[0]);\n  for (let i = 0; i < operator.length; i++) {\n    expression += operator[i] + String(operand[i + 1]);\n  }\n  return eval(expression);\n}\n  "
}