{
  "0": "function hasCloseElements(numbers, threshold) {\n    for (let idx = 0; idx < numbers.length; idx++) {\n        for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n            if (idx !== idx2) {\n                let distance = Math.abs(numbers[idx] - numbers[idx2]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false);\nconsole.log(hasCloseElements([1.0, 2.0, 3.0], 2.5) === true);\nconsole.log(hasCloseElements([10.5, 8.3, 6.7, 9.2], 1.0) === true);\nconsole.log(hasCloseElements([4.0, 8.0, 12.0, 16.0], 3.0) === false);",
  "1": "function separateParenGroups(parenString) {\n    let result = [];\n    let currentString = [];\n    let currentDepth = 0;\n\n    for (let i = 0; i < parenString.length; i++) {\n        let c = parenString[i];\n        if (c === '(') {\n            currentDepth++;\n            currentString.push(c);\n        } else if (c === ')') {\n            currentDepth--;\n            currentString.push(c);\n\n            if (currentDepth === 0) {\n                result.push(currentString.join(''));\n                currentString = [];\n            }\n        }\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(separateParenGroups(\"((()))()\")); // [\"((()))\", \"()\"]\nconsole.log(separateParenGroups(\"(())(()())\")); // [\"(())\", \"(()())\"]\nconsole.log(separateParenGroups(\"()()()()\")); // [\"()\", \"()\", \"()\", \"()\"]",
  "2": "function truncateNumber(number) {\n    return number % 1.0;\n}\n\n// Test cases\nconsole.log(truncateNumber(3.14) === 0.14000000000000012);\nconsole.log(truncateNumber(7.0) === 0.0);\nconsole.log(truncateNumber(123.456) === 0.45600000000000307);\nconsole.log(truncateNumber(0.5) === 0.5);\n```  ",
  "3": "function belowZero(operations) {\n    let balance = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Test cases\nconsole.log(belowZero([1, 2, 3, 4, 5]) === false);\nconsole.log(belowZero([-1, -2, -3, -4, -5]) === true);\nconsole.log(belowZero([10, 10, 10, 10, 10]) === false);",
  "4": "function meanAbsoluteDeviation(numbers) {\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    return numbers.reduce((acc, val) => acc + Math.abs(val - mean), 0) / numbers.length;\n}\n\n// Test cases\nconsole.log(meanAbsoluteDeviation([1, 2, 3, 4, 5]) === 1.2);\nconsole.log(meanAbsoluteDeviation([10, 20, 30, 40, 50]) === 12.0);\nconsole.log(meanAbsoluteDeviation([3, 7, 11, 15, 19]) === 4.8);\n```  ",
  "5": "function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    let result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}\n\n// Test cases\nconsole.log(JSON.stringify(intersperse([], 0)) === JSON.stringify([]));\nconsole.log(JSON.stringify(intersperse([1, 2, 3], 0)) === JSON.stringify([1, 0, 2, 0, 3]));\nconsole.log(JSON.stringify(intersperse([5, 6, 7, 8], 9)) === JSON.stringify([5, 9, 6, 9, 7, 9, 8]));\nconsole.log(JSON.stringify(intersperse([-1, -2, -3, -4], -5)) === JSON.stringify([-1, -5, -2, -5, -3, -5, -4]));\nconsole.log(JSON.stringify(intersperse([10], 20)) === JSON.stringify([10]));",
  "6": "function parseNestedParens(parenString) {\n    function parseParenGroup(s) {\n        let depth = 0;\n        let maxDepth = 0;\n        for (let c of s) {\n            if (c === '(') {\n                depth++;\n                maxDepth = Math.max(depth, maxDepth);\n            } else {\n                depth--;\n            }\n        }\n        return maxDepth;\n    }\n\n    return parenString.split(' ')\n        .filter(x => x)\n        .map(x => parseParenGroup(x));\n}\n\n// Test cases\nconsole.log(parseNestedParens(\"\") + ' is ' + JSON.stringify([]));\nconsole.log(parseNestedParens(\"()\") + ' is ' + JSON.stringify([1]));\nconsole.log(parseNestedParens(\"(()) ()\") + ' is ' + JSON.stringify([2, 1]));\nconsole.log(parseNestedParens(\"() () ()\") + ' is ' + JSON.stringify([1, 1, 1]));\n```  ",
  "7": "function filterBySubstring(strings, substring) {\n    return strings.filter(x => x.includes(substring));\n}\n\n// Test cases\nconsole.log(filterBySubstring(['cat', 'dog', 'fish', 'rabbit'], 'at')); // ['cat']\nconsole.log(filterBySubstring(['alpha', 'beta', 'gamma'], 'm')); // ['gamma']\nconsole.log(filterBySubstring(['sun', 'moon', 'stars'], 's')); // ['sun', 'stars']",
  "8": "function sumProduct(numbers) {\n    let sumValue = 0;\n    let prodValue = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sumValue += numbers[i];\n        prodValue *= numbers[i];\n    }\n    return [sumValue, prodValue];\n}\n\n// Test cases\nconsole.log(JSON.stringify(sumProduct([1, 2, 3])) === JSON.stringify([6, 6]));\nconsole.log(JSON.stringify(sumProduct([0, 4, 5])) === JSON.stringify([9, 0]));\nconsole.log(JSON.stringify(sumProduct([10, 2, 1])) === JSON.stringify([13, 20]));\nconsole.log(JSON.stringify(sumProduct([3, 3, 3])) === JSON.stringify([9, 27]));\nconsole.log(JSON.stringify(sumProduct([-1, 2, -3])) === JSON.stringify([-2, 6]));\n```  ",
  "9": "function rollingMax(numbers) {\n    let runningMax = null;\n    let result = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}\n\n// Test cases\nconsole.log(JSON.stringify(rollingMax([1, 3, 5, 2, 4, 6, 3])) === JSON.stringify([1, 3, 5, 5, 5, 6, 6]));\nconsole.log(JSON.stringify(rollingMax([10, 9, 8, 7, 6, 5])) === JSON.stringify([10, 10, 10, 10, 10, 10]));\nconsole.log(JSON.stringify(rollingMax([3, 3, 3, 3, 3])) === JSON.stringify([3, 3, 3, 3, 3]));\nconsole.log(JSON.stringify(rollingMax([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]));\nconsole.log(JSON.stringify(rollingMax([5, 4, 3, 2, 1])) === JSON.stringify([5, 5, 5, 5, 5]));",
  "10": "function isPalindrome(string) {\n    return string === string.split('').reverse().join('');\n}\n\nfunction makePalindrome(string) {\n    if (!string) {\n        return '';\n    }\n\n    let beginningOfSuffix = 0;\n\n    while (!isPalindrome(string.substring(beginningOfSuffix))) {\n        beginningOfSuffix++;\n    }\n\n    return string + string.substring(0, beginningOfSuffix).split('').reverse().join('');\n}\n\n// Test cases\nconsole.log(makePalindrome(\"racecar\") === \"racecar\");\nconsole.log(makePalindrome(\"level\") === \"level\");\nconsole.log(makePalindrome(\"noon\") === \"noon\");\nconsole.log(makePalindrome(\"python\") === \"pythonohtyp\");",
  "11": "function stringXOR(a, b) {\n    function xor(i, j) {\n        if (i === j) {\n            return '0';\n        } else {\n            return '1';\n        }\n    }\n\n    return a.split('').map((x, index) => xor(x, b.charAt(index))).join('');\n}\n\nconsole.log(stringXOR('111', '000') === '111');\nconsole.log(stringXOR('1010101', '1111000') === '0101101');\nconsole.log(stringXOR('1100', '0011') === '1111');\nconsole.log(stringXOR('01010101', '10101010') === '11111111');\nconsole.log(stringXOR('1001', '0110') === '1111');",
  "12": "function longest(strings) {\n  if (!strings.length) {\n    return null;\n  }\n\n  const maxLength = Math.max(...strings.map(s => s.length));\n  for (let s of strings) {\n    if (s.length === maxLength) {\n      return s;\n    }\n  }\n}\n\n// Test cases\nconsole.log(longest([\"apple\", \"banana\", \"kiwi\", \"cherry\"]) === \"banana\");\nconsole.log(longest([\"cat\", \"dog\", \"lion\", \"elephant\"]) === \"elephant\");\nconsole.log(longest([\"blue\", \"red\", \"green\", \"yellow\"]) === \"yellow\");\nconsole.log(longest([\"python\", \"java\", \"javascript\", \"php\"]) === \"javascript\");\nconsole.log(longest([\"Tokyo\", \"Paris\", \"London\", \"New York\"]) === \"New York\");",
  "13": "function greatestCommonDivisor(a, b) {\n    while (b) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}\n\n// Test cases\nconsole.log(greatestCommonDivisor(12, 18) === 6);\nconsole.log(greatestCommonDivisor(24, 36) === 12);\nconsole.log(greatestCommonDivisor(17, 23) === 1);\nconsole.log(greatestCommonDivisor(50, 75) === 25);\nconsole.log(greatestCommonDivisor(81, 27) === 27);",
  "14": "function allPrefixes(string) {\n    let result = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.slice(0, i + 1));\n    }\n    return result;\n}\n\n// Test cases\nconsole.log(JSON.stringify(allPrefixes(\"hello\")) === JSON.stringify([\"h\", \"he\", \"hel\", \"hell\", \"hello\"]));\nconsole.log(JSON.stringify(allPrefixes(\"world\")) === JSON.stringify([\"w\", \"wo\", \"wor\", \"worl\", \"world\"]));\nconsole.log(JSON.stringify(allPrefixes(\"python\")) === JSON.stringify([\"p\", \"py\", \"pyt\", \"pyth\", \"pytho\", \"python\"]));\nconsole.log(JSON.stringify(allPrefixes(\"test\")) === JSON.stringify([\"t\", \"te\", \"tes\", \"test\"]));\nconsole.log(JSON.stringify(allPrefixes(\"12345\")) === JSON.stringify([\"1\", \"12\", \"123\", \"1234\", \"12345\"]));\n```  ",
  "15": "function stringSequence(n) {\n    return Array.from({length: n + 1}, (_, i) => i).join(' ');\n}\n\n// Test cases\nconsole.log(stringSequence(0) === '0');\nconsole.log(stringSequence(1) === '0 1');\nconsole.log(stringSequence(5) === '0 1 2 3 4 5');\nconsole.log(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10');\nconsole.log(stringSequence(3) === '0 1 2 3');\n```  ",
  "16": "function countDistinctCharacters(string) {\n    return new Set(string.toLowerCase()).size;\n}\n\n// Test cases\nconsole.log(countDistinctCharacters(\"Hello World\") === 8);\nconsole.log(countDistinctCharacters(\"Hello\") === 4);\nconsole.log(countDistinctCharacters(\"abcABC\") === 3);",
  "17": "function parseMusic(musicString) {\n    const noteMap = {'o': 4, 'o|': 2, '.|': 1};\n    return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}\n\n// Test cases\nconsole.log(JSON.stringify(parseMusic(\"o o| o o| o o| o o|\")) === JSON.stringify([4, 2, 4, 2, 4, 2, 4, 2]));",
  "18": "function howManyTimes(string, substring) {\n    let times = 0;\n\n    for (let i = 0; i < string.length - substring.length + 1; i++) {\n        if (string.slice(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n\n    return times;\n}\n\n// Test cases\nconsole.log(howManyTimes(\"hellohellohello\", \"hello\") === 3);\nconsole.log(howManyTimes(\"aaaaaa\", \"aa\") === 5);\nconsole.log(howManyTimes(\"abcabcabcabc\", \"abc\") === 4);\nconsole.log(howManyTimes(\"12345\", \"6\") === 0);\nconsole.log(howManyTimes(\"wassup\", \"sup\") === 1);\n```  ",
  "19": "function sortNumbers(numbers) {\n    const valueMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').filter(x => x).sort((a, b) => valueMap[a] - valueMap[b]).join(' ');\n}\n\n// Test cases\nconsole.log(sortNumbers(\"five zero two three\") === \"zero two three five\");\nconsole.log(sortNumbers(\"seven one four\") === \"one four seven\");\nconsole.log(sortNumbers(\"eight zero five six five\") === \"zero five five six eight\");\nconsole.log(sortNumbers(\"three two one nine\") === \"one two three nine\");\nconsole.log(sortNumbers(\"four seven six\") === \"four six seven\");",
  "20": "function findClosestElements(numbers) {\n    let closestPair = null;\n    let distance = null;\n\n    for(let i = 0; i < numbers.length; i++) {\n        for(let j = 0; j < numbers.length; j++) {\n            if (i !== j) {\n                if (distance === null) {\n                    distance = Math.abs(numbers[i] - numbers[j]);\n                    closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                } else {\n                    let newDistance = Math.abs(numbers[i] - numbers[j]);\n                    if (newDistance < distance) {\n                        distance = newDistance;\n                        closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                    }\n                }\n            }\n        }\n    }\n\n    return closestPair;\n}\n\n// Test cases\nconsole.log(findClosestElements([10.5, 5.5, 20.5, 25.5)); // Output: [5.5, 10.5]\nconsole.log(findClosestElements([12.5, 15.5, 14.3, 16.8])); // Output: [14.3, 15.5]\nconsole.log(findClosestElements([3.5, 5.5, 0.0, 4.5, 10.2])); // Output: [3.5, 4.5]",
  "21": "function rescaleToUnit(numbers) {\n    const minNumber = Math.min(...numbers);\n    const maxNumber = Math.max(...numbers);\n    return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}\n\n// Test cases\nconsole.log(rescaleToUnit([1, 2, 3, 4, 5])); // [0, 0.25, 0.5, 0.75, 1]\nconsole.log(rescaleToUnit([10, 20, 30, 40, 50])); // [0, 0.25, 0.5, 0.75, 1]\nconsole.log(rescaleToUnit([5, 15, 25, 35, 45])); // [0, 0.25, 0.5, 0.75, 1]\nconsole.log(rescaleToUnit([100, 200, 300, 400, 500])); // [0, 0.25, 0.5, 0.75, 1]\n```  ",
  "22": "function filterIntegers(values) {\n    return values.filter(x => Number.isInteger(x));\n}\n\n// Test cases\nconsole.log(filterIntegers([1, 2, 3, 4, 5])); // [1, 2, 3, 4, 5]\nconsole.log(filterIntegers([1, 'a', 2.5, 3, 'b', 4])); // [1, 3, 4]\nconsole.log(filterIntegers([])); // []\nconsole.log(filterIntegers(['a', 'b', 'c'])); // []\nconsole.log(filterIntegers([-3, -2, -1, 0, 1, 2, 3])); // [-3, -2, -1, 0, 1, 2, 3]",
  "23": "function stringLength(string) {\n    return string.length;\n}\n\n// Test cases\nconsole.log(stringLength(\"hello\") === 5);\nconsole.log(stringLength(\"\") === 0);\nconsole.log(stringLength(\"python\") === 6);\nconsole.log(stringLength(\"12345\") === 5);\nconsole.log(stringLength(\"testing 123!\") === 12);",
  "24": "function largestDivisor(n) {\n    for (let i = n; i >= 1; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}\n\n// Test cases\nconsole.log(largestDivisor(10) === 5);\nconsole.log(largestDivisor(15) === 5);\nconsole.log(largestDivisor(21) === 7);\nconsole.log(largestDivisor(28) === 14);\nconsole.log(largestDivisor(36) === 18);",
  "25": "function factorize(n) {\n    const fact = [];\n    let i = 2;\n    while (i <= Math.sqrt(n) + 1) {\n        if (n % i == 0) {\n            fact.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n\n    if (n > 1) {\n        fact.push(n);\n    }\n    return fact;\n}\n\n// Test cases\nconsole.log(factorize(10));  // Output: [2, 5]\nconsole.log(factorize(21));  // Output: [3, 7]\nconsole.log(factorize(56));  // Output: [2, 2, 2, 7]\nconsole.log(factorize(100)); // Output: [2, 2, 5, 5]\nconsole.log(factorize(999)); // Output: [3, 3, 3, 37]",
  "26": "function removeDuplicates(numbers) {\n    const counter = numbers.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n    }, {});\n\n    return numbers.filter(num => counter[num] <= 1);\n}\n\n// Test cases\nconsole.log(JSON.stringify(removeDuplicates([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]));\nconsole.log(JSON.stringify(removeDuplicates([1, 2, 2, 3, 4, 5, 5])) === JSON.stringify([1, 3, 4]));\nconsole.log(JSON.stringify(removeDuplicates([1, 1, 1, 1, 1])) === JSON.stringify([]));\nconsole.log(JSON.stringify(removeDuplicates([])) === JSON.stringify([]));\nconsole.log(JSON.stringify(removeDuplicates([-1, 0, 1, 2, -1, 3, 4, 4])) === JSON.stringify([0, 1, 2, 3]));",
  "27": "function flipCase(string) {\n    return string.split('').map(char => {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join('');\n}\n\n// Test cases\nconsole.log(flipCase(\"Hello World\") === \"hELLO wORLD\");\nconsole.log(flipCase(\"123abcXYZ\") === \"123ABCxyz\");\nconsole.log(flipCase(\"Python Programming\") === \"pYTHON pROGRAMMING\");\nconsole.log(flipCase(\"abc123\") === \"ABC123\");\nconsole.log(flipCase(\"eXaMpLe\") === \"ExAmPlE\");\n```  ",
  "28": "function concatenate(strings) {\n    return strings.join('');\n}\n\n// Test cases\nconsole.log(concatenate(['hello', 'world']) === 'helloworld');\nconsole.log(concatenate(['Python', 'is', 'awesome']) === 'Pythonisawesome');\nconsole.log(concatenate(['test', 'case']) === 'testcase');\nconsole.log(concatenate(['123', '456']) === '123456');\nconsole.log(concatenate([]) === '');",
  "29": "function filterByPrefix(strings, prefix) {\n    return strings.filter(x => x.startsWith(prefix));\n}\n\n// Test cases\nconsole.log(filterByPrefix(['apple', 'banana', 'cherry'], 'b')); // ['banana']\nconsole.log(filterByPrefix(['hello', 'world', 'python'], 'p')); // ['python']\nconsole.log(filterByPrefix(['cat', 'dog', 'elephant'], 'd')); // ['dog']\nconsole.log(filterByPrefix(['green', 'blue', 'yellow'], 'y')); // ['yellow']\nconsole.log(filterByPrefix(['car', 'bus', 'bike'], 'c')); // ['car']",
  "30": "function getPositive(arr) {\n    return arr.filter(e => e > 0);\n}\n\n// Test cases\nconsole.log(JSON.stringify(getPositive([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]));\nconsole.log(JSON.stringify(getPositive([-1, -2, 3, -4, 5])) === JSON.stringify([3, 5]));\nconsole.log(JSON.stringify(getPositive([-10, -20, -30])) === JSON.stringify([]));\nconsole.log(JSON.stringify(getPositive([0, 0, 0, 0])) === JSON.stringify([]));\nconsole.log(JSON.stringify(getPositive([7, -8, 9, -10])) === JSON.stringify([7, 9]));\n```  ",
  "31": "function isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let k = 2; k < n - 1; k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(isPrime(2) === true);\nconsole.log(isPrime(3) === true);\nconsole.log(isPrime(7) === true);\nconsole.log(isPrime(10) === false);\nconsole.log(isPrime(13) === true);",
  "32": "function poly(xs, x) {\n    /**\n     * Evaluates polynomial with coefficients xs at point x.\n     * returns xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    return xs.reduce((acc, coeff, i) => acc + coeff * Math.pow(x, i), 0);\n}\n\nfunction findZero(xs) {\n    let begin = -1.0;\n    let end = 1.0;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.0;\n        end *= 2.0;\n    }\n    while (end - begin > 1e-10) {\n        let center = (begin + end) / 2.0;\n        if (poly(xs, center) * poly(xs, begin) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\nconsole.log(Math.abs(findZero([1, 0, -1]) + 1.0) < 1e-9);",
  "33": "function sortThird(arr) {\n    const list = arr.slice();\n    list.filter((_, index) => index % 3 === 0).sort((a, b) => a - b).forEach((value, index) => {\n        list.splice(index * 3, 1, value);\n    });\n    return list;\n}\n\nconsole.log(sortThird([10, 20, 30, 40, 50, 60])); // [10, 20, 30, 40, 50, 60]",
  "34": "function unique(l) {\n    return [...new Set(l)].sort((a, b) => a - b);\n}\n\nconsole.log(JSON.stringify(unique([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]));\nconsole.log(JSON.stringify(unique([3, 3, 5, 1, 3])) === JSON.stringify([1, 3, 5]));\nconsole.log(JSON.stringify(unique([7, 7, 7, 7, 7])) === JSON.stringify([7]));\nconsole.log(JSON.stringify(unique([])) === JSON.stringify([]));\nconsole.log(JSON.stringify(unique([-5, 0, 2, -3, 2, 0, -5])) === JSON.stringify([-5, -3, 0, 2]));\n```  ",
  "35": "function maxElement(arr) {\n    let m = arr[0];\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > m) {\n            m = arr[i];\n        }\n    }\n\n    return m;\n}\n\n// Test cases\nconsole.log(maxElement([12, 34, 56, 78, 90]) === 90);\nconsole.log(maxElement([5, 3, 11, 17, 2, 8]) === 17);\nconsole.log(maxElement([99, 88, 77, 66, 55, 44]) === 99);\nconsole.log(maxElement([-5, -12, -7, -3, -9]) === -3);\nconsole.log(maxElement([2]) === 2);",
  "36": "function fizzBuzz(n) {\n    let ns = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            ns.push(i);\n        }\n    }\n    let s = ns.map(String).join('');\n    let ans = 0;\n    for (let c of s) {\n        ans += (c === '7') ? 1 : 0;\n    }\n    return ans;\n}\n\nconsole.log(fizzBuzz(20) === 0);\nconsole.log(fizzBuzz(200) === 6);\n```  ",
  "37": "function sortEven(l) {\n    const evens = l.filter((_, idx) => idx % 2 === 0);\n    const odds = l.filter((_, idx) => idx % 2 !== 0);\n    evens.sort((a, b) => a - b);\n    const ans = [];\n    for (let i = 0; i < evens.length; i++) {\n        ans.push(evens[i]);\n        ans.push(odds[i]);\n    }\n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n    return ans;\n}\n\n// Test cases\nconsole.log(sortEven([6, 4, 2, 8, 10])); // [2, 4, 6, 8, 10]\nconsole.log(sortEven([1, 3, 5, 7, 9, 11])); // [1, 3, 5, 7, 9, 11]\n```  ",
  "38": "function encodeCyclic(s) {\n    /**\n     * returns encoded string by cycling groups of three characters.\n     */\n    // split string to groups. Each of length 3.\n    const groups = Array.from({ length: Math.ceil(s.length / 3) }, (_, i) => s.slice(3 * i, 3 * i + 3));\n    // cycle elements in each group. Unless group has fewer elements than 3.\n    const cyclicGroups = groups.map(group => (group.length === 3 ? group.slice(1) + group[0] : group));\n    return cyclicGroups.join(\"\");\n}\n\nfunction decodeCyclic(s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n\n// Test cases\nconsole.log(encodeCyclic(\"abc\") === \"bca\");  // Output should be true",
  "39": "function primeFib(n) {\n\n    function isPrime(p) {\n        if (p < 2) {\n            return false;\n        }\n        for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n            if (p % k === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let f = [0, 1];\n    while (true) {\n        f.push(f[f.length - 1] + f[f.length - 2]);\n        if (isPrime(f[f.length - 1])) {\n            n -= 1;\n        }\n        if (n === 0) {\n            return f[f.length - 1];\n        }\n    }\n}\n\nconsole.log(primeFib(1)); // Output: 2\nconsole.log(primeFib(2)); // Output: 3",
  "40": "function triplesSumToZero(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n                if (arr[i] + arr[j] + arr[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(triplesSumToZero([1, 2, 3, 4, 5]) === false);\nconsole.log(triplesSumToZero([-1, 2, 3, -2, 1]) === true);\nconsole.log(triplesSumToZero([0, 0, 0, 0, 0]) === true);\nconsole.log(triplesSumToZero([0, 1, 2, 3, 4, -5, -3]) === true);\nconsole.log(triplesSumToZero([-1, -2, -3, -4, -5]) === false);",
  "41": "function carRaceCollision(n) {\n    return Math.pow(n, 2);\n}\n\n// Test cases\nconsole.log(carRaceCollision(0) === 0);\nconsole.log(carRaceCollision(1) === 1);\nconsole.log(carRaceCollision(2) === 4);\nconsole.log(carRaceCollision(5) === 25);\nconsole.log(carRaceCollision(10) === 100);",
  "42": "function incrList(l) {\n    return l.map(e => e + 1);\n}\n\n// Test cases\nconsole.log(JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4]));\nconsole.log(JSON.stringify(incrList([0, 10, 20])) === JSON.stringify([1, 11, 21]));\nconsole.log(JSON.stringify(incrList([-1, -2, -3])) === JSON.stringify([0, -1, -2]));\nconsole.log(JSON.stringify(incrList([5, 5, 5])) === JSON.stringify([6, 6, 6]));\nconsole.log(JSON.stringify(incrList([])) === JSON.stringify([]));",
  "43": "function pairsSumToZero(l) {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(pairsSumToZero([1, 2, 3, -3]) === true);\nconsole.log(pairsSumToZero([0, 1, 2, 3]) === false);\nconsole.log(pairsSumToZero([0, 0, 0, 0]) === true);\nconsole.log(pairsSumToZero([1, -1]) === true);\n```  ",
  "44": "function changeBase(x, base) {\n    let ret = \"\";\n    while (x > 0) {\n        ret = (x % base) + ret;\n        x = Math.floor(x / base);\n    }\n    return ret;\n}\n\n// Test cases\nconsole.log(changeBase(10, 2) === \"1010\");\nconsole.log(changeBase(16, 16) === \"10\");\nconsole.log(changeBase(255, 8) === \"377\");\nconsole.log(changeBase(100, 5) === \"400\");\nconsole.log(changeBase(42, 7) === \"60\");",
  "45": "function triangleArea(a, h) {\n    return a * h / 2.0;\n}\n\n// Test cases\nconsole.log(triangleArea(3, 4) === 6.0);\nconsole.log(triangleArea(5, 7) === 17.5);\nconsole.log(triangleArea(10, 10) === 50.0);\nconsole.log(triangleArea(6, 9) === 27.0);\nconsole.log(triangleArea(12, 8) === 48.0);",
  "46": "function fib4(n) {\n    let results = [0, 0, 2, 0];\n\n    if (n < 4) {\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++) {\n        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n        results.shift();\n    }\n\n    return results[results.length - 1];\n}\n\n// Test cases\nconsole.log(fib4(0) === 0);\nconsole.log(fib4(1) === 0);\nconsole.log(fib4(2) === 2);\n```  ",
  "47": "function median(lst) {\n    lst.sort(function(a, b) {\n        return a - b;\n    });\n\n    if (lst.length % 2 === 1) {\n        return lst[Math.floor(lst.length / 2)];\n    } else {\n        return (lst[lst.length / 2 - 1] + lst[lst.length / 2]) / 2.0;\n    }\n}\n\n// Test cases\nconsole.log(median([1, 2, 3]) === 2);\nconsole.log(median([5, 2, 10, 6, 1]) === 5);\nconsole.log(median([4, 8, 3, 1, 6, 2]) === 3.5);\nconsole.log(median([0, 0, 0, 0, 0, 0, 0]) === 0);\nconsole.log(median([-3, -2, 0, 4, 7]) === 0);",
  "48": "function isPalindrome(text) {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPalindrome(\"racecar\") === true);\nconsole.log(isPalindrome(\"madam\") === true);\nconsole.log(isPalindrome(\"level\") === true);\nconsole.log(isPalindrome(\"hello\") === false);\nconsole.log(isPalindrome(\"12321\") === true);",
  "49": "function modp(n, p) {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}\n\n// Test cases\nconsole.log(modp(0, 7) === 1);\nconsole.log(modp(4, 3) === 1);\nconsole.log(modp(6, 2) === 0);\n```  ",
  "50": "function encodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) + 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\nfunction decodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0)).join('');\n}\n\n// Test cases\nconsole.log(encodeShift(\"hello\") === \"mjqqt\");\nconsole.log(encodeShift(\"xyz\") === \"cde\");",
  "51": "function removeVowels(text) {\n    return text.split('').filter(s => !['a', 'e', 'i', 'o', 'u'].includes(s.toLowerCase())).join('');\n}\n\n// Test cases\nconsole.log(removeVowels(\"hello\") === \"hll\");\nconsole.log(removeVowels(\"python\") === \"pythn\");\nconsole.log(removeVowels(\"apple\") === \"ppl\");\nconsole.log(removeVowels(\"banana\") === \"bnn\");\nconsole.log(removeVowels(\"programming\") === \"prgrmmng\");\n```  ",
  "52": "function belowThreshold(arr, threshold) {\n    for (let element of arr) {\n        if (element >= threshold) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test Cases\nconsole.log(belowThreshold([1, 2, 3, 4, 5], 6) === true);\nconsole.log(belowThreshold([10, 20, 30, 40, 50], 50) === false);\nconsole.log(belowThreshold([100, 200, 300], 50) === false);",
  "53": "function add(x, y) {\n    return x + y;\n}\n\nconsole.assert(add(2, 3) === 5);\nconsole.assert(add(-5, 5) === 0);\nconsole.assert(add(0, 0) === 0);\nconsole.assert(add(10, -5) === 5);\nconsole.assert(add(100, 100) === 200);\n```  ",
  "54": "function sameChars(s0, s1) {\n    return new Set(s0) === new Set(s1);\n}\n\nconsole.log(sameChars(\"hello\", \"olelh\") === true);\nconsole.log(sameChars(\"abc\", \"cba\") === true);\nconsole.log(sameChars(\"12345\", \"54321\") === true);\nconsole.log(sameChars(\"hello\", \"world\") === false);\nconsole.log(sameChars(\"python\", \"java\") === false);",
  "55": "function fib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n// Test cases\nconsole.log(fib(0) === 0);\nconsole.log(fib(1) === 1);\nconsole.log(fib(2) === 1);\nconsole.log(fib(5) === 5);\nconsole.log(fib(10) === 55);",
  "56": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n\nconsole.log(correctBracketing(\"<>\")); // true\nconsole.log(correctBracketing(\"<<>>\")); // true\nconsole.log(correctBracketing(\"<<><>>\")); // true\nconsole.log(correctBracketing(\"<<>>><<\")); // false\nconsole.log(correctBracketing(\"><\")); // false\n```  ",
  "57": "function monotonic(arr) {\n    if (JSON.stringify(arr) === JSON.stringify([...arr].sort()) || JSON.stringify(arr) === JSON.stringify([...arr].sort().reverse())) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(monotonic([1, 2, 3, 4, 5])); // Output: true\nconsole.log(monotonic([5, 4, 3, 2, 1])); // Output: true\nconsole.log(monotonic([1, 3, 2, 4, 5])); // Output: false\nconsole.log(monotonic([5, 4, 3, 2, 6])); // Output: false\nconsole.log(monotonic([1, 1, 1, 1, 1])); // Output: true",
  "58": "function common(l1, l2) {\n    const ret = new Set();\n    for (let e1 of l1) {\n        for (let e2 of l2) {\n            if (e1 === e2) {\n                ret.add(e1);\n            }\n        }\n    }\n    return Array.from(ret).sort();\n}\n\n// Test cases\nconsole.log(JSON.stringify(common([1, 2, 3, 4], [3, 4, 5])) === JSON.stringify([3, 4]));\nconsole.log(JSON.stringify(common([5, 6, 7], [7, 8, 9])) === JSON.stringify([7]));\nconsole.log(JSON.stringify(common(['a', 'b', 'c'], ['b', 'c', 'd'])) === JSON.stringify(['b', 'c']));\nconsole.log(JSON.stringify(common([], [1, 2, 3])) === JSON.stringify([]));\nconsole.log(JSON.stringify(common([1, 2, 3], [])) === JSON.stringify([]));\n```  ",
  "59": "function largestPrimeFactor(n) {\n    function isPrime(k) {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let largest = 1;\n    for (let j = 2; j <= n; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}\n\nconsole.log(largestPrimeFactor(10) === 5);\nconsole.log(largestPrimeFactor(15) === 5);\nconsole.log(largestPrimeFactor(21) === 7);\nconsole.log(largestPrimeFactor(56) === 7);\nconsole.log(largestPrimeFactor(13195) === 29);\n```  ",
  "60": "function sumToN(n) {\n    return [...Array(n + 1).keys()].reduce((acc, val) => acc + val, 0);\n}\n\n// Test cases\nconsole.log(sumToN(0) === 0);\nconsole.log(sumToN(1) === 1);\nconsole.log(sumToN(5) === 15);\nconsole.log(sumToN(10) === 55);\nconsole.log(sumToN(100) === 5050);",
  "61": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n\n// Test cases\nconsole.log(correctBracketing(\"()\") === true);\nconsole.log(correctBracketing(\"()()\") === true);\nconsole.log(correctBracketing(\"(())\") === true);\nconsole.log(correctBracketing(\"(()()())\") === true);\nconsole.log(correctBracketing(\")(\") === false);\n```  ",
  "62": "function derivative(xs) {\n    return xs.map((value, index) => value * (index + 1)).slice(1);\n}\n\n// Test cases\nconsole.log(JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6]));\nconsole.log(JSON.stringify(derivative([0, 1, 2, 3, 4])) === JSON.stringify([1, 4, 9, 16]));\nconsole.log(JSON.stringify(derivative([1, 0, 1, 0, 1])) === JSON.stringify([0, 2, 0, 4]));\nconsole.log(JSON.stringify(derivative([0, 0, 0, 0, 0])) === JSON.stringify([0, 0, 0, 0]));\n```  ",
  "63": "function fibfib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n// Test cases\nconsole.log(fibfib(0) === 0);\nconsole.log(fibfib(1) === 0);\nconsole.log(fibfib(2) === 1);\nconsole.log(fibfib(3) === 1);",
  "64": "function vowelsCount(s) {\n    const vowels = \"aeiouAEIOU\";\n    let nVowels = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            nVowels++;\n        }\n    }\n    if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n        nVowels++;\n    }\n    return nVowels;\n}\n\n// Test cases\nconsole.log(vowelsCount(\"Hello\") === 2);\nconsole.log(vowelsCount(\"AEIOU\") === 5);\nconsole.log(vowelsCount(\"qwrtY\") === 1);\nconsole.log(vowelsCount(\"This is a test\") === 4);\n```  ",
  "65": "function circularShift(x, shift) {\n    let s = x.toString();\n    if (shift > s.length) {\n        return s.split(\"\").reverse().join(\"\");\n    } else {\n        return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n    }\n}\n\n// Test cases\nconsole.log(circularShift(12345, 2) === \"45123\");\nconsole.log(circularShift(123, 5) === \"321\");\nconsole.log(circularShift(777, 1) === \"777\");\nconsole.log(circularShift(54321, 0) === \"54321\");\n```  ",
  "66": "function digitSum(s) {\n    if (s === \"\") return 0;\n    return Array.from(s).reduce((sum, char) => sum + (char.toUpperCase() === char ? char.charCodeAt(0) : 0), 0);\n}\n\nconsole.log(digitSum(\"\")); // 0\nconsole.log(digitSum(\"123\")); // 0",
  "67": "function fruitDistribution(s, n) {\n    let lis = [];\n    s.split(' ').forEach(i => {\n        if (!isNaN(i)) {\n            lis.push(parseInt(i));\n        }\n    });\n    return n - lis.reduce((a, b) => a + b, 0);\n}\n\n// Test cases\nconsole.log(fruitDistribution(\"10 apples 5 oranges 3 bananas\", 20) === 2);\nconsole.log(fruitDistribution(\"3 apples 2 bananas\", 10) === 5);\nconsole.log(fruitDistribution(\"5 apples 10 oranges\", 15) === 0);\nconsole.log(fruitDistribution(\"1 apple 2 oranges 3 bananas\", 7) === 1);\nconsole.log(fruitDistribution(\"0 apples 0 oranges 0 bananas\", 10) === 10);\n```  ",
  "68": "function pluck(arr) {\n    if (arr.length === 0) return [];\n    const evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\nconsole.log(pluck([1, 3, 5, 7])); // []\nconsole.log(pluck([2, 4, 6, 8])); // [2, 0]\nconsole.log(pluck([3, 1, 7, 9, 2, 4, 6, 8])); // [2, 4]\nconsole.log(pluck([5, 7, 9, 11, 13])); // []\nconsole.log(pluck([10, 7, 6, 8, 2, 4])); // [2, 4]",
  "69": "function search(lst) {\n    let frq = Array(Math.max(...lst) + 1).fill(0);\n    for (let i of lst) {\n        frq[i] += 1;\n    }\n\n    let ans = -1;\n    for (let i = 1; i < frq.length; i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n\n    return ans;\n}\n\nconsole.log(search([1, 1, 1, 3, 3, 3, 3, 4, 4]) === 3);\nconsole.log(search([1, 1, 1, 1]) === 1);\nconsole.log(search([5, 5, 5, 5, 5]) === 5);\n```  ",
  "70": "function strangeSortList(lst) {\n    let res = [];\n    let switchFlag = true;\n\n    while (lst.length > 0) {\n        res.push(switchFlag ? Math.min(...lst) : Math.max(...lst));\n        let index = lst.indexOf(res[res.length - 1]);\n        lst.splice(index, 1);\n        switchFlag = !switchFlag;\n    }\n\n    return res;\n}\n\nconsole.log(strangeSortList([3, 1, 4, 1, 5, 9, 2, 6])); // [1, 9, 1, 6, 2, 5, 3, 4]\nconsole.log(strangeSortList([2, 3, 1, 4, 5])); // [1, 5, 2, 4, 3]\nconsole.log(strangeSortList([9, 8, 7, 6, 5, 4, 3])); // [3, 9, 4, 8, 5, 7, 6]\nconsole.log(strangeSortList([1, 2, 3, 4, 5, 6, 7])) // [1, 7, 2, 6, 3, 5, 4]\nconsole.log(strangeSortList([5, 5, 5, 1, 1, 1])); // [1, 5, 1, 5, 1, 5]",
  "71": "function triangleArea(a, b, c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    let s = (a + b + c) / 2;\n    let area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n    area = Math.round(area * 100) / 100;\n    return area;\n}\n\nconsole.log(triangleArea(3, 4, 5) === 6.0);\nconsole.log(triangleArea(6, 8, 10) === 24.0);\nconsole.log(triangleArea(5, 12, 13) === 30.0);\nconsole.log(triangleArea(7, 24, 25) === 84.0);\nconsole.log(triangleArea(8, 15, 17) === 60.0);",
  "72": "function willItFly(q, w) {\n    if (q.reduce((a, b) => a + b, 0) > w) {\n        return false;\n    }\n\n    let i = 0;\n    let j = q.length - 1;\n    while (i < j) {\n        if (q[i] !== q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n\n    return true;\n}\n\nconsole.log(willItFly([1, 2, 3, 2, 1], 10) === true);\nconsole.log(willItFly([1, 2, 3, 4, 5], 9) === false);\nconsole.log(willItFly([1], 1) === true);\n```  ",
  "73": "function smallestChange(arr) {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n\n// Test cases\nconsole.log(smallestChange([1, 2, 3, 4, 5]) === 2);\nconsole.log(smallestChange([1, 1, 1, 1, 1, 1]) === 0);\nconsole.log(smallestChange([2, 2, 4, 4, 5, 5]) === 2);\nconsole.log(smallestChange([1, 2, 3, 2, 1]) === 0);\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 1]) === 0);\n```  ",
  "74": "function totalMatch(lst1, lst2) {\n    let l1 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        l1 += lst1[i].length;\n    }\n    \n    let l2 = 0;\n    for (let i = 0; i < lst2.length; i++) {\n        l2 += lst2[i].length;\n    }\n    \n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\nconsole.log(totalMatch(['apple', 'banana', 'cherry'], ['pear', 'kiwi', 'grape'])); // ['pear', 'kiwi', 'grape']\nconsole.log(totalMatch(['elephant', 'giraffe'], ['lion', 'tiger', 'monkey'])); // ['elephant', 'giraffe']\nconsole.log(totalMatch(['blue', 'red'], ['yellow', 'green'])); // ['blue', 'red']\nconsole.log(totalMatch(['one'], ['two', 'three'])); // ['one']\nconsole.log(totalMatch(['python', 'java', 'ruby'], ['javascript', 'c++'])); // ['javascript', 'c++']\n```  ",
  "75": "function isMultiplyPrime(a) {\n\n    function isPrime(n) {\n        for (var j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (var i = 2; i <= 100; i++) {\n        if (!isPrime(i)) continue;\n        for (var j = 2; j <= 100; j++) {\n            if (!isPrime(j)) continue;\n            for (var k = 2; k <= 100; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(isMultiplyPrime(2) === false);\nconsole.log(isMultiplyPrime(17) === false);\nconsole.log(isMultiplyPrime(30) === true);",
  "76": "function isSimplePower(x, n) {\n    if (n === 1) {\n        return x === 1;\n    }\n    let power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return power === x;\n}\n\n// Test cases\nconsole.log(isSimplePower(8, 2) === true);\nconsole.log(isSimplePower(27, 3) === true);\nconsole.log(isSimplePower(16, 4) === true);\nconsole.log(isSimplePower(125, 5) === true);\nconsole.log(isSimplePower(10, 2) === false);\n```  ",
  "77": "function isCube(a) {\n    a = Math.abs(a);\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}\n\n// Test cases\nconsole.log(isCube(27) === true);\nconsole.log(isCube(-8) === true);\nconsole.log(isCube(64) === true);\nconsole.log(isCube(-125) === true);",
  "78": "function hexKey(num) {\n    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i])) {\n            total += 1;\n        }\n    }\n    return total;\n}\n\n// Test cases\nconsole.log(hexKey('2357') === 4);\nconsole.log(hexKey('BDBD') === 4);\nconsole.log(hexKey('') === 0);\nconsole.log(hexKey('BBBB') === 4);\n```  ",
  "79": "function decimalToBinary(decimal) {\n    return \"db\" + decimal.toString(2) + \"db\";\n}\n\n// Test cases\nconsole.log(decimalToBinary(0) === \"db0db\");\nconsole.log(decimalToBinary(5) === \"db101db\");\nconsole.log(decimalToBinary(10) === \"db1010db\");\nconsole.log(decimalToBinary(15) === \"db1111db\");\nconsole.log(decimalToBinary(27) === \"db11011db\");",
  "80": "function isHappy(s) {\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\n// Test cases\nconsole.log(isHappy(\"abcdef\") === true);\nconsole.log(isHappy(\"123456\") === true);\nconsole.log(isHappy(\"111111\") === false);\n```  ",
  "81": "function numericalLetterGrade(grades) {\n    const letterGrade = [];\n    grades.forEach(gpa => {\n        if (gpa === 4.0) {\n            letterGrade.push(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrade.push(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrade.push(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrade.push(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrade.push(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrade.push(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrade.push(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrade.push(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrade.push(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrade.push(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrade.push(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrade.push(\"D-\");\n        } else {\n            letterGrade.push(\"E\");\n        }\n    });\n    return letterGrade;\n}\n\n// Test cases\nconsole.log(numericalLetterGrade([3.5, 2.0, 1.0])); // Output: ['A-', 'C', 'D']",
  "82": "function primeLength(string) {\n    let l = string.length;\n    if (l === 0 || l === 1) {\n        return false;\n    }\n    for (let i = 2; i < l; i++) {\n        if (l % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(primeLength(\"hello\") === true);\nconsole.log(primeLength(\"\") === false);\nconsole.log(primeLength(\"a\") === false);\nconsole.log(primeLength(\"engineering\") === true);",
  "83": "function startsOneEnds(n) {\n    if (n === 1) {\n        return 1;\n    }\n    return 18 * Math.pow(10, n - 2);\n}\n\n// Test cases\nconsole.log(startsOneEnds(1) === 1);\nconsole.log(startsOneEnds(2) === 18);\nconsole.log(startsOneEnds(3) === 180);\nconsole.log(startsOneEnds(4) === 1800);\nconsole.log(startsOneEnds(5) === 18000);",
  "84": "function solve(N) {\n    return (N.toString().split('').reduce((acc, curr) => acc + parseInt(curr), 0)).toString(2);\n}",
  "85": "function add(lst) {\n    return lst.filter((num, index) => index % 2 !== 0 && num % 2 === 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(add([1, 3, 5, 7, 9]) === 0); // Output: true",
  "86": "function antiShuffle(s) {\n    return s.split(' ').map(i => i.split('').sort().join('')).join(' ');\n}\n\n// Test cases\nconsole.log(antiShuffle(\"hello world\") === \"ehllo dlorw\");\nconsole.log(antiShuffle(\"abcdef\") === \"abcdef\");\nconsole.log(antiShuffle(\"aaa bbb ccc\") === \"aaa bbb ccc\");",
  "87": "function getRow(lst, x) {\n    const coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n    const sortedCoords = coords.sort((a, b) => {\n        if (a[1] === b[1]) {\n            return a[0] - b[0];\n        }\n        return b[1] - a[1];\n    });\n\n    return sortedCoords;\n}\n\nconsole.log(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)); // Output: [[1, 1]]\nconsole.log(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)); // Output: [[0, 0]]\nconsole.log(getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9)); // Output: [[2, 2]]\nconsole.log(getRow([[1, 2], [4, 5], [7, 8]], 8)); // Output: [[2, 1]]\nconsole.log(getRow([[1, 2], [4, 2], [7, 8]], 2)); // Output: [[0, 1], [1, 1]]",
  "88": "function sortArray(array) {\n    return array.length === 0 ? [] : array.sort((a, b) => (a + b) % 2 === 0 ? b - a : a - b);\n}\n\nconsole.log(sortArray([1, 3, 5, 7, 9])); // Output: [9, 7, 5, 3, 1]\nconsole.log(sortArray([])); // Output: []",
  "89": "function encrypt(s) {\n    var d = 'abcdefghijklmnopqrstuvwxyz';\n    var out = '';\n    for (var i = 0; i < s.length; i++) {\n        var c = s[i];\n        if (d.includes(c)) {\n            out += d[(d.indexOf(c) + 4) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}",
  "90": "function nextSmallest(lst) {\n    lst = Array.from(new Set(lst)).sort();\n    return lst.length < 2 ? null : lst[1];\n}\n\nconsole.log(nextSmallest([3, 5, 1, 2]) === 2);\nconsole.log(nextSmallest([5, 7, 4, 2, 9]) === 4);\nconsole.log(nextSmallest([1, 1, 1, 1]) === null);\nconsole.log(nextSmallest([-5, 0, 10, 3, -2]) === -2);\nconsole.log(nextSmallest([100, 200, 300, 400]) === 200);",
  "91": "function isBored(S) {\n    const sentences = S.split(/[\\.\\?!]\\s*/);\n    return sentences.filter(sentence => sentence.substring(0, 2) === 'I ').length;\n}\n\n// Test cases\nconsole.log(isBored(\"I love Python. Python is fun!\") === 1);\nconsole.log(isBored(\"Is this working? Yes, it is.\") === 0);\nconsole.log(isBored(\"I like testing code. Testing is important.\") === 1);",
  "92": "function anyInt(x, y, z) {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(anyInt(3, 4, 7) === true);\nconsole.log(anyInt(-2, 5, 3) === true);\nconsole.log(anyInt(0, 0, 0) === true);\nconsole.log(anyInt(1, 2, 10) === false);\n```  ",
  "93": "function encodeMessage(message) {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries(Array.from(vowels, i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]);\n    message = message.split('').map(i => vowelsReplace[i] || i).join('');\n    return message;\n}",
  "94": "function skjkasdkd(lst) {\n\n    function isPrime(n) {\n        for (i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let maxx = 0;\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] > maxx && isPrime(lst[i])) {\n            maxx = lst[i];\n        }\n        i++;\n    }\n    let result = Array.from(String(maxx), Number).reduce((acc, digit) => acc + digit, 0);\n    return result;\n}\n\nconsole.log(skjkasdkd([17, 19, 23, 29, 31, 37])); // Output: 10\nconsole.log(skjkasdkd([97, 99, 101, 103, 107, 109])); // Output: 10\n```  ",
  "95": "function checkDictCase(obj) {\n    if (Object.keys(obj).length === 0) {\n        return false;\n    } else {\n        let state = \"start\";\n        for (let key in obj) {\n            if (typeof key !== 'string') {\n                state = \"mixed\";\n                break;\n            }\n            if (state === \"start\") {\n                if (key.toUpperCase() === key) {\n                    state = \"upper\";\n                } else if (key.toLowerCase() === key) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state === \"upper\" && key.toUpperCase() !== key) || (state === \"lower\" && key.toLowerCase() !== key)) {\n                state = \"mixed\";\n                break;\n            } else {\n                break;\n            }\n        }\n        return state === \"upper\" || state === \"lower\";\n    }\n}\n\nassert(checkDictCase({'apple': 1, 'banana': 2}) === true);\nassert(checkDictCase({'Apple': 1, 'banana': 2}) === false);\nassert(checkDictCase({'apple': 1, 'Banana': 2}) === false);\nassert(checkDictCase({}) === false);\n```  ",
  "96": "function countUpTo(n) {\n    var primes = [];\n    for (var i = 2; i < n; i++) {\n        var isPrime = true;\n        for (var j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\n// Test cases\nconsole.log(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]));\nconsole.log(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]));\nconsole.log(JSON.stringify(countUpTo(15)) === JSON.stringify([2, 3, 5, 7, 11, 13]));\nconsole.log(JSON.stringify(countUpTo(20)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19]));\nconsole.log(JSON.stringify(countUpTo(25)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23]));\n```  ",
  "97": "function multiply(a, b) {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n// Test cases\nconsole.log(multiply(10, 4) === 0);\nconsole.log(multiply(-9, -2) === 8);",
  "98": "function countUpper(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (\"AEIOU\".includes(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n// Test cases\nconsole.log(countUpper(\"hello\")); // Output: 1\nconsole.log(countUpper(\"hEllO\")); // Output: 2\nconsole.log(countUpper(\"AEIOU\")); // Output: 3",
  "99": "function closestInteger(value) {\n    let num = parseFloat(value);\n    if (value.match(/\\./g) && value.match(/\\./g).length === 1) {\n        // remove trailing zeros\n        while (value.slice(-1) === '0') {\n            value = value.slice(0, -1);\n        }\n    }\n    if (value.slice(-2) === '.5') {\n        if (num > 0) {\n            return Math.ceil(num);\n        } else {\n            return Math.floor(num);\n        }\n    } else if (value.length > 0) {\n        return Math.round(num);\n    } else {\n        return 0;\n    }\n}\n\nconsole.log(closestInteger(\"3.5\"));\nconsole.log(closestInteger(\"-2.6\"));\nconsole.log(closestInteger(\"10.0\"));\nconsole.log(closestInteger(\"7.8\"));\nconsole.log(closestInteger(\"0.001\"));\n```  ",
  "100": "function makeAPile(n) {\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        result.push(n + 2*i);\n    }\n    return result;\n}\n\nconsole.log(JSON.stringify(makeAPile(0)) === JSON.stringify([]));\nconsole.log(JSON.stringify(makeAPile(1)) === JSON.stringify([1]));\nconsole.log(JSON.stringify(makeAPile(2)) === JSON.stringify([2, 4]));\nconsole.log(JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13]));\nconsole.log(JSON.stringify(makeAPile(10)) === JSON.stringify([10, 12, 14, 16, 18, 20, 22, 24, 26, 28]));\n```  ",
  "101": "function wordsString(s) {\n    if (!s) {\n        return [];\n    }\n\n    let sList = [];\n\n    for (let letter of s) {\n        if (letter === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(letter);\n        }\n    }\n\n    sList = sList.join(\"\");\n    return sList.split(' ');\n}\n\nconsole.log(wordsString(\"\")); // []\nconsole.log(wordsString(\"Hello, world\")); // ['Hello', 'world']\nconsole.log(wordsString(\"Python,is,awesome\")); // ['Python', 'is', 'awesome']\nconsole.log(wordsString(\"One,two,three,four\")); // ['One', 'two', 'three', 'four']\nconsole.log(wordsString(\"Testing, the, function, now\")); // ['Testing', 'the', 'function', 'now']",
  "102": "function chooseNum(x, y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x === y) {\n        return -1;\n    }\n    return y - 1;\n}\n\n// Test cases\nconsole.log(chooseNum(3, 5) === 4);\nconsole.log(chooseNum(2, 6) === 6);\nconsole.log(chooseNum(5, 3) === -1);\nconsole.log(chooseNum(7, 9) === 8);",
  "103": "function roundedAvg(n, m) {\n    if (m < n) {\n        return -1;\n    }\n    let summation = 0;\n    for (let i = n; i <= m; i++) {\n        summation += i;\n    }\n    return (summation / (m - n + 1)).toString(2);\n}\n\n// Test cases\nconsole.log(roundedAvg(0, 10) === '101');\nconsole.log(roundedAvg(2, 2) === '10');\n```  ",
  "104": "function uniqueDigits(x) {\n  const oddDigitElements = [];\n  \n  x.forEach(i => {\n    if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {\n      oddDigitElements.push(i);\n    }\n  });\n  \n  return oddDigitElements.sort((a, b) => a - b);\n}\n\n// Test cases\nconsole.log(uniqueDigits([135, 246, 579])); // [135, 579]\nconsole.log(uniqueDigits([98765, 4321, 13579])); // [13579]",
  "105": "function byLength(arr) {\n    const dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    };\n    const sortedArr = arr.slice().sort((a, b) => b - a);\n    const newArr = [];\n    for (let i = 0; i < sortedArr.length; i++) {\n        if (dic[sortedArr[i]]) {\n            newArr.push(dic[sortedArr[i]]);\n        }\n    }\n    return newArr;\n}\n\nconsole.log(byLength([3, 5, 8, 2])); // Output: ['Eight', 'Five', 'Three', 'Two']\nconsole.log(byLength([9, 4, 2, 3, 6])); // Output: ['Nine', 'Six', 'Four', 'Three', 'Two']\nconsole.log(byLength([7, 5, 2])); // Output: ['Seven', 'Five', 'Two']",
  "106": "function calculateSequence(n) {\n    var result = [];\n    for (var i = 1; i <= n; i++) {\n        var x;\n        if (i % 2 === 0) {\n            x = 1;\n            for (var j = 1; j <= i; j++) {\n                x *= j;\n            }\n            result.push(x);\n        } else {\n            x = 0;\n            for (var j = 1; j <= i; j++) {\n                x += j;\n            }\n            result.push(x);\n        }\n    }\n    return result;\n}\n\nconsole.log(calculateSequence(1)); // Output should be [1]",
  "107": "function evenOddPalindrome(n) {\n\n    function isPalindrome(num) {\n        return num.toString() === num.toString().split('').reverse().join('');\n    }\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n}",
  "108": "function countNums(arr) {\n\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        n = n.toString().split(\"\").map(Number);\n        n[0] = n[0] * neg;\n        return n.reduce((a, b) => a + b, 0);\n    }\n\n    return arr.map(i => digitsSum(i)).filter(x => x > 0).length;\n}\n\nconsole.log(countNums([123, -45, 678, -90]) === 3);\nconsole.log(countNums([0, 0, 0, 0]) === 0);\nconsole.log(countNums([1, 2, 3, 4, 5, 6, 7, 8, 9]) === 9);\nconsole.log(countNums([-1, -2, -3, -4, -5]) == 0);\nconsole.log(countNums([10, 20, 30, 40, 50]) === 5);",
  "109": "function moveOneBall(arr) {\n    if (arr.length === 0) {\n        return true;\n    }\n    const sortedArray = arr.slice().sort((a, b) => a - b);\n    const myArr = [];\n\n    const minValue = Math.min(...arr);\n    const minIndex = arr.indexOf(minValue);\n    myArr.push(...arr.slice(minIndex), ...arr.slice(0, minIndex));\n\n    for (let i = 0; i < arr.length; i++) {\n        if (myArr[i] !== sortedArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(moveOneBall([]) === true);\nconsole.log(moveOneBall([1, 2, 3, 4, 5]) === true);\nconsole.log(moveOneBall([5, 1, 2, 3, 4]) === true);",
  "110": "function exchange(lst1, lst2) {\n    let odd = 0;\n    let even = 0;\n    for (let i of lst1) {\n        if (i % 2 === 1) {\n            odd += 1;\n        }\n    }\n    for (let i of lst2) {\n        if (i % 2 === 0) {\n            even += 1;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n// Test cases\nconsole.log(exchange([1, 3, 5], [2, 4, 6])); // Should output \"YES\"\nconsole.log(exchange([2, 4, 6], [1, 3, 5])); // Should output \"YES\"\nconsole.log(exchange([11, 13, 15], [22, 24, 26])); // Should output \"YES\"\n```  ",
  "111": "function histogram(test) {\n    let dict1 = {};\n    let list1 = test.split(\" \");\n    let t = 0;\n\n    for (let i of list1) {\n        if (list1.filter(x => x === i).length > t && i !== '') {\n            t = list1.filter(x => x === i).length;\n        }\n    }\n\n    if (t > 0) {\n        for (let i of list1) {\n            if (list1.filter(x => x === i).length === t) {\n                dict1[i] = t;\n            }\n        }\n    }\n\n    return dict1;\n}\n\nconsole.log(histogram(\"apple banana apple grape banana\")); // Output: {'apple': 2, 'banana': 2}\nconsole.log(histogram(\"red blue green blue\")); // Output: {'blue': 2}\nconsole.log(histogram(\"hello world\")); // Output: {'hello': 1, 'world': 1}\nconsole.log(histogram(\"python python python is is awesome\")); // Output: {'python': 3}\nconsole.log(histogram(\"\")); // Output: {}",
  "112": "function reverseDelete(s, c) {\n    s = s.split('').filter(char => !c.includes(char)).join('');\n    return [s, s.split('').reverse().join('') === s];\n}\n\n// Test cases\nconsole.log(JSON.stringify(reverseDelete(\"racecar\", \"r\")) === JSON.stringify(['aceca', true]));\nconsole.log(JSON.stringify(reverseDelete(\"abcdef\", \"x\")) === JSON.stringify(['abcdef', false]));",
  "113": "function oddCount(lst) {\n    let res = [];\n    for (let arr of lst) {\n        let n = arr.reduce((acc, val) => acc + (parseInt(val) % 2 === 1 ? 1 : 0), 0);\n        res.push(\"the number of odd elements \" + n + \" in the string \" + n + \" of the \" + n + \" input.\");\n    }\n    return res;\n}",
  "114": "function minSubArraySum(nums) {\n    let maxSum = 0;\n    let s = 0;\n    for (let num of nums) {\n        s += -num;\n        if (s < 0) {\n            s = 0;\n        }\n        maxSum = Math.max(s, maxSum);\n    }\n    if (maxSum === 0) {\n        maxSum = Math.max(...nums.map(i => -i));\n    }\n    let minSum = -maxSum;\n    return minSum;\n}\n\n// Test cases\nconsole.log(minSubArraySum([-1, -2, -3, -4, -5]) === -15);\nconsole.log(minSubArraySum([5, 5, 5, -15, 5]) === -15);\nconsole.log(minSubArraySum([-2, -3, -5, -5, -3]) === -18);\nconsole.log(minSubArraySum([10, -3, 2, 5, -19]) === -19);\n```  ",
  "115": "function maxFill(grid, capacity) {\n    return grid.reduce((total, arr) => total + Math.ceil(arr.reduce((acc, val) => acc + val, 0) / capacity), 0);\n}",
  "116": "function sortArray(arr) {\n    return arr.slice().sort((a, b) => {\n        let countA = (a.toString(2).match(/1/g) || []).length;\n        let countB = (b.toString(2).match(/1/g) || []).length;\n        return countA - countB || a - b;\n    });\n}\n\nconsole.log(sortArray([9, 8, 7, 6, 5])); // Output: [8, 5, 6, 9, 7]",
  "117": "function selectWords(s, n) {\n    let result = [];\n    let words = s.split(\" \");\n    \n    for (let word of words) {\n        let nConsonants = 0;\n        \n        for (let i = 0; i < word.length; i++) {\n            if (![\"a\",\"e\",\"i\",\"o\",\"u\"].includes(word[i].toLowerCase())) {\n                nConsonants++;\n            }\n        }\n        \n        if (nConsonants === n) {\n            result.push(word);\n        }\n    }\n    \n    return result;\n}",
  "118": "function getClosestVowel(word) {\n    if (word.length < 3) {\n        return \"\";\n    }\n\n    const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"]);\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.has(word[i])) {\n            if (!vowels.has(word[i+1]) && !vowels.has(word[i-1])) {\n                return word[i];\n            }\n        }\n    }\n\n    return \"\";\n}\n\n// Test cases\nconsole.log(getClosestVowel(\"\")); // \"\"\nconsole.log(getClosestVowel(\"hello\")); // \"e\"\nconsole.log(getClosestVowel(\"programming\")); // \"i\"",
  "119": "function matchParens(lst) {\n\n    ",
  "120": "function maximum(arr, k) {\n    if (k === 0) {\n        return [];\n    }\n    arr.sort((a, b) => a - b);\n    let ans = arr.slice(-k);\n    return ans;\n}\n\n// Test cases\nconsole.log(JSON.stringify(maximum([3, 1, 4, 1, 5, 9, 2, 6, 5], 4)) === JSON.stringify([5, 5, 6, 9]));\nconsole.log(JSON.stringify(maximum([7, 2, 5, 8, 4, 3], 2)) === JSON.stringify([7, 8]));\nconsole.log(JSON.stringify(maximum([1, 2, 3, 4, 5], 1)) === JSON.stringify([5]));\nconsole.log(JSON.stringify(maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 3)) === JSON.stringify([7, 8, 9]));\n```  ",
  "121": "function solution(lst) {\n    return lst.reduce((acc, x, idx) => {\n        if (idx % 2 === 0 && x % 2 === 1) {\n            return acc + x;\n        } else {\n            return acc;\n        }\n    }, 0);\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6]) === 9);\nconsole.log(solution([1, 1, 1, 1, 1, 1]) === 3);\nconsole.log(solution([2, 4, 6, 8, 10, 12]) === 0);\nconsole.log(solution([0, 0, 0, 0, 0, 0]) === 0);",
  "122": "function addElements(arr, k) {\n    return arr.slice(0, k).reduce((sum, elem) => {\n        if (String(elem).length <= 2) {\n            return sum + elem;\n        } else {\n            return sum;\n        }\n    }, 0);\n}\n\n// Test cases\nconsole.log(addElements([1, 23, 456, 78], 3) === 24);\nconsole.log(addElements([9, 87, 654, 32], 1) === 9);\nconsole.log(addElements([567, 89, 123, 45], 3) === 89);\n```  ",
  "123": "function getOddCollatz(n) {\n    let oddCollatz;\n    if (n % 2 === 0) {\n        oddCollatz = [];\n    } else {\n        oddCollatz = [n];\n    }\n    \n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        \n        if (n % 2 === 1) {\n            oddCollatz.push(Math.floor(n));\n        }\n    }\n    \n    return oddCollatz.sort((a, b) => a - b);\n}",
  "124": "function validDate(date) {\n    try {\n        date = date.trim();\n        let [month, day, year] = date.split('-');\n        month = parseInt(month);\n        day = parseInt(day);\n        year = parseInt(year);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (([1, 3, 5, 7, 8, 10, 12].includes(month) && (day < 1 || day > 31)) ||\n            ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) ||\n            (month === 2 && (day < 1 || day > 29))) {\n            return false;\n        }\n    } catch (error) {\n        return false;\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(validDate(\"01-15-2022\") === true);\nconsole.log(validDate(\"02-29-2020\") === true);\nconsole.log(validDate(\"11-31-2021\") === false);\nconsole.log(validDate(\"02-30-2022\") === false);",
  "125": "function splitWords(txt) {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.replace(/,/g, \" \").split(\" \");\n    } else {\n        return txt.split(\"\").reduce((acc, char) => {\n            if (char.toLowerCase() === char && char.charCodeAt(0) % 2 === 0) {\n                return acc + 1;\n            }\n            return acc;\n        }, 0);\n    }\n}\n\n// Test cases\nconsole.log(splitWords(\"Hello World\")); // ['Hello', 'World']\nconsole.log(splitWords(\"apple,orange,banana\")); // ['apple', 'orange', 'banana']\nconsole.log(splitWords(\"PythonIsGreat\")); // 5\nconsole.log(splitWords(\"test\")); // 2\nconsole.log(splitWords(\"12345\")); // 0\n```  ",
  "126": "function isSorted(lst) {\n    let countDigit = {};\n    lst.forEach(i => countDigit[i] = (countDigit[i] || 0) + 1);\n\n    for (let i of lst) {\n        countDigit[i]++;\n    }\n\n    if (lst.some(i => countDigit[i] > 2)) {\n        return false;\n    }\n\n    if (lst.every((val, i) => i === 0 || lst[i - 1] <= val)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(isSorted([1, 2, 3, 4]) === true);\nconsole.log(isSorted([5, 3, 2, 1]) === false);\nconsole.log(isSorted([10, 15, 20, 25, 30]) === true);\nconsole.log(isSorted([5, 5, 5, 4, 3, 2]) === false);",
  "127": "function intersection(interval1, interval2) {\n\n    function isPrime(num) {\n        if (num === 1 || num === 0) {\n            return false;\n        }\n        if (num === 2) {\n            return true;\n        }\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n// Test cases\nconsole.log(intersection([1, 5], [3, 7]) === \"YES\");\nconsole.log(intersection([10, 15], [17, 23]) === \"NO\");\nconsole.log(intersection([2, 8], [5, 10]) === \"YES\");\nconsole.log(intersection([0, 20], [21, 30]) === \"NO\");\nconsole.log(intersection([3, 11], [11, 20]) === \"NO\");",
  "128": "function prodSigns(arr) {\n    if (!arr.length) return null;\n    const hasZero = arr.includes(0);\n    const prod = hasZero ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);\n    return prod * arr.reduce((acc, curr) => acc + Math.abs(curr), 0);\n}\n\nconsole.log(prodSigns([1, 2, 3, 4]) === 10);\nconsole.log(prodSigns([-1, 2, 3, 4]) === -10);\nconsole.log(prodSigns([0, 2, 3, 4]) === 0);\nconsole.log(prodSigns([0, 0, 0, 0]) === 0);",
  "129": "function minPath(grid, k) {\n    let n = grid.length;\n    let val = n * n + 1;\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                let temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                val = Math.min(...temp);\n            }\n        }\n    }\n\n    let ans = [];\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            ans.push(1);\n        } else {\n            ans.push(val);\n        }\n    }\n    return ans;\n}",
  "130": "function triangle(n) {\n    if (n === 0) {\n        return [1];\n    }\n    let myTriangle = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            myTriangle.push(i / 2 + 1);\n        } else {\n            myTriangle.push(myTriangle[i - 1] + myTriangle[i - 2] + (i + 3) / 2);\n        }\n    }\n    return myTriangle;\n}\n\n// Test cases\nconsole.log(JSON.stringify(triangle(0)) === JSON.stringify([1]));\nconsole.log(JSON.stringify(triangle(1)) === JSON.stringify([1, 3]));",
  "131": "function digits(n) {\n    let product = 1;\n    let oddCount = 0;\n    \n    n = n.toString();\n    for (let i = 0; i < n.length; i++) {\n        let digit = parseInt(n[i]);\n        if (digit % 2 === 1) {\n            product *= digit;\n            oddCount++;\n        }\n    }\n    \n    if (oddCount === 0) {\n        return 0;\n    } else {\n        return product;\n    }\n}\n\n// Test cases\nconsole.log(digits(24680) === 0);\nconsole.log(digits(1111) === 1);\nconsole.log(digits(777) === 343);\nconsole.log(digits(531) === 15);\n```  ",
  "132": "function isNested(string) {\n    let openingBracketIndex = [];\n    let closingBracketIndex = [];\n    \n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openingBracketIndex.push(i);\n        } else {\n            closingBracketIndex.push(i);\n        }\n    }\n    \n    closingBracketIndex.reverse();\n    \n    let count = 0;\n    let i = 0;\n    let l = closingBracketIndex.length;\n    \n    for (let idx of openingBracketIndex) {\n        if (i < l && idx < closingBracketIndex[i]) {\n            count++;\n            i++;\n        }\n    }\n    \n    return count >= 2;\n}\n\n// Test cases\nconsole.log(isNested(\"[]\") === false);\nconsole.log(isNested(\"[[]]\") === true);\nconsole.log(isNested(\"[ [[]] ]\") === true);\nconsole.log(isNested(\"[[[]]]\") === true);",
  "133": "function sumSquares(lst) {\n    const math = require('math');\n\n    let squared = 0;\n    for (let i of lst) {\n        squared += Math.ceil(i) ** 2;\n    }\n    return squared;\n}\n\nconsole.log(sumSquares([1, 2, 3]) === 14);\nconsole.log(sumSquares([-1, -2, -3]) === 14);\nconsole.log(sumSquares([0, 0, 0, 0]) === 0);\nconsole.log(sumSquares([4, 5, 6]) === 77);",
  "134": "function checkIfLastCharIsALetter(txt) {\n    let check = txt.split(' ').pop();\n    return check.length === 1 && /^[a-zA-Z]$/.test(check);\n}\n\n// Test cases\nconsole.log(checkIfLastCharIsALetter(\"Hello World!\") === false);\nconsole.log(checkIfLastCharIsALetter(\"Hello123\") === false);\nconsole.log(checkIfLastCharIsALetter(\"Testing 1 2 3\") === false);\nconsole.log(checkIfLastCharIsALetter(\"Ends with z\") === true);",
  "135": "function canArrange(arr) {\n    let ind = -1;\n    let i = 1;\n    while (i < arr.length) {\n        if (arr[i] < arr[i - 1]) {\n            ind = i;\n        }\n        i++;\n    }\n    return ind;\n}\n\n// Test cases\nconsole.log(canArrange([1, 2, 3, 4, 5]) === -1);\nconsole.log(canArrange([5, 4, 3, 2, 1]) === 4);\nconsole.log(canArrange([3, 2, 4, 1]) === 3);\nconsole.log(canArrange([1, 2, 3, 5, 4]) === 4);",
  "136": "function largestSmallestIntegers(lst) {\n    const smallest = lst.filter(x => x < 0);\n    const largest = lst.filter(x => x > 0);\n    return (smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null);\n}\n\n// Test cases\nconsole.log(largestSmallestIntegers([-10, 5, 7, 9, 2])); // Output: (-10, 2)\nconsole.log(largestSmallestIntegers([0, 0, 0, 0, 0])); // Output: (null, null)\nconsole.log(largestSmallestIntegers([-3, 0, 2, 4, 1])); // Output: (-3, 1)",
  "137": "function compareOne(a, b) {\n    let tempA = a;\n    let tempB = b;\n\n    if (typeof tempA === 'string') {\n        tempA = tempA.replace(',', '.');\n    }\n    if (typeof tempB === 'string') {\n        tempB = tempB.replace(',', '.');\n    }\n\n    if (parseFloat(tempA) === parseFloat(tempB)) {\n        return null;\n    }\n\n    return parseFloat(tempA) > parseFloat(tempB) ? a : b;\n}\n\n// Test cases\nconsole.log(compareOne(10.5, \"10.5\") === null);\nconsole.log(compareOne(\"15.6\", 15.6) === null);\nconsole.log(compareOne(20, 10) === 20);\nconsole.log(compareOne(\"3.5\", 2.5) === \"3.5\");\n```  ",
  "138": "function isEqualToSumEven(n) {\n    return n % 2 === 0 && n >= 8;\n}\n\n// Test cases\nconsole.log(isEqualToSumEven(8) === true);\nconsole.log(isEqualToSumEven(10) === true);\nconsole.log(isEqualToSumEven(7) === false);\nconsole.log(isEqualToSumEven(12) === true);\nconsole.log(isEqualToSumEven(5) === false);",
  "139": "function specialFactorial(n) {\n    let factI = 1;\n    let specialFact = 1;\n    for (let i = 1; i <= n; i++) {\n        factI *= i;\n        specialFact *= factI;\n    }\n    return specialFact;\n}\n\n// Test cases\nconsole.log(specialFactorial(1) === 1);\nconsole.log(specialFactorial(2) === 2);\nconsole.log(specialFactorial(3) === 12);\nconsole.log(specialFactorial(4) === 288);\nconsole.log(specialFactorial(5) === 34560);\n```  ",
  "140": "function fixSpaces(text) {\n    let newText = \"\";\n    let i = 0;\n    let start = 0;\n    let end = 0;\n    while (i < text.length) {\n        if (text[i] === \" \") {\n            end += 1;\n        } else {\n            if (end - start > 2) {\n                newText += \"-\" + text[i];\n            } else if (end - start > 0) {\n                newText += \"_\".repeat(end - start) + text[i];\n            } else {\n                newText += text[i];\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) {\n        newText += \"-\";\n    } else if (end - start > 0) {\n        newText += \"_\";\n    }\n    return newText;\n}\n\nconsole.log(fixSpaces(\"no_spaces_here\") === \"no_spaces_here\"); // Output: true\n```  ",
  "141": "function fileNameCheck(fileName) {\n    let suffixes = ['txt', 'exe', 'dll'];\n    let lst = fileName.split('.');\n    \n    if (lst.length !== 2) {\n        return 'No';\n    }\n    if (!suffixes.includes(lst[1])) {\n        return 'No';\n    }\n    if (lst[0].length === 0 || !isNaN(lst[0][0])) {\n        return 'No';\n    }\n    let digitCount = lst[0].split('').filter(x => !isNaN(x)).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\nconsole.log(fileNameCheck(\"document.txt\") === \"Yes\");\nconsole.log(fileNameCheck(\"program.exe\") === \"Yes\");\nconsole.log(fileNameCheck(\"file.dll\") === \"Yes\");\nconsole.log(fileNameCheck(\"file.\") === \"No\");\nconsole.log(fileNameCheck(\"123.exe\") === \"No\");",
  "142": "function sumSquares(lst) {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result.push(lst[i] ** 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            result.push(lst[i] ** 3);\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    return result.reduce((acc, curr) => acc + curr, 0);\n}",
  "143": "function wordsInSentence(sentence) {\n    let newLst = [];\n    let words = sentence.split(\" \");\n    \n    for (let word of words) {\n        let flag = 0;\n        \n        if (word.length === 1) {\n            flag = 1;\n        }\n        \n        for (let i = 2; i < word.length; i++) {\n            if (word.length % i === 0) {\n                flag = 1;\n            }\n        }\n        \n        if (flag === 0 || word.length === 2) {\n            newLst.push(word);\n        }\n    }\n    \n    return newLst.join(\" \");\n}\n```  ",
  "144": "function simplify(x, n) {\n    const [a, b] = x.split(\"/\");\n    const [c, d] = n.split(\"/\");\n    const numerator = parseInt(a) * parseInt(c);\n    const denom = parseInt(b) * parseInt(d);\n    if (numerator / denom === parseInt(numerator / denom)) {\n        return true;\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(simplify(\"1/2\", \"3/5\") === false);",
  "145": "function orderByPoints(nums) {\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        n = Array.from(String(n), Number);\n        n[0] = n[0] * neg;\n        return n.reduce((acc, curr) => acc + curr, 0);\n    }\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n\n// Test cases\nconsole.log(orderByPoints([11, 22, 33, 44])); // Output should be [11, 22, 33, 44]",
  "146": "function specialFilter(nums) {\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (num > 10) {\n            let oddDigits = [1, 3, 5, 7, 9];\n            let numberAsString = num.toString();\n            if (oddDigits.includes(parseInt(numberAsString[0])) && oddDigits.includes(parseInt(numberAsString[numberAsString.length - 1]))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(specialFilter([12, 25, 37, 41, 59, 101])); // Output: 3\n```  ",
  "147": "function getMaxTriples(n) {\n    let A = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i*i - i + 1);\n    }\n\n    let ans = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    ans.push([A[i], A[j], A[k]]);\n                }\n            }\n        }\n    }\n\n    return ans.length;\n}\n```  ",
  "148": "function betweenPlanets(planet1, planet2) {\n    const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {\n        return [];\n    }\n\n    const planet1Index = planetNames.indexOf(planet1);\n    const planet2Index = planetNames.indexOf(planet2);\n\n    if (planet1Index < planet2Index) {\n        return planetNames.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetNames.slice(planet2Index + 1, planet1Index);\n    }\n}\n\nconsole.log(betweenPlanets(\"Earth\", \"Neptune\")); // Output: [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\nconsole.log(betweenPlanets(\"Venus\", \"Uranus\")); // Output: [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]",
  "149": "function sortedListSum(lst) {\n    lst.sort();\n    let newList = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newList.push(i);\n        }\n    }\n    return newList.sort((a, b) => a.length - b.length);\n}",
  "150": "function xOrY(n, x, y) {\n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\n// Test cases\nconsole.log(xOrY(1, 10, 20) === 20);\nconsole.log(xOrY(2, 10, 20) === 10);\nconsole.log(xOrY(3, 10, 20) === 10);\nconsole.log(xOrY(4, 10, 20) === 20);\nconsole.log(xOrY(7, 10, 20) === 10);",
  "151": "function doubleTheDifference(lst) {\n    return lst.filter(i => i > 0 && i % 2 !== 0 && !String(i).includes('.')).reduce((acc, val) => acc + Math.pow(val, 2), 0);\n}\n\n// Test cases\nconsole.log(doubleTheDifference([3, 5, 7]) === 83);\nconsole.log(doubleTheDifference([-2, 4, 6, 8]) === 0);\nconsole.log(doubleTheDifference([1, 2, 3, 4, 5]) === 35);\nconsole.log(doubleTheDifference([0, -1, -3, -5]) === 0);",
  "152": "function compare(game, guess) {\n    return game.map((x, i) => Math.abs(x - guess[i]));\n}\n\nconsole.log(compare([1, 2, 3], [1, 2, 3])); // [0, 0, 0]\nconsole.log(compare([4, 5, 6], [2, 3, 1])); // [2, 2, 5]\nconsole.log(compare([10, 20, 30], [5, 17, 25])); // [5, 3, 5]\nconsole.log(compare([0, 0, 0], [1, 2, 3])); // [1, 2, 3]\nconsole.log(compare([0], [0])); // [0]",
  "153": "function strongestExtension(className, extensions) {\n    let strong = extensions[0];\n    let myVal = extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n\n    for (let s of extensions) {\n        let val = s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n        if (val > myVal) {\n            strong = s;\n            myVal = val;\n        }\n    }\n\n    let ans = className + \".\" + strong;\n    return ans;\n}\n\nconsole.log(strongestExtension(\"File\", [\"pdf\", \"txt\", \"IMG\"])); // Output: \"File.IMG\"\nconsole.log(strongestExtension(\"Image\", [\"svg\", \"png\", \"JPEG\"])); // Output: \"Image.JPEG\"\nconsole.log(strongestExtension(\"Code\", [\"py\", \"java\", \"CPP\"])); // Output: \"Code.CPP\"\n```  ",
  "154": "function cycPatternCheck(a, b) {\n    let l = b.length;\n    let pat = b + b;\n    for (let i = 0; i < a.length - l + 1; i++) {\n        for (let j = 0; j < l + 1; j++) {\n            if (a.slice(i, i + l) === pat.slice(j, j + l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(cycPatternCheck(\"hello\", \"world\") === false);\nconsole.log(cycPatternCheck(\"hellohello\", \"hello\") === true);",
  "155": "function evenOddCount(num) {\n    let evenCount = 0;\n    let oddCount = 0;\n    for (let i of Math.abs(num).toString()) {\n        if (parseInt(i) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n}\n\n// Test cases\nconsole.log(evenOddCount(123456)); // Output: [3, 3]\nconsole.log(evenOddCount(13579)); // Output: [0, 5]\nconsole.log(evenOddCount(2468)); // Output: [4, 0]\nconsole.log(evenOddCount(0)); // Output: [1, 0]\n```  ",
  "156": "function intToMiniRoman(number) {\n    const num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]; \n    const sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]; \n    let i = 12;\n    let res = '';\n    while (number) {\n        let div = Math.floor(number / num[i]);\n        number %= num[i];\n        while (div) {\n            res += sym[i];\n            div--;\n        }\n        i--;\n    }\n    return res.toLowerCase();\n}\n\nconsole.log(intToMiniRoman(3) === 'iii');\nconsole.log(intToMiniRoman(15) === 'xv');\nconsole.log(intToMiniRoman(89) === 'lxxxix');",
  "157": "function rightAngleTriangle(a, b, c) {\n    return a*a === b*b + c*c || b*b === a*a + c*c || c*c === a*a + b*b;\n}\n\n// Test cases\nconsole.log(rightAngleTriangle(3, 4, 5) === true);\nconsole.log(rightAngleTriangle(5, 12, 13) === true);\nconsole.log(rightAngleTriangle(8, 15, 17) === true);\nconsole.log(rightAngleTriangle(7, 24, 25) === true);\nconsole.log(rightAngleTriangle(9, 40, 41) === true);\n```  ",
  "158": "function findMax(words) {\n    return words.sort((a, b) => {\n        if (new Set(a).size !== new Set(b).size) {\n            return new Set(b).size - new Set(a).size;\n        } else {\n            return a.localeCompare(b);\n        }\n    })[0];\n}\n\n// Test cases\nconsole.log(findMax([\"apple\", \"banana\", \"cherry\"]) === \"cherry\");\nconsole.log(findMax([\"cat\", \"dog\", \"elephant\"]) === \"elephant\");\nconsole.log(findMax([\"python\", \"java\", \"javascript\"]) === \"javascript\");",
  "159": "function eat(number, need, remaining) {\n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}\n\nconsole.log(JSON.stringify(eat(5, 3, 4)) === JSON.stringify([8, 1]));\nconsole.log(JSON.stringify(eat(10, 5, 7)) === JSON.stringify([15, 2]));\nconsole.log(JSON.stringify(eat(0, 10, 10)) === JSON.stringify([10, 0]));\nconsole.log(JSON.stringify(eat(100, 50, 75)) === JSON.stringify([150, 25]));\n```  ",
  "160": "function doAlgebra(operator, operand) {\n    let expression = String(operand[0]);\n    for (let i = 1; i < operand.length; i++) {\n        expression += operator[i - 1] + String(operand[i]);\n    }\n    return eval(expression);\n}\n\n// Test cases\nconsole.log(doAlgebra(['+', '-'], [5, 3, 2]) === 6);",
  "161": "function solve(s) {\n    let flg = 0;\n    let idx = 0;\n    let newStr = s.split('');\n    for (let i of s) {\n        if (i.match(/[a-zA-Z]/)) {\n            newStr[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n            flg = 1;\n        }\n        idx++;\n    }\n    s = \"\";\n    for (let i of newStr) {\n        s += i;\n    }\n    if (flg === 0) {\n        return s.split('').reverse().join('');\n    }\n    return s;\n}\n\nconsole.log(solve(\"Hello World\") === \"hELLO wORLD\");\nconsole.log(solve(\"12345\") === \"54321\");\nconsole.log(solve(\"abc123#$%\") === \"ABC123#$%\");\nconsole.log(solve(\"lowercase\") === \"LOWERCASE\");\n```  ",
  "162": "function stringToMd5(text) {\n    const crypto = require('crypto');\n    return text ? crypto.createHash('md5').update(text).digest('hex') : null;\n}\n\nconsole.log(stringToMd5('12345') === '827ccb0eea8a706c4c34a16891f84e7b');\nconsole.log(stringToMd5('') === null);",
  "163": "function generateIntegers(a, b) {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n\n    return Array.from({length: upper - lower + 1}, (_, index) => index + lower).filter(i => i % 2 === 0);\n}\n\nconsole.log(generateIntegers(3, 5)); // Output: [4]\nconsole.log(generateIntegers(5, 3)); // Output: [4]\nconsole.log(generateIntegers(2, 8)); // Output: [2, 4, 6, 8]\nconsole.log(generateIntegers(8, 2)); // Output: [2, 4, 6, 8]\nconsole.log(generateIntegers(1, 10)); // Output: [2, 4, 6, 8]\n```   "
}