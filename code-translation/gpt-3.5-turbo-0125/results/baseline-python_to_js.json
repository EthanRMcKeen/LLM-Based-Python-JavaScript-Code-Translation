{
  "0": "function hasCloseElements(numbers, threshold) {\n    for (let idx = 0; idx < numbers.length; idx++) {\n        for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n            if (idx !== idx2) {\n                let distance = Math.abs(numbers[idx] - numbers[idx2]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```  ",
  "1": "function separateParenGroups(parenString) {\n    let result = [];\n    let currentString = [];\n    let currentDepth = 0;\n\n    for (let i = 0; i < parenString.length; i++) {\n        let c = parenString[i];\n        if (c === '(') {\n            currentDepth++;\n            currentString.push(c);\n        } else if (c === ')') {\n            currentDepth--;\n            currentString.push(c);\n\n            if (currentDepth === 0) {\n                result.push(currentString.join(''));\n                currentString = [];\n            }\n        }\n    }\n\n    return result;\n}\n```  ",
  "2": "function truncateNumber(number) {\n    return number % 1.0;\n}",
  "3": "function belowZero(operations) {\n    let balance = 0;\n\n    for(let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n```",
  "4": "function meanAbsoluteDeviation(numbers) {\n    const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\n    return numbers.reduce((acc, x) => acc + Math.abs(x - mean), 0) / numbers.length;\n}\n```",
  "5": "function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    let result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}",
  "6": "function parseNestedParens(parenString) {\n\n    function parseParenGroup(s) {\n        let depth = 0;\n        let maxDepth = 0;\n        for (let c of s) {\n            if (c === '(') {\n                depth += 1;\n                maxDepth = Math.max(depth, maxDepth);\n            } else {\n                depth -= 1;\n            }\n        }\n        return maxDepth;\n    }\n\n    return parenString.split(' ').filter(x => x).map(x => parseParenGroup(x));\n}\n```",
  "7": "function filterBySubstring(strings, substring) {\n    return strings.filter(x => x.includes(substring));\n}",
  "8": "function sumProduct(numbers) {\n    let sumValue = 0;\n    let prodValue = 1;\n\n    for (let n of numbers) {\n        sumValue += n;\n        prodValue *= n;\n    }\n    return [sumValue, prodValue];\n}\n```",
  "9": "function rollingMax(numbers) {\n    let runningMax = null;\n    let result = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}\n```",
  "10": "function isPalindrome(string) {\n    return string === string.split('').reverse().join('');\n}\n\nfunction makePalindrome(string) {\n    if (!string) {\n        return '';\n    }\n\n    let beginningOfSuffix = 0;\n\n    while (!isPalindrome(string.substr(beginningOfSuffix))) {\n        beginningOfSuffix++;\n    }\n\n    return string + string.substr(0, beginningOfSuffix).split('').reverse().join('');\n}\n```",
  "11": "function stringXor(a, b) {\n    function xor(i, j) {\n        if (i === j) {\n            return '0';\n        } else {\n            return '1';\n        }\n    }\n\n    return [...a].map((x, index) => xor(x, b[index])).join('');\n}",
  "12": "function longestString(strings) {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    let maxLength = Math.max(...strings.map(s => s.length));\n    for (let str of strings) {\n        if (str.length === maxLength) {\n            return str;\n        }\n    }\n}\n```",
  "13": "function greatestCommonDivisor(a, b) {\n    while (b) {\n        let temp = a;\n        a = b;\n        b = temp % b;\n    }\n    return a;\n}",
  "14": "function allPrefixes(string) {\n    let result = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.slice(0, i+1));\n    }\n    \n    return result;\n}\n```",
  "15": "function stringSequence(n) {\n    return Array.from({length: n + 1}, (x, i) => i).join(' ');\n}",
  "16": "function countDistinctCharacters(string) {\n    return new Set(string.toLowerCase()).size;\n}",
  "17": "function parseMusic(musicString) {\n    const noteMap = { 'o': 4, 'o|': 2, '.|': 1 };\n    return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}",
  "18": "function howManyTimes(string, substring) {\n    let times = 0;\n\n    for (let i = 0; i < string.length - substring.length + 1; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n\n    return times;\n}\n```",
  "19": "function sortNumbers(numbers) {\n    const valueMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').filter(x => x).sort((a, b) => valueMap[a] - valueMap[b]).join(' ');\n}\n```  ",
  "20": "function findClosestElements(numbers) {\n    let closestPair = null;\n    let distance = null;\n\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = 0; j < numbers.length; j++) {\n            if (i !== j) {\n                if (distance === null) {\n                    distance = Math.abs(numbers[i] - numbers[j]);\n                    closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                } else {\n                    let newDistance = Math.abs(numbers[i] - numbers[j]);\n                    if (newDistance < distance) {\n                        distance = newDistance;\n                        closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                    }\n                }\n            }\n        }\n    }\n\n    return closestPair;\n}\n```",
  "21": "function rescaleToUnit(numbers) {\n    var minNumber = Math.min(...numbers);\n    var maxNumber = Math.max(...numbers);\n    return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}\n```",
  "22": "function filterIntegers(values) {\n    return values.filter(x => typeof x === 'number' && Number.isInteger(x));\n}\n```",
  "23": "function strLen(string) {\n    return string.length;\n}",
  "24": "function largestDivisor(n) {\n    for (let i = n; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}",
  "25": "function factorize(n) {\n    const fact = [];\n    let i = 2;\n    while (i <= parseInt(Math.sqrt(n) + 1)) {\n        if (n % i === 0) {\n            fact.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n\n    if (n > 1) {\n        fact.push(n);\n    }\n    return fact;\n}\n```",
  "26": "function removeDuplicates(numbers) {\n    const counter = {};\n    \n    numbers.forEach(num => {\n        counter[num] = (counter[num] || 0) + 1;\n    });\n\n    return numbers.filter(num => counter[num] <= 1);\n}",
  "27": "function flipCase(string) {\n    return string.split(\"\").map(function(char) {\n        if (char === char.toUpperCase()) {\n            return char.toLowerCase();\n        } else {\n            return char.toUpperCase();\n        }\n    }).join(\"\");\n}",
  "28": "function concatenate(strings) {\n    return strings.join('');\n}\n```",
  "29": "function filterByPrefix(strings, prefix) {\n    return strings.filter(x => x.startsWith(prefix));\n}",
  "30": "function getPositive(l) {\n    return l.filter(e => e > 0);\n}",
  "31": "function isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    \n    for (let k = 2; k < n - 1; k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
  "32": "function poly(xs, x) {\n    /**\n     * Evaluates polynomial with coefficients xs at point x.\n     * return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    return xs.reduce((acc, coeff, i) => acc + coeff * Math.pow(x, i), 0);\n}\n\nfunction findZero(xs) {\n    let begin = -1.0, end = 1.0;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.0;\n        end *= 2.0;\n    }\n    while (end - begin > 1e-10) {\n        let center = (begin + end) / 2.0;\n        if (poly(xs, center) * poly(xs, begin) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n```",
  "33": "function sortThird(list) {\n    let newList = list.slice();\n    newList.filter((_, index) => index % 3 === 0).sort((a, b) => a - b).forEach((val, index) => {\n        newList.splice(index * 3, 1, val);\n    });\n    return newList;\n}",
  "34": "function unique(inputList) {\n    return [...new Set(inputList)].sort();\n}",
  "35": "function maxElement(l) {\n    let m = l[0];\n    \n    for(let i = 0; i < l.length; i++) {\n        if (l[i] > m) {\n            m = l[i];\n        }\n    }\n    \n    return m;\n}",
  "36": "function fizzBuzz(n) {\n    let ns = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            ns.push(i);\n        }\n    }\n    let s = ns.map(String).join('');\n    let ans = 0;\n    for (let c of s) {\n        ans += (c === '7') ? 1 : 0;\n    }\n    return ans;\n}\n```",
  "37": "function sortEven(l) {\n    const evens = l.filter((_, index) => index % 2 === 0);\n    const odds = l.filter((_, index) => index % 2 !== 0);\n    evens.sort((a, b) => a - b);\n    const ans = [];\n    for (let i = 0; i < evens.length; i++) {\n        ans.push(evens[i]);\n        ans.push(odds[i]);\n    }\n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n    return ans;\n}",
  "38": "function encodeCyclic(s) {\n    /**\n    returns encoded string by cycling groups of three characters.\n    */\n    // split string to groups. Each of length 3.\n    let groups = [...Array(Math.ceil(s.length / 3))].map((_, i) => s.slice(3 * i, 3 * i + 3));\n    // cycle elements in each group. Unless group has fewer elements than 3.\n    groups = groups.map(group => (group.length === 3) ? group.slice(1) + group[0] : group);\n    return groups.join(\"\");\n}\n\nfunction decodeCyclic(s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n```  ",
  "39": "function primeFib(n) {\n    function isPrime(p) {\n        if (p < 2) {\n            return false;\n        }\n        for (let k = 2; k < Math.min(parseInt(Math.sqrt(p)) + 1, p - 1); k++) {\n            if (p % k === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let f = [0, 1];\n    while (true) {\n        f.push(f.slice(-1)[0] + f.slice(-2)[0]);\n        if (isPrime(f.slice(-1)[0])) {\n            n -= 1;\n        }\n        if (n === 0) {\n            return f.slice(-1)[0];\n        }\n    }\n}\n```  ",
  "40": "function triplesSumToZero(l) {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n```",
  "41": "function carRaceCollision(n) {\n    return n ** 2;\n}",
  "42": "function incrList(arr) {\n    return arr.map(e => e + 1);\n}",
  "43": "function pairsSumToZero(l) {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
  "44": "function changeBase(x, base) {\n    let ret = \"\";\n    while (x > 0) {\n        ret = (x % base).toString() + ret;\n        x = Math.floor(x / base);\n    }\n    return ret;\n}",
  "45": "function triangleArea(a, h) {\n    return a * h / 2.0;\n}",
  "46": "function fib4(n) {\n    let results = [0, 0, 2, 0];\n\n    if (n < 4) {\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++) {\n        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n        results.shift();\n    }\n\n    return results[results.length - 1];\n}\n```",
  "47": "function median(l) {\n    l = l.sort((a, b) => a - b);\n    if (l.length % 2 === 1) {\n        return l[Math.floor(l.length / 2)];\n    } else {\n        return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n    }\n}",
  "48": "function isPalindrome(text) {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n```",
  "49": "function modp(n, p) {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}",
  "50": "function encodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) + 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\nfunction decodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0)).join('');\n}\n```",
  "51": "function removeVowels(text) {\n    return text.split('').filter(s => !['a', 'e', 'i', 'o', 'u'].includes(s.toLowerCase())).join('');\n}\n```",
  "52": "function belowThreshold(l, t) {\n    for (let e of l) {\n        if (e >= t) {\n            return false;\n        }\n    }\n    return true;\n}",
  "53": "function add(x, y) {\n    return x + y;\n}",
  "54": "function sameChars(s0, s1) {\n    return new Set(s0) === new Set(s1);\n}",
  "55": "function fib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n```  ",
  "56": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
  "57": "function isMonotonic(arr) {\n    if (arr.join('') === arr.slice().sort().join('') || arr.join('') === arr.slice().sort().reverse().join('')) {\n        return true;\n    }\n    return false;\n}",
  "58": "function common(l1, l2) {\n    let ret = new Set();\n    for (let e1 of l1) {\n        for (let e2 of l2) {\n            if (e1 === e2) {\n                ret.add(e1);\n            }\n        }\n    }\n    return Array.from(ret).sort();\n}",
  "59": "function largestPrimeFactor(n) {\n\n    function isPrime(k) {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let largest = 1;\n    for (let j = 2; j <= n; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n\n    return largest;\n}\n```",
  "60": "function sumToN(n) {\n    return Array.from({length: n + 1}, (_, i) => i).reduce((acc, curr) => acc + curr, 0);\n}",
  "61": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let b of brackets) {\n        if (b === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n```",
  "62": "function derivative(xs) {\n    return xs.map((x, i) => x * i).slice(1);\n}",
  "63": "function fibfib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
  "64": "function vowelsCount(s) {\n  const vowels = \"aeiouAEIOU\";\n  let nVowels = s.split('').reduce((count, char) => {\n    if (vowels.includes(char)) {\n      return count + 1;\n    } else {\n      return count;\n    }\n  }, 0);\n  \n  if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n    nVowels += 1;\n  }\n  \n  return nVowels;\n}",
  "65": "function circularShift(x, shift) {\n    let s = String(x);\n    if (shift > s.length) {\n        return s.split('').reverse().join('');\n    } else {\n        return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n    }\n}",
  "66": "function digitSum(s) {\n    if (s === \"\") return 0;\n    return s.split('').reduce((sum, char) => {\n        return sum + (char.toUpperCase() === char ? char.charCodeAt(0) : 0);\n    }, 0);\n}\n```",
  "67": "function fruitDistribution(s, n) {\n    let lis = [];\n    s.split(' ').forEach((i) => {\n        if (!isNaN(i)) {\n            lis.push(parseInt(i));\n        }\n    });\n    return n - lis.reduce((acc, curr) => acc + curr, 0);\n}",
  "68": "function pluck(arr) {\n    if(arr.length === 0) return [];\n    \n    const evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n    \n    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}",
  "69": "function search(lst) {\n    let frq = Array(Math.max(...lst) + 1).fill(0);\n    \n    for (let i of lst) {\n        frq[i]++;\n    }\n    \n    let ans = -1;\n    for (let i = 1; i < frq.length; i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n    \n    return ans;\n}\n```",
  "70": "function strangeSortList(lst) {\n    let res = [];\n    let switchBool = true;\n    \n    while (lst.length > 0) {\n        res.push(switchBool ? Math.min(...lst) : Math.max(...lst));\n        lst.splice(lst.indexOf(res[res.length - 1]), 1);\n        switchBool = !switchBool;\n    }\n    \n    return res;\n}\n```",
  "71": "function triangleArea(a, b, c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    let s = (a + b + c) / 2;\n    let area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n    area = Math.round(area, 2);\n    return area;\n}",
  "72": "function willItFly(q, w) {\n    if (q.reduce((a, b) => a + b, 0) > w) {\n        return false;\n    }\n\n    let i = 0;\n    let j = q.length - 1;\n    while (i < j) {\n        if (q[i] !== q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n```",
  "73": "function smallestChange(arr) {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}",
  "74": "function totalMatch(lst1, lst2) {\n    let l1 = 0;\n    for (let st of lst1) {\n        l1 += st.length;\n    }\n    \n    let l2 = 0;\n    for (let st of lst2) {\n        l2 += st.length;\n    }\n    \n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n```",
  "75": "function isMultiplyPrime(a) {\n\n    function isPrime(n) {\n        for (var j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (var i = 2; i <= 100; i++) {\n        if (!isPrime(i)) continue;\n        for (var j = 2; j <= 100; j++) {\n            if (!isPrime(j)) continue;\n            for (var k = 2; k <= 100; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n\n    return false;\n}\n```",
  "76": "function isSimplePower(x, n) {\n    if (n === 1) {\n        return (x === 1);\n    }\n    let power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n    return (power === x);\n}",
  "77": "function isCube(a) {\n    a = Math.abs(a);\n    return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a;\n}\n```",
  "78": "function hexKey(num) {\n    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n    \n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i])) {\n            total += 1;\n        }\n    }\n\n    return total;\n}\n```",
  "79": "function decimalToBinary(decimal) {\n    return \"db\" + decimal.toString(2) + \"db\";\n}",
  "80": "function isHappy(s) {\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```",
  "81": "function numericalLetterGrade(grades) {\n    var letterGrade = [];\n    for (var i = 0; i < grades.length; i++) {\n        var gpa = grades[i];\n        if (gpa === 4.0) {\n            letterGrade.push(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrade.push(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrade.push(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrade.push(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrade.push(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrade.push(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrade.push(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrade.push(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrade.push(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrade.push(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrade.push(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrade.push(\"D-\");\n        } else {\n            letterGrade.push(\"E\");\n        }\n    }\n    return letterGrade;\n}\n```",
  "82": "function primeLength(string) {\n    let length = string.length;\n    if (length === 0 || length === 1) {\n        return false;\n    }\n    for (let i = 2; i < length; i++) {\n        if (length % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}",
  "83": "function startsOneEnds(n) {\n    if (n === 1) {\n        return 1;\n    }\n    return 18 * Math.pow(10, n - 2);\n}",
  "84": "function solve(N) {\n    return (parseInt([...String(N)].reduce((sum, i) => sum + Number(i), 0)).toString(2));\n}",
  "85": "function add(lst) {\n    return lst.filter((value, index) => index % 2 !== 0 && value % 2 === 0)\n              .reduce((acc, curr) => acc + curr, 0);\n}",
  "86": "function antiShuffle(s) {\n    return s.split(' ').map(function(i) {\n        return i.split('').sort().join('');\n    }).join(' ');\n}",
  "87": "function getRow(lst, x) {\n    const coords = [];\n    lst.forEach((row, i) => {\n        row.forEach((value, j) => {\n            if (value === x) {\n                coords.push([i, j]);\n            }\n        });\n    });\n    \n    return coords.sort((a, b) => {\n        if (a[1] === b[1]) {\n            return a[0] - b[0];\n        }\n        return b[1] - a[1];\n    });\n}\n```  ",
  "88": "function sortArray(array) {\n    return array.length === 0 ? [] : array.slice().sort((a, b) => (a + b) % 2 === 0 ? 1 : -1);\n}",
  "89": "const encrypt = (s) => {\n    const d = 'abcdefghijklmnopqrstuvwxyz';\n    let out = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (d.includes(c)) {\n            out += d[(d.indexOf(c) + 4) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n};",
  "90": "function nextSmallest(lst) {\n    lst = Array.from(new Set(lst)).sort();\n    return lst.length < 2 ? null : lst[1];\n}",
  "91": "function isBored(S) {\n    let sentences = S.split(/[\\.\\?!]\\s*/);\n    return sentences.reduce((count, sentence) => {\n        return count + (sentence.slice(0, 2) === 'I ' ? 1 : 0);\n    }, 0);\n}",
  "92": "function anyInt(x, y, z) {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}",
  "93": "function encodeMessage(message) {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries(Array.from(vowels, i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n    message = message.split('').map(i => vowelsReplace[i] ? vowelsReplace[i] : i).join('');\n    return message;\n}",
  "94": "function findMaxPrimeDigitSum(lst) {\n\n    function isPrime(n) {\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let maxNumber = 0;\n    let i = 0;\n    \n    while (i < lst.length) {\n        if (lst[i] > maxNumber && isPrime(lst[i])) {\n            maxNumber = lst[i];\n        }\n        i++;\n    }\n    \n    let maxNumberDigitsSum = Array.from(String(maxNumber), Number).reduce((acc, val) => acc + val, 0);\n  \n    return maxNumberDigitsSum;\n}\n```",
  "95": "function checkDictCase(obj) {\n    if (Object.keys(obj).length === 0) {\n        return false;\n    } else {\n        let state = \"start\";\n        for (let key in obj) {\n            if (typeof key !== \"string\") {\n                state = \"mixed\";\n                break;\n            }\n            if (state === \"start\") {\n                if (key.toUpperCase() === key) {\n                    state = \"upper\";\n                } else if (key.toLowerCase() === key) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state === \"upper\" && key.toUpperCase() !== key) || (state === \"lower\" && key.toLowerCase() !== key)) {\n                state = \"mixed\";\n                break;\n            } else {\n                break;\n            }\n        }\n        return state === \"upper\" || state === \"lower\";\n    }\n}\n```",
  "96": "function countUpTo(n) {\n    var primes = [];\n    for (var i = 2; i < n; i++) {\n        var isPrime = true;\n        for (var j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}",
  "97": "function multiply(a, b) {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}",
  "98": "function countUpper(s) {\n    let count = 0;\n    \n    for (let i = 0; i < s.length; i += 2) {\n        if (\"AEIOU\".includes(s[i])) {\n            count++;\n        }\n    }\n    \n    return count;\n}",
  "99": "function closestInteger(value) {\n    let res;\n    \n    if (value.split('.').length === 2) {\n        // remove trailing zeros\n        while (value.charAt(value.length - 1) === '0') {\n            value = value.slice(0, -1);\n        }\n    }\n    \n    let num = parseFloat(value);\n    if (value.slice(-2) === '.5') {\n        if (num > 0) {\n            res = Math.ceil(num);\n        } else {\n            res = Math.floor(num);\n        }\n    } else if (value.length > 0) {\n        res = Math.round(num);\n    } else {\n        res = 0;\n    }\n    \n    return res;\n}\n```  ",
  "100": "function makeAPile(n) {\n    let pile = [];\n    for (let i = 0; i < n; i++) {\n        pile.push(n + 2 * i);\n    }\n    return pile;\n}",
  "101": "function wordsString(s) {\n    if (!s) {\n        return [];\n    }\n\n    var sList = [];\n\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i) === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(s.charAt(i));\n        }\n    }\n\n    var newString = sList.join(\"\");\n    return newString.split(' ');\n}",
  "102": "function chooseNum(x, y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x === y) {\n        return -1;\n    }\n    return y - 1;\n}\n```",
  "103": "function roundedAvg(n, m) {\n    if (m < n) {\n        return -1;\n    }\n    \n    let summation = 0;\n    for (let i = n; i <= m; i++) {\n        summation += i;\n    }\n    \n    return (summation / (m - n + 1)).toString(2);\n}",
  "104": "function uniqueDigits(x) {\n    let oddDigitElements = [];\n    \n    for (let i of x) {\n        if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {\n            oddDigitElements.push(i);\n        }\n    }\n    \n    return oddDigitElements.sort();\n}",
  "105": "function byLength(arr) {\n    const dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    };\n    const sortedArr = arr.slice().sort((a, b) => b - a);\n    const newArr = [];\n    for (let i = 0; i < sortedArr.length; i++) {\n        try {\n            newArr.push(dic[sortedArr[i]]);\n        } catch {\n            continue;\n        }\n    }\n    return newArr;\n}\n```",
  "106": "function calculateValues(n) {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        let x;\n        if (i % 2 === 0) {\n            x = 1;\n            for (let j = 1; j <= i; j++) {\n                x *= j;\n            }\n        } else {\n            x = 0;\n            for (let j = 1; j <= i; j++) {\n                x += j;\n            }\n        }\n        result.push(x);\n    }\n    return result;\n}\n```",
  "107": "function evenOddPalindrome(n) {\n\n    function isPalindrome(n) {\n        return n.toString() === n.toString().split('').reverse().join('');\n    }\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n}\n```",
  "108": "function countNums(arr) {\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        n = Array.from(String(n), Number);\n        n[0] = n[0] * neg;\n        return n.reduce((a, b) => a + b, 0);\n    }\n    return arr.filter(i => digitsSum(i) > 0).length;\n}",
  "109": "function moveOneBall(arr) {\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    const sortedArray = arr.slice().sort((a, b) => a - b);\n    let myArr = [];\n    \n    const minValue = Math.min(...arr);\n    const minIndex = arr.indexOf(minValue);\n    myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n    \n    for (let i = 0; i < arr.length; i++) {\n        if (myArr[i] !== sortedArray[i]) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n```",
  "110": "function exchange(lst1, lst2) {\n    let odd = 0;\n    let even = 0;\n    \n    for (let i of lst1) {\n        if (i % 2 === 1) {\n            odd++;\n        }\n    }\n    \n    for (let i of lst2) {\n        if (i % 2 === 0) {\n            even++;\n        }\n    }\n    \n    if (even >= odd) {\n        return \"YES\";\n    }\n    \n    return \"NO\";\n}",
  "111": "function histogram(test) {\n    let dict1 = {};\n    let list1 = test.split(\" \");\n    let t = 0;\n\n    for (let i of list1) {\n        if (list1.filter(item => item === i).length > t && i !== '') {\n            t = list1.filter(item => item === i).length;\n        }\n    }\n\n    if (t > 0) {\n        for (let i of list1) {\n            if (list1.filter(item => item === i).length === t) {\n                dict1[i] = t;\n            }\n        }\n    }\n\n    return dict1;\n}\n```  ",
  "112": "function reverseDelete(s, c) {\n    s = s.split('').filter(char => !c.includes(char)).join('');\n    return [s, s.split('').reverse().join('') === s];\n}",
  "113": "function oddCount(lst) {\n    let res = [];\n    for (let arr of lst) {\n        let n = arr.reduce((count, d) => count + (parseInt(d) % 2 === 1), 0);\n        res.push(`the number of odd elements ${n} in the string ${n} of the input.`);\n    }\n    return res;\n}\n```",
  "114": "function minSubArraySum(nums) {\n    let maxSum = 0;\n    let s = 0;\n\n    for (let i = 0; i < nums.length; i++) {\n        s += -nums[i];\n        if (s < 0) {\n            s = 0;\n        }\n        maxSum = Math.max(s, maxSum);\n    }\n\n    if (maxSum === 0) {\n        maxSum = Math.max(...nums.map(i => -i));\n    }\n    \n    let minSum = -maxSum;\n    return minSum;\n}\n```",
  "115": "function maxFill(grid, capacity) {\n    return grid.reduce((total, arr) => {\n        return total + Math.ceil(arr.reduce((sum, val) => sum + val, 0) / capacity);\n    }, 0);\n}",
  "116": "function sortArray(arr) {\n    return arr.sort((a, b) => {\n        let countA = (a.toString(2).match(/1/g) || []).length;\n        let countB = (b.toString(2).match(/1/g) || []).length;\n        return countA - countB;\n    });\n}\n```",
  "117": "function selectWords(s, n) {\n    var result = [];\n    var words = s.split(\" \");\n\n    for (var j = 0; j < words.length; j++) {\n        var word = words[j];\n        var nConsonants = 0;\n\n        for (var i = 0; i < word.length; i++) {\n            if (![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(word[i].toLowerCase())) {\n                nConsonants++;\n            }\n        }\n\n        if (nConsonants === n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n}\n```  ",
  "118": "function getClosestVowel(word) {\n    if (word.length < 3) {\n        return \"\";\n    }\n\n    const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"]);\n\n    for (let i = word.length - 2; i > 0; i--) {\n        if (vowels.has(word[i])) {\n            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n\n    return \"\";\n}\n```",
  "119": "function matchParens(lst) {\n\n    function check(s) {\n        let val = 0;\n        for (let i of s) {\n            if (i === '(') {\n                val++;\n            } else {\n                val--;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val === 0 ? true : false;\n    }\n\n    const S1 = lst[0] + lst[1];\n    const S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n```",
  "120": "function maximum(arr, k) {\n    if (k === 0) {\n        return [];\n    }\n    arr.sort();\n    let ans = arr.slice(-k);\n    return ans;\n}",
  "121": "function solution(lst) {\n    return lst.filter((x, idx) => idx % 2 === 0 && x % 2 === 1).reduce((acc, val) => acc + val, 0);\n}",
  "122": "function addElements(arr, k) {\n    return arr.slice(0, k)\n        .filter(elem => elem.toString().length <= 2)\n        .reduce((acc, elem) => acc + elem, 0);\n}",
  "123": "function getOddCollatz(n) {\n    let oddCollatz;\n    \n    if (n % 2 === 0) {\n        oddCollatz = [];\n    } else {\n        oddCollatz = [n];\n    }\n    \n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n        \n        if (n % 2 === 1) {\n            oddCollatz.push(Math.floor(n));\n        }\n    }\n    \n    return oddCollatz.sort((a, b) => a - b);\n}",
  "124": "function validDate(date) {\n    try {\n        date = date.trim();\n        let [month, day, year] = date.split('-');\n        month = parseInt(month);\n        day = parseInt(day);\n        year = parseInt(year);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (([1,3,5,7,8,10,12].includes(month) && (day < 1 || day > 31)) || \n            ([4,6,9,11].includes(month) && (day < 1 || day > 30)) || \n            (month === 2 && (day < 1 || day > 29))) {\n            return false;\n        }\n    } catch(e) {\n        return false;\n    }\n\n    return true;\n}\n```",
  "125": "function splitWords(txt) {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.replace(',', ' ').split(\" \");\n    } else {\n        return txt.split(\"\").filter(i => i.match(/[a-z]/) && i.charCodeAt(0) % 2 === 0).length;\n    }\n}",
  "126": "function isSorted(lst) {\n    let countDigit = {};\n    for (let i of lst) {\n        countDigit[i] = (countDigit[i] || 0) + 1;\n    }\n\n    for (let i of lst) {\n        if (countDigit[i] > 2) {\n            return false;\n        }\n    }\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n```",
  "127": "function intersection(interval1, interval2) {\n\n    function isPrime(num) {\n        if (num === 1 || num === 0) {\n            return false;\n        }\n        if (num === 2) {\n            return true;\n        }\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n```  ",
  "128": "function calculateProdSigns(arr) {\n    if (!arr) return null;\n    const prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);\n    return prod * arr.reduce((sum, i) => sum + Math.abs(i), 0);\n}\n```",
  "129": "function minPath(grid, k) {\n    let n = grid.length;\n    let val = n * n + 1;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                let temp = [];\n\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n\n                val = Math.min(...temp);\n            }\n        }\n    }\n\n    let ans = [];\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            ans.push(1);\n        } else {\n            ans.push(val);\n        }\n    }\n    return ans;\n}\n```",
  "130": "function generateTri(n) {\n    if (n === 0) {\n        return [1];\n    }\n\n    let myTri = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            myTri.push(i / 2 + 1);\n        } else {\n            myTri.push(myTri[i - 1] + myTri[i - 2] + (i + 3) / 2);\n        }\n    }\n    return myTri;\n}",
  "131": "function digits(n) {\n    let product = 1;\n    let oddCount = 0;\n    \n    for (let digit of n.toString()) {\n        let intDigit = parseInt(digit);\n        if (intDigit % 2 === 1) {\n            product *= intDigit;\n            oddCount++;\n        }\n    }\n\n    if (oddCount === 0) {\n        return 0;\n    } else {\n        return product;\n    }\n}",
  "132": "function isNested(string) {\n    let openingBracketIndex = [];\n    let closingBracketIndex = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openingBracketIndex.push(i);\n        } else {\n            closingBracketIndex.push(i);\n        }\n    }\n    closingBracketIndex.reverse();\n    let cnt = 0;\n    let i = 0;\n    let l = closingBracketIndex.length;\n    for (let idx of openingBracketIndex) {\n        if (i < l && idx < closingBracketIndex[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    return cnt >= 2;\n}\n```",
  "133": "function sumSquares(lst) {\n    const math = require('math');\n    let squared = 0;\n    for (let i of lst) {\n        squared += math.ceil(i) ** 2;\n    }\n    return squared;\n}",
  "134": "function checkIfLastCharIsALetter(txt) {\n    var check = txt.split(' ').pop();\n    return check.length === 1 && (97 <= check.toLowerCase().charCodeAt(0) && check.toLowerCase().charCodeAt(0) <= 122);\n}",
  "135": "const canArrange = (arr) => {\n    let ind = -1;\n    let i = 1;\n    while (i < arr.length) {\n        if (arr[i] < arr[i - 1]) {\n            ind = i;\n        }\n        i++;\n    }\n    return ind;\n};",
  "136": "function largestSmallestIntegers(lst) {\n    let smallest = lst.filter(x => x < 0);\n    let largest = lst.filter(x => x > 0);\n    return [(smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null)];\n}",
  "137": "function compareOne(a, b) {\n    let tempA = a;\n    let tempB = b;\n    \n    if (typeof tempA === 'string') tempA = tempA.replace(',', '.');\n    if (typeof tempB === 'string') tempB = tempB.replace(',', '.');\n    \n    if (parseFloat(tempA) == parseFloat(tempB)) return null;\n    \n    return parseFloat(tempA) > parseFloat(tempB) ? a : b;\n}",
  "138": "function isEqualToSumEven(n) {\n    return n % 2 === 0 && n >= 8;\n}",
  "139": "function specialFactorial(n) {\n    let factI = 1;\n    let specialFact = 1;\n    \n    for (let i = 1; i <= n; i++) {\n        factI *= i;\n        specialFact *= factI;\n    }\n    \n    return specialFact;\n}",
  "140": "function fixSpaces(text) {\n    let newText = \"\";\n    let i = 0;\n    let start = 0, end = 0;\n    while (i < text.length) {\n        if (text[i] === \" \") {\n            end += 1;\n        } else {\n            if (end - start > 2) {\n                newText += \"-\" + text[i];\n            } else if (end - start > 0) {\n                newText += \"_\".repeat(end - start) + text[i];\n            } else {\n                newText += text[i];\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) {\n        newText += \"-\";\n    } else if (end - start > 0) {\n        newText += \"_\";\n    }\n    return newText;\n}\n```",
  "141": "function fileNameCheck(fileName) {\n    const suf = ['txt', 'exe', 'dll'];\n    const lst = fileName.split('.');\n    \n    if (lst.length !== 2) {\n        return 'No';\n    }\n    \n    if (!suf.includes(lst[1])) {\n        return 'No';\n    }\n    \n    if (lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/)) {\n        return 'No';\n    }\n    \n    const digitCount = lst[0].split('').filter(x => !isNaN(x)).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    \n    return 'Yes';\n}\n```  ",
  "142": "function sumSquares(lst) {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result.push(lst[i] ** 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            result.push(lst[i] ** 3);\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    return result.reduce((acc, curr) => acc + curr, 0);\n}\n```",
  "143": "function wordsInSentence(sentence) {\n    let newLst = [];\n    sentence.split(\" \").forEach(word => {\n        let flg = 0;\n        if (word.length === 1) {\n            flg = 1;\n        }\n        for (let i = 2; i < word.length; i++) {\n            if (word.length % i === 0) {\n                flg = 1;\n            }\n        }\n        if (flg === 0 || word.length === 2) {\n            newLst.push(word);\n        }\n    });\n    return newLst.join(\" \");\n}\n```",
  "144": "function simplify(x, n) {\n    let [a, b] = x.split(\"/\");\n    let [c, d] = n.split(\"/\");\n    let numerator = parseInt(a) * parseInt(c);\n    let denom = parseInt(b) * parseInt(d);\n    if (numerator / denom === parseInt(numerator / denom)) {\n        return true;\n    }\n    return false;\n}\n```",
  "145": "function orderByPoints(nums) {\n\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        n = Array.from(String(n), Number);\n        n[0] = n[0] * neg;\n        return n.reduce((a, b) => a + b, 0);\n    }\n\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n```",
  "146": "function specialFilter(nums) {\n    let count = 0;\n    const oddDigits = [1, 3, 5, 7, 9];\n    \n    nums.forEach(num => {\n        if (num > 10) {\n            const numberAsString = num.toString();\n            if (oddDigits.includes(parseInt(numberAsString[0])) && oddDigits.includes(parseInt(numberAsString[numberAsString.length - 1]))) {\n                count++;\n            }\n        }\n    });\n    \n    return count;\n}\n```",
  "147": "function getMaxTriples(n) {\n    const A = Array.from({length: n}, (_, i) => i*i - i + 1);\n    let ans = [];\n\n    for (let i = 0; i < n; i++) {\n        for (let j = i+1; j < n; j++) {\n            for (let k = j+1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    ans.push([A[i], A[j], A[k]]);\n                }\n            }\n        }\n    }\n\n    return ans.length;\n}\n```",
  "148": "function planetJourney(planet1, planet2) {\n    const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {\n        return [];\n    }\n\n    const planet1Index = planetNames.indexOf(planet1);\n    const planet2Index = planetNames.indexOf(planet2);\n\n    if (planet1Index < planet2Index) {\n        return planetNames.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetNames.slice(planet2Index + 1, planet1Index);\n    }\n}\n```",
  "149": "function sortedListSum(lst) {\n    lst.sort();\n    let newList = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newList.push(i);\n        }\n    }\n    return newList.sort((a, b) => a.length - b.length);\n}\n```",
  "150": "function xOrY(n, x, y) {\n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}",
  "151": "function doubleTheDifference(lst) {\n    return lst.reduce((sum, i) => {\n        if (i > 0 && i % 2 !== 0 && !String(i).includes('.')) {\n            return sum + i ** 2;\n        } else {\n            return sum;\n        }\n    }, 0);\n}",
  "152": "function compare(game, guess) {\n    return game.map((x, index) => Math.abs(x - guess[index]));\n}",
  "153": "function strongestExtension(className, extensions) {\n    let strong = extensions[0];\n    let myVal = extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n    \n    extensions.forEach(s => {\n        let val = s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n        if (val > myVal) {\n            strong = s;\n            myVal = val;\n        }\n    });\n\n    let ans = className + \".\" + strong;\n    return ans;\n}\n```",
  "154": "function cycPatternCheck(a, b) {\n    var l = b.length;\n    var pat = b + b;\n    for (var i = 0; i < a.length - l + 1; i++) {\n        for (var j = 0; j < l + 1; j++) {\n            if (a.substring(i, i + l) === pat.substring(j, j + l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```",
  "155": "function evenOddCount(num) {\n    let evenCount = 0;\n    let oddCount = 0;\n\n    for (let i of Math.abs(num).toString()) {\n        if (parseInt(i) % 2 === 0) {\n            evenCount++;\n        } else {\n            oddCount++;\n        }\n    }\n\n    return [evenCount, oddCount];\n}\n```",
  "156": "function intToMiniRoman(number) {\n  const num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  const sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n  let i = 12;\n  let res = '';\n  \n  while (number) {\n    let div = Math.floor(number / num[i]);\n    number %= num[i];\n    \n    while (div) {\n      res += sym[i];\n      div--;\n    }\n    i--;\n  }\n\n  return res.toLowerCase();\n}\n```",
  "157": "function rightAngleTriangle(a, b, c) {\n    return a * a === b * b + c * c || b * b === a * a + c * c || c * c === a * a + b * b;\n}",
  "158": "function findMax(words) {\n    return words.sort((a, b) => {\n        if (new Set(b).size - new Set(a).size === 0) {\n            return a.localeCompare(b);\n        }\n        return new Set(b).size - new Set(a).size;\n    })[0];\n}\n```",
  "159": "function eat(number, need, remaining) {\n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}",
  "160": "function doAlgebra(operator, operand) {\n    let expression = String(operand[0]);\n    for (let i = 0; i < operator.length; i++) {\n        expression += operator[i] + String(operand[i + 1]);\n    }\n    return eval(expression);\n}\n```",
  "161": "function solve(s) {\n    let flg = 0;\n    let idx = 0;\n    let newStr = s.split('');\n    for (let i of s) {\n        if (i.match(/[a-zA-Z]/)) {\n            newStr[idx] = i === i.toUpperCase() ? i.toLowerCase() : i.toUpperCase();\n            flg = 1;\n        }\n        idx++;\n    }\n    s = \"\";\n    for (let i of newStr) {\n        s += i;\n    }\n    if (flg === 0) {\n        return s.split('').reverse().join('');\n    }\n    return s;\n}",
  "162": "function stringToMd5(text) {\n    const crypto = require('crypto');\n    return text ? crypto.createHash('md5').update(text).digest('hex') : null;\n}",
  "163": "function generateIntegers(a, b) {\n    const lower = Math.max(2, Math.min(a, b));\n    const upper = Math.min(8, Math.max(a, b));\n\n    return Array.from({length: upper - lower + 1}, (_, index) => index + lower).filter(num => num % 2 === 0);\n}"
}