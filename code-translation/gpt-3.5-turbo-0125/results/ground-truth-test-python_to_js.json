{
  "0": "function hasCloseElements(numbers, threshold) {\n    for (let idx = 0; idx < numbers.length; idx++) {\n        for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n            if (idx !== idx2) {\n                let distance = Math.abs(numbers[idx] - numbers[idx2]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n",
  "1": "function separateParenGroups(parenString) {\n    const result = [];\n    let currentString = [];\n    let currentDepth = 0;\n\n    for (let i = 0; i < parenString.length; i++) {\n        const c = parenString[i];\n        if (c === '(') {\n            currentDepth++;\n            currentString.push(c);\n        } else if (c === ')') {\n            currentDepth--;\n            currentString.push(c);\n\n            if (currentDepth === 0) {\n                result.push(currentString.join(''));\n                currentString = [];\n            }\n        }\n    }\n\n    return result;\n}\n\n",
  "2": "function truncateNumber(number) {\n    return number % 1.0;\n}\n\n",
  "3": "function belowZero(operations) {\n    let balance = 0;\n\n    for (let i = 0; i < operations.length; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n",
  "4": "function meanAbsoluteDeviation(numbers) {\n    const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n    return numbers.reduce((acc, x) => acc + Math.abs(x - mean), 0) / numbers.length;\n}\n\nfunction checkMeanAbsoluteDeviation(meanAbsoluteDeviation) {\n    if (Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6 &&\n        Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6 &&\n        Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6) {\n        console.log('All tests passed!');\n    } else {\n        console.log('Some tests failed.');\n    }\n}\n\ncheckMeanAbsoluteDeviation(meanAbsoluteDeviation);\n```",
  "5": "function intersperse(numbers, delimiter) {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    let result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}\n\n",
  "6": "function parseNestedParens(parenString) {\n\n    function parseParenGroup(s) {\n        let depth = 0;\n        let maxDepth = 0;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === '(') {\n                depth += 1;\n                maxDepth = Math.max(depth, maxDepth);\n            } else {\n                depth -= 1;\n            }\n        }\n        return maxDepth;\n    }\n\n    return parenString.split(' ').filter(x => x).map(x => parseParenGroup(x));\n}\n\n",
  "7": "function filterBySubstring(strings, substring) {\n    return strings.filter(x => x.includes(substring));\n}\n\n",
  "8": "function sumProduct(numbers) {\n    let sumValue = 0;\n    let prodValue = 1;\n\n    for (let i = 0; i < numbers.length; i++) {\n        sumValue += numbers[i];\n        prodValue *= numbers[i];\n    }\n\n    return [sumValue, prodValue];\n}\n\n",
  "9": "function rollingMax(numbers) {\n    let runningMax = null;\n    let result = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}\n\n",
  "10": "function isPalindrome(string) {\n    return string === string.split('').reverse().join('');\n}\n\nfunction makePalindrome(string) {\n    if (!string) {\n        return '';\n    }\n\n    let beginningOfSuffix = 0;\n\n    while (!isPalindrome(string.substring(beginningOfSuffix))) {\n        beginningOfSuffix++;\n    }\n\n    return string + string.substring(0, beginningOfSuffix).split('').reverse().join('');\n}\n\n",
  "11": "function stringXor(a, b) {\n\n    function xor(i, j) {\n        if (i === j) {\n            return '0';\n        } else {\n            return '1';\n        }\n    }\n\n    return Array.from(a).map((_, index) => xor(a[index], b[index])).join('');\n}\n\n",
  "12": "function longest(strings) {\n\n    if (strings.length === 0) {\n        return null;\n    }\n\n    var maxlen = Math.max(...strings.map(x => x.length));\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].length === maxlen) {\n            return strings[i];\n        }\n    }\n}\n\n",
  "13": "function greatestCommonDivisor(a, b) {\n    while (b) {\n        [a, b] = [b, a % b];\n    }\n    return a;\n}\n\n",
  "14": "function allPrefixes(string) {\n    let result = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.substring(0, i + 1));\n    }\n    return result;\n}\n\n",
  "15": "function stringSequence(n) {\n    return Array.from({length: n + 1}, (_, i) => i).join(' ');\n}\n\n",
  "16": "function countDistinctCharacters(string) {\n    return new Set(string.toLowerCase()).size;\n}\n\n",
  "17": "const parseMusic = (musicString) => {\n    const noteMap = {'o': 4, 'o|': 2, '.|': 1};\n    return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}\n\nconst metadata = {\n    author: 'jt',\n    dataset: 'test'\n};\n\nconst check = (parseMusic) => {\n    console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]));\n    console.assert(JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4]));\n    console.assert(JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1]));\n    console.assert(JSON.stringify(parseMusic('o| o| .| .| o o o o')) === JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4]));\n    console.assert(JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) === JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2]));\n}\n\ncheck(parseMusic);\n```",
  "18": "function howManyTimes(string, substring) {\n    let times = 0;\n\n    for (let i = 0; i < string.length - substring.length + 1; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            times += 1;\n        }\n    }\n\n    return times;\n}\n\n",
  "19": "function sortNumbers(numbers) {\n    const valueMap = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split(' ').filter(x => x).sort((a, b) => valueMap[a] - valueMap[b]).join(' ');\n}\n\n",
  "20": "function findClosestElements(numbers) {\n    let closestPair = null;\n    let distance = null;\n\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = 0; j < numbers.length; j++) {\n            if (i !== j) {\n                if (distance === null) {\n                    distance = Math.abs(numbers[i] - numbers[j]);\n                    closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                } else {\n                    let newDistance = Math.abs(numbers[i] - numbers[j]);\n                    if (newDistance < distance) {\n                        distance = newDistance;\n                        closestPair = [numbers[i], numbers[j]].sort((a, b) => a - b);\n                    }\n                }\n            }\n        }\n    }\n\n    return closestPair;\n}\n\n// Test cases\nconsole.log(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2)); // Output: [3.9, 4.0]\nconsole.log(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])); // Output: [5.0, 5.9]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])); // Output: [2.0, 2.2]\nconsole.log(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])); // Output: [2.0, 2.0]\nconsole.log(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])); // Output: [2.2, 3.1]\n```",
  "21": "function rescaleToUnit(numbers) {\n    const minNumber = Math.min(...numbers);\n    const maxNumber = Math.max(...numbers);\n    return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}\n\n",
  "22": "function filterIntegers(values) {\n    return values.filter(x => Number.isInteger(x));\n}\n\n",
  "23": "function stringLength(string) {\n    return string.length;\n}\n\nfunction testStringLength(stringLength) {\n    console.assert(stringLength('') === 0);\n    console.assert(stringLength('x') === 1);\n    console.assert(stringLength('asdasnakj') === 9);\n}\n\ntestStringLength(stringLength);\n```",
  "24": "function largestDivisor(n) {\n    for (let i = n; i > 0; i--) {\n        if (n % i === 0) {\n            return i;\n        }\n    }\n}\n\n",
  "25": "function factorize(n) {\n    let fact = [];\n    let i = 2;\n    while (i <= Math.sqrt(n) + 1) {\n        if (n % i === 0) {\n            fact.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n\n    if (n > 1) {\n        fact.push(n);\n    }\n    return fact;\n}\n\n",
  "26": "function removeDuplicates(numbers) {\n    const counts = numbers.reduce((acc, curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n    }, {});\n\n    return numbers.filter(n => counts[n] <= 1);\n}\n\n",
  "27": "function flipCase(string) {\n    return string.split('').map(character => {\n        if (character === character.toUpperCase()) {\n            return character.toLowerCase();\n        } else {\n            return character.toUpperCase();\n        }\n    }).join('');\n}\n\n",
  "28": "function concatenate(strings) {\n    return strings.join('');\n}\n\n",
  "29": "function filterByPrefix(strings, prefix) {\n    return strings.filter(x => x.startsWith(prefix));\n}\n\n",
  "30": "function getPositive(l) {\n    return l.filter(e => e > 0);\n}\n\n",
  "31": "function isPrime(n) {\n    if (n < 2) {\n        return false;\n    }\n    for (let k = 2; k < n; k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
  "32": "function poly(xs, x) {\n    /**\n     * Evaluates polynomial with coefficients xs at point x.\n     * return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    return xs.reduce((acc, coeff, i) => acc + coeff * Math.pow(x, i), 0);\n}\n\nfunction findZero(xs) {\n    let begin = -1.0,\n        end = 1.0;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.0\n        end *= 2.0\n    }\n    while (end - begin > 1e-10) {\n        let center = (begin + end) / 2.0;\n        if (poly(xs, center) * poly(xs, begin) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n\n// Test cases\n",
  "33": "function sortThird(arr) {\n    let l = Array.from(arr);\n    l.filter((_, index) => index % 3 === 0).sort((a, b) => a - b)\n        .forEach((val, index) => l.splice(index * 3, 1, val));\n    return l;\n}\n\n",
  "34": "function unique(list) {\n    return [...new Set(list)].sort();\n}\n\nfunction checkUnique(uniqueFunc) {\n    const result = uniqueFunc([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n    const expected = [0, 2, 3, 5, 9, 123];\n    console.log(JSON.stringify(result) === JSON.stringify(expected));\n}\n\ncheckUnique(unique);\n```",
  "35": "function maxElement(arr) {\n    let m = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > m) {\n            m = arr[i];\n        }\n    }\n    return m;\n}\n\nfunction checkMaxElement(maxElement) {\n    if (maxElement([1, 2, 3]) === 3 && maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124) {\n        console.log(\"All test cases pass\");\n    } else {\n        console.log(\"Test cases fail\");\n    }\n}\n\ncheckMaxElement(maxElement);\n```",
  "36": "function fizzBuzz(n) {\n    let ns = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            ns.push(i);\n        }\n    }\n    let s = ns.map(String).join('');\n    let ans = 0;\n    for (let c of s) {\n        ans += (c === '7');\n    }\n    return ans;\n}\n\n",
  "37": "function sortEven(l) {\n    const evens = l.filter((_, i) => i % 2 === 0);\n    const odds = l.filter((_, i) => i % 2 !== 0);\n\n    evens.sort((a, b) => a - b);\n\n    let ans = [];\n    for (let i = 0; i < evens.length; i++) {\n        ans.push(evens[i]);\n        ans.push(odds[i]);\n    }\n\n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n\n    return ans;\n}\n\n",
  "38": "function encodeCyclic(s) {\n    /**\n     * Returns encoded string by cycling groups of three characters.\n     */\n    // Split string to groups. Each of length 3.\n    let groups = [];\n    for (let i = 0; i < (s.length + 2) / 3; i++) {\n        groups.push(s.substr(3 * i, Math.min(3 * i + 3, s.length)));\n    }\n\n    // Cycle elements in each group, unless group has fewer elements than 3.\n    groups = groups.map(group => {\n        if (group.length === 3) {\n            return group.slice(1) + group[0];\n        } else {\n            return group;\n        }\n    });\n\n    return groups.join('');\n}\n\nfunction decodeCyclic(s) {\n    return encodeCyclic(encodeCyclic(s));\n}\n\nfunction checkDecodeCyclic(decodeCyclic) {\n    const getRandomString = (length) => {\n        let result = '';\n        const characters = 'abcdefghijklmnopqrstuvwxyz';\n        for (let i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() * characters.length));\n        }\n        return result;\n    };\n\n    for (let i = 0; i < 100; i++) {\n        const str = getRandomString(Math.floor(Math.random() * (20 - 10 + 1) + 10));\n        const encodedStr = encodeCyclic(str);\n        if (decodeCyclic(encodedStr) !== str) {\n            console.log('Test failed for string:', str);\n        }\n    }\n}\n\ncheckDecodeCyclic(decodeCyclic);\n```  ",
  "39": "function primeFib(n) {\n    function isPrime(p) {\n        if (p < 2) {\n            return false;\n        }\n        for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p); k++) {\n            if (p % k === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    const f = [0, 1];\n    while (true) {\n        f.push(f[f.length - 1] + f[f.length - 2]);\n        if (isPrime(f[f.length - 1])) {\n            n--;\n        }\n        if (n === 0) {\n            return f[f.length - 1];\n        }\n    }\n}\n\nconst METADATA = {};\n\n",
  "40": "function triplesSumToZero(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            for (let k = j + 1; k < arr.length; k++) {\n                if (arr[i] + arr[j] + arr[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n",
  "41": "function carRaceCollision(n) {\n    return Math.pow(n, 2);\n}\n\n",
  "42": "function incrList(arr) {\n    return arr.map(e => e + 1);\n}\n\n",
  "43": "function pairsSumToZero(l) {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n",
  "44": "function changeBase(x, base) {\n    let ret = \"\";\n    while (x > 0) {\n        ret = String(x % base) + ret;\n        x = Math.floor(x / base);\n    }\n    return ret;\n}\n\n",
  "45": "function triangleArea(a, h) {\n    return a * h / 2.0;\n}\n\n",
  "46": "function fib4(n) {\n    let results = [0, 0, 2, 0];\n    \n    if (n < 4) {\n        return results[n];\n    }\n\n    for (let i = 4; i <= n; i++) {\n        results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n        results.shift();\n    }\n\n    return results[results.length - 1];\n}\n\n",
  "47": "function median(arr) {\n    arr.sort((a, b) => a - b);\n    if (arr.length % 2 === 1) {\n        return arr[Math.floor(arr.length / 2)];\n    } else {\n        return (arr[arr.length / 2 - 1] + arr[arr.length / 2]) / 2.0;\n    }\n}\n\nfunction checkMedian() {\n    console.log(median([3, 1, 2, 4, 5]) === 3);\n    console.log(median([-10, 4, 6, 1000, 10, 20]) === 8.0);\n    console.log(median([5]) === 5);\n    console.log(median([6, 5]) === 5.5);\n    console.log(median([8, 1, 3, 9, 9, 2, 7]) === 7);\n}\n\ncheckMedian();\n```",
  "48": "function isPalindrome(text) {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
  "49": "function modp(n, p) {\n    let ret = 1;\n    for (let i = 0; i < n; i++) {\n        ret = (2 * ret) % p;\n    }\n    return ret;\n}\n\n",
  "50": "function encodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode((((ch.charCodeAt(0) + 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\nfunction decodeShift(s) {\n    return s.split('').map(ch => String.fromCharCode((((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\n",
  "51": "function removeVowels(text) {\n    return Array.from(text).filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase())).join(\"\");\n}\n\nfunction checkRemoveVowels() {\n    console.log(removeVowels('') === '');\n    console.log(removeVowels(\"abcdef\\nghijklm\") === 'bcdf\\nghjklm');\n    console.log(removeVowels('fedcba') === 'fdcb');\n    console.log(removeVowels('eeeee') === '');\n    console.log(removeVowels('acBAA') === 'cB');\n    console.log(removeVowels('EcBOO') === 'cB');\n    console.log(removeVowels('ybcd') === 'ybcd');\n}\n\ncheckRemoveVowels();\n```",
  "52": "function belowThreshold(arr, threshold) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] >= threshold) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
  "53": "function add(x, y) {\n    return x + y;\n}\n\n",
  "54": "function sameChars(s0, s1) {\n    return new Set(s0) === new Set(s1);\n}\n\n",
  "55": "function fib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\n",
  "56": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n            depth += 1;\n        } else {\n            depth -= 1;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n\nfunction checkCorrectBracketing(correctBracketing) {\n    console.log(correctBracketing(\"<>\") === true);\n    console.log(correctBracketing(\"<<><>>\") === true);\n    console.log(correctBracketing(\"<><><<><>><>\") === true);\n    console.log(correctBracketing(\"<><><<<><><>><>><<><><<>>>\") === true);\n    console.log(correctBracketing(\"<<<><>>>>\") === false);\n    console.log(correctBracketing(\"><<>\") === false);\n    console.log(correctBracketing(\"<\") === false);\n    console.log(correctBracketing(\"<<<<\") === false);\n    console.log(correctBracketing(\">\") === false);\n    console.log(correctBracketing(\"<<>\") === false);\n    console.log(correctBracketing(\"<><><<><>><>><<>\" === false));\n    console.log(correctBracketing(\"<><><<><>><>>><>\")) === false));\n}\n\ncheckCorrectBracketing(correctBracketing);\n```",
  "57": "function isMonotonic(arr) {\n    if (JSON.stringify(arr.slice()) === JSON.stringify(arr.slice().sort()) || JSON.stringify(arr.slice()) === JSON.stringify(arr.slice().sort().reverse())) {\n        return true;\n    }\n    return false;\n}\n\n// Test cases\nconsole.log(isMonotonic([1, 2, 4, 10]) === true);\nconsole.log(isMonotonic([1, 2, 4, 20]) === true);\nconsole.log(isMonotonic([1, 20, 4, 10]) === false);\nconsole.log(isMonotonic([4, 1, 0, -10]) === true);\nconsole.log(isMonotonic([4, 1, 1, 0]) === true);\nconsole.log(isMonotonic([1, 2, 3, 2, 5, 60]) === false);\nconsole.log(isMonotonic([1, 2, 3, 4, 5, 60]) === true);\nconsole.log(isMonotonic([9, 9, 9, 9]) === true);\n```",
  "58": "function common(l1, l2) {\n    const ret = new Set();\n    for (let e1 of l1) {\n        for (let e2 of l2) {\n            if (e1 === e2) {\n                ret.add(e1);\n            }\n        }\n    }\n    return Array.from(ret).sort();\n}\n\n",
  "59": "function largestPrimeFactor(n) {\n\n    function isPrime(k) {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let largest = 1;\n    for (let j = 2; j <= n; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}\n\nconst testCases = [15, 27, 63, 330, 13195];\ntestCases.forEach(tc => console.log(largestPrimeFactor(tc)));\n```",
  "60": "function sumToN(n) {\n    return [...Array(n + 1).keys()].reduce((acc, val) => acc + val, 0);\n}\n\n",
  "61": "function correctBracketing(brackets) {\n    let depth = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            depth++;\n        } else {\n            depth--;\n        }\n        if (depth < 0) {\n            return false;\n        }\n    }\n    return depth === 0;\n}\n\n",
  "62": "function derivative(xs) {\n    return xs.map((x, i) => x * i).slice(1);\n}\n\n",
  "63": "function fibfib(n) {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nfunction checkFibfib(fibfib) {\n    if (fibfib(2) === 1 &&\n        fibfib(1) === 0 &&\n        fibfib(5) === 4 &&\n        fibfib(8) === 24 &&\n        fibfib(10) === 81 &&\n        fibfib(12) === 274 &&\n        fibfib(14) === 927) {\n        console.log(\"All test cases passed.\");\n    } else {\n        console.log(\"Test cases failed.\");\n    }\n}\n\ncheckFibfib(fibfib);\n```",
  "64": "function vowelsCount(s) {\n    const vowels = \"aeiouAEIOU\";\n    let nVowels = s.split('').filter(c => vowels.includes(c)).length;\n    if (s.slice(-1) === 'y' || s.slice(-1) === 'Y') {\n        nVowels += 1;\n    }\n    return nVowels;\n}\n\n",
  "65": "function circularShift(x, shift) {\n    let s = String(x);\n    if (shift > s.length) {\n        return s.split(\"\").reverse().join(\"\");\n    } else {\n        return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n    }\n}\n\n// Test Cases\n",
  "66": "function digitSum(s) {\n    if (s === \"\") return 0;\n    return s.split('').reduce((sum, char) => {\n        return sum + (char.toUpperCase() === char ? char.charCodeAt(0) : 0);\n    }, 0);\n}\n\n",
  "67": "function fruitDistribution(s, n) {\n    let lis = [];\n    s.split(' ').forEach(i => {\n        if (!isNaN(i)) {\n            lis.push(parseInt(i));\n        }\n    });\n    return n - lis.reduce((a, b) => a + b, 0);\n}\n\n",
  "68": "function pluck(arr) {\n    if (arr.length === 0) return [];\n    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n",
  "69": "function search(lst) {\n    const frq = Array.from({ length: Math.max(...lst) + 1 }, () => 0);\n    \n    for (let i of lst) {\n        frq[i]++;\n    }\n\n    let ans = -1;\n    for (let i = 1; i < frq.length; i++) {\n        if (frq[i] >= i) {\n            ans = i;\n        }\n    }\n\n    return ans;\n}\n\n",
  "70": "function strangeSortList(lst) {\n    let res = [];\n    let switchFlag = true;\n    \n    while (lst.length > 0) {\n        res.push(switchFlag ? Math.min(...lst) : Math.max(...lst));\n        let index = lst.indexOf(res[res.length - 1]);\n        lst.splice(index, 1);\n        switchFlag = !switchFlag;\n    }\n    \n    return res;\n}\n\n",
  "71": "function triangleArea(a, b, c) {\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    let s = (a + b + c) / 2;\n    let area = Math.pow((s * (s - a) * (s - b) * (s - c)), 0.5);\n    area = Math.round(area * 100) / 100;\n    return area;\n}\n\n",
  "72": "function willItFly(q, w) {\n    if (q.reduce((sum, num) => sum + num, 0) > w) {\n        return false;\n    }\n\n    let i = 0, j = q.length - 1;\n    while (i < j) {\n        if (q[i] !== q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n",
  "73": "function smallestChange(arr) {\n    let ans = 0;\n    for (let i = 0; i < arr.length / 2; i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n\n",
  "74": "function totalMatch(lst1, lst2) {\n    let l1 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        l1 += lst1[i].length;\n    }\n\n    let l2 = 0;\n    for (let i = 0; i < lst2.length; i++) {\n        l2 += lst2[i].length;\n    }\n\n    if (l1 <= l2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\n",
  "75": "function isMultiplyPrime(a) {\n\n    function isPrime(n) {\n        for (let j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (let i = 2; i <= 100; i++) {\n        if (!isPrime(i)) continue;\n        for (let j = 2; j <= 100; j++) {\n            if (!isPrime(j)) continue;\n            for (let k = 2; k <= 100; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n",
  "76": "function isSimplePower(x, n) {\n    if (n === 1) {\n        return x === 1;\n    }\n\n    let power = 1;\n    while (power < x) {\n        power = power * n;\n    }\n\n    return power === x;\n}\n\n",
  "77": "function isCube(a) {\n    a = Math.abs(a);\n    return Math.round(Math.pow(a, 1/3)) ** 3 === a;\n}\n\n",
  "78": "function hexKey(num) {\n    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(num[i])) {\n            total += 1;\n        }\n    }\n    return total;\n}\n\n// Testing the function\nconsole.log(hexKey(\"AB\") === 1);\nconsole.log(hexKey(\"1077E\") === 2);\nconsole.log(hexKey(\"ABED1A33\") === 4);\nconsole.log(hexKey(\"2020\") === 2);\nconsole.log(hexKey(\"123456789ABCDEF0\") === 6);\nconsole.log(hexKey(\"112233445566778899AABBCCDDEEFF00\") === 12);\nconsole.log(hexKey([]) === 0);\n```",
  "79": "function decimalToBinary(decimal) {\n    return \"db\" + decimal.toString(2) + \"db\";\n}\n\n",
  "80": "function isHappy(s) {\n    if (s.length < 3) {\n        return false;\n    }\n\n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
  "81": "function numericalLetterGrade(grades) {\n    let letterGrade = [];\n    for (let gpa of grades) {\n        if (gpa === 4.0) {\n            letterGrade.push(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrade.push(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrade.push(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrade.push(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrade.push(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrade.push(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrade.push(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrade.push(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrade.push(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrade.push(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrade.push(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrade.push(\"D-\");\n        } else {\n            letterGrade.push(\"E\");\n        }\n    }\n    return letterGrade;\n}\n\n",
  "82": "function primeLength(string) {\n    let l = string.length;\n    if (l === 0 || l === 1) {\n        return false;\n    }\n    for (let i = 2; i < l; i++) {\n        if (l % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
  "83": "function startsOneEnds(n) {\n    if (n === 1) return 1;\n    return 18 * (10 ** (n - 2));\n}\n\n",
  "84": "function solve(N) {\n    return (parseInt(N.toString().split('').reduce((acc, val) => parseInt(acc) + parseInt(val), 0))).toString(2).slice(2);\n}\n\n",
  "85": "function add(lst) {\n    return lst.filter((num, index) => index % 2 !== 0 && num % 2 === 0)\n              .reduce((acc, curr) => acc + curr, 0);\n}\n\n",
  "86": "function antiShuffle(s) {\n    return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}\n\n",
  "87": "function getRow(lst, x) {\n    let coords = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                coords.push([i, j]);\n            }\n        }\n    }\n\n    return coords\n        .sort((a, b) => b[1] - a[1])\n        .sort((a, b) => a[0] - b[0]);\n}\n\n// Test cases\nconst assert = (a, b) => JSON.stringify(a) === JSON.stringify(b);\n\nassert(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1), [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n\nassert(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6]\n], 2), [[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n\nassert(getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,5,6],\n    [1,1,3,4,5,6],\n    [1,2,1,4,5,6],\n    [1,2,3,1,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1), [[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\nassert(getRow([], 1), []);\nassert(getRow([[1]], 2), []);\nassert(getRow([[], [1], [1, 2, 3]], 3), [[2, 2]]);\n```",
  "88": "function sortArray(array) {\n    return array.length === 0 ? [] : array.slice().sort(function(a, b) { return (a + b) % 2 === 0 ? b - a : a - b; });\n}\n\n",
  "89": "function encrypt(s) {\n    const d = 'abcdefghijklmnopqrstuvwxyz';\n    let out = '';\n    for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n        if (d.includes(c)) {\n            out += d[(d.indexOf(c) + 4) % 26];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n\n",
  "90": "function nextSmallest(lst) {\n    lst = Array.from(new Set(lst)).sort((a, b) => a - b);\n    return lst.length < 2 ? null : lst[1];\n}\n\n",
  "91": "function isBored(S) {\n    const sentences = S.split(/[.?!]\\s*/);\n    return sentences.reduce((count, sentence) => count + (sentence.substring(0, 2) === 'I ' ? 1 : 0), 0);\n}\n\n// Test cases\nconsole.log(isBored(\"Hello world\") === 0);\nconsole.log(isBored(\"Is the sky blue?\") === 0);\nconsole.log(isBored(\"I love It !\") === 1);\nconsole.log(isBored(\"bIt\") === 0);\nconsole.log(isBored(\"I feel good today. I will be productive. will kill It\") === 2);\nconsole.log(isBored(\"You and I are going for a walk\") === 0);\n```  ",
  "92": "function anyInt(x, y, z) {\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n\n",
  "93": "function encode(message) {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries(Array.from(vowels, i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]);\n    message = message.split('').map(i => vowelsReplace[i.toLowerCase()] || i).join('');\n    return message;\n}\n\n",
  "94": "function skjkasdkd(lst) {\n\n    function isPrime(n) {\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let maxx = 0;\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] > maxx && isPrime(lst[i])) {\n            maxx = lst[i];\n        }\n        i++;\n    }\n\n    let result = String(maxx).split(\"\").reduce((sum, digit) => sum + parseInt(digit), 0);\n    return result;\n}\n\n// Test cases\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])); // 10\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])); // 25\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])); // 13\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])); // 11\nconsole.log(skjkasdkd([0,81,12,3,1,21])); // 3\nconsole.log(skjkasdkd([0,8,1,2,1,7])); // 7\nconsole.log(skjkasdkd([8191])); // 19\nconsole.log(skjkasdkd([8191, 123456, 127, 7])); // 19\nconsole.log(skjkasdkd([127, 97, 8192])); // 10\n```",
  "95": "function checkDictCase(obj) {\n    if (Object.keys(obj).length === 0) {\n        return false;\n    } else {\n        let state = \"start\";\n        for (let key in obj) {\n            if (typeof key !== \"string\") {\n                state = \"mixed\";\n                break;\n            }\n            if (state === \"start\") {\n                if (key.toUpperCase() === key) {\n                    state = \"upper\";\n                } else if (key.toLowerCase() === key) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state === \"upper\" && key.toUpperCase() !== key) || (state === \"lower\" && key.toLowerCase() !== key)) {\n                state = \"mixed\";\n                break;\n            } else {\n                break;\n            }\n        }\n        return state === \"upper\" || state === \"lower\";\n    }\n}\n\n// Test cases\nconsole.log(checkDictCase({\"p\": \"pineapple\", \"b\": \"banana\" }) === true);\nconsole.log(checkDictCase({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\" }) === false);\nconsole.log(checkDictCase({\"p\": \"pineapple\", 5: \"banana\", \"a\": \"apple\" }) === false);\nconsole.log(checkDictCase({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\" }) === false);\nconsole.log(checkDictCase({\"STATE\": \"NC\", \"ZIP\": \"12345\" }) === true);\nconsole.log(checkDictCase({\"fruit\": \"Orange\", \"taste\": \"Sweet\" }) === true);\nconsole.log(checkDictCase({}) === false);\n```  ",
  "96": "function countUpTo(n) {\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n}\n\n",
  "97": "function multiply(a, b) {\n    return Math.abs(a % 10) * Math.abs(b % 10);\n}\n\n",
  "98": "function countUpper(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (\"AEIOU\".includes(s[i])) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n// Test cases\nconsole.log(countUpper('aBCdEf') === 1);\nconsole.log(countUpper('abcdefg') === 0);\nconsole.log(countUpper('dBBE') === 0);\nconsole.log(countUpper('B') === 0);\nconsole.log(countUpper('U') === 1);\nconsole.log(countUpper('') === 0);\nconsole.log(countUpper('EEEE') === 2);\n```",
  "99": "function closestInteger(value) {\n    if (value.split('.').length === 2) {\n        // remove trailing zeros\n        while (value.slice(-1) === '0') {\n            value = value.slice(0, -1);\n        }\n    }\n\n    let num = parseFloat(value);\n    let res;\n    if (value.slice(-2) === '.5') {\n        if (num > 0) {\n            res = Math.ceil(num);\n        } else {\n            res = Math.floor(num);\n        }\n    } else if (value.length > 0) {\n        res = Math.round(num);\n    } else {\n        res = 0;\n    }\n\n    return res;\n}\n\n// Test cases\n",
  "100": "function makeAPile(n) {\n    return Array.from({length: n}, (_, i) => n + 2*i);\n}\n\n",
  "101": "function wordsString(s) {\n    if (!s) {\n        return [];\n    }\n\n    let sList = [];\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(s[i]);\n        }\n    }\n\n    let formattedString = sList.join(\"\");\n    return formattedString.split(' ');\n}\n\n",
  "102": "function chooseNum(x, y) {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 === 0) {\n        return y;\n    }\n    if (x === y) {\n        return -1;\n    }\n    return y - 1;\n}\n\n// Test cases\nconsole.log(chooseNum(12, 15) === 14);\nconsole.log(chooseNum(13, 12) === -1);\nconsole.log(chooseNum(33, 12354) === 12354);\nconsole.log(chooseNum(5234, 5233) === -1);\nconsole.log(chooseNum(6, 29) === 28);\nconsole.log(chooseNum(27, 10) === -1);\nconsole.log(chooseNum(7, 7) === -1);\nconsole.log(chooseNum(546, 546) === 546);\n```  ",
  "103": "function roundedAvg(n, m) {\n    if (m < n) {\n        return -1;\n    }\n    let summation = 0;\n    for (let i = n; i <= m; i++) {\n        summation += i;\n    }\n    return (summation / (m - n + 1)).toString(2);\n}\n\n// Test cases\nconsole.log(roundedAvg(1, 5) === '11');\nconsole.log(roundedAvg(7, 13) === '1010');\nconsole.log(roundedAvg(964, 977) === '1111001010');\nconsole.log(roundedAvg(996, 997) === '1111100100');\nconsole.log(roundedAvg(560, 851) === '1011000010');\nconsole.log(roundedAvg(185, 546) === '101101110');\nconsole.log(roundedAvg(362, 496) === '110101101');\nconsole.log(roundedAvg(350, 902) === '1001110010');\nconsole.log(roundedAvg(197, 233) === '11010111');\nconsole.log(roundedAvg(7, 5) === -1);\nconsole.log(roundedAvg(5, 1) === -1);\nconsole.log(roundedAvg(5, 5) === '101');\n```  ",
  "104": "function uniqueDigits(x) {\n    let oddDigitElements = [];\n    for (let i of x) {\n        if ([...String(i)].every(c => parseInt(c) % 2 === 1)) {\n            oddDigitElements.push(i);\n        }\n    }\n    return oddDigitElements.sort((a, b) => a - b);\n}\n\nfunction checkUniqueDigits() {\n    // Check some simple cases\n    console.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]\n    console.log(uniqueDigits([152, 323, 1422, 10])); // []\n    console.log(uniqueDigits([12345, 2033, 111, 151])); // [111, 151]\n    console.log(uniqueDigits([135, 103, 31])); // [31, 135]\n\n    // Additional test cases can be added here\n}\n\ncheckUniqueDigits();\n```",
  "105": "function byLength(arr) {\n    const dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    };\n\n    const sortedArr = arr.slice().sort((a, b) => b - a);\n    const newArr = [];\n    \n    for (let i = 0; i < sortedArr.length; i++) {\n        try {\n            newArr.push(dic[sortedArr[i]]);\n        } catch (error) {\n            // pass\n        }\n    }\n    \n    return newArr;\n}\n\n",
  "106": "function calculateFactorialSum(n) {\n    let ret = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            let x = 1;\n            for (let j = 1; j <= i; j++) {\n                x *= j;\n            }\n            ret.push(x);\n        } else {\n            let x = 0;\n            for (let j = 1; j <= i; j++) {\n                x += j;\n            }\n            ret.push(x);\n        }\n    }\n    return ret;\n}\n\n",
  "107": "function evenOddPalindrome(n) {\n    function isPalindrome(n) {\n        return n.toString() === n.toString().split('').reverse().join('');\n    }\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n}\n\n",
  "108": "function countNums(arr) {\n\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        n = Array.from(String(n), Number);\n        n[0] = n[0] * neg;\n        return n.reduce((acc, curr) => acc + curr, 0);\n    }\n\n    return arr.filter(x => x > 0).map(i => digitsSum(i)).length;\n}\n\n// Test cases\nconsole.log(countNums([]) === 0);\nconsole.log(countNums([-1, -2, 0]) === 0);\nconsole.log(countNums([1, 1, 2, -2, 3, 4, 5]) === 6);\nconsole.log(countNums([1, 6, 9, -6, 0, 1, 5]) === 5);\nconsole.log(countNums([1, 100, 98, -7, 1, -1]) === 4);\nconsole.log(countNums([12, 23, 34, -45, -56, 0]) === 5);\nconsole.log(countNums([-0, Math.pow(1, 0)]) === 1);\nconsole.log(countNums([1]) === 1);\n```",
  "109": "function moveOneBall(arr) {\n    if (arr.length === 0) {\n        return true;\n    }\n\n    let sortedArray = arr.slice().sort((a, b) => a - b);\n    let myArr = [];\n    \n    let minValue = Math.min(...arr);\n    let minIndex = arr.indexOf(minValue);\n    myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n    \n    for (let i = 0; i < arr.length; i++) {\n        if (myArr[i] !== sortedArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test cases\nconsole.log(moveOneBall([3, 4, 5, 1, 2]) === true);\nconsole.log(moveOneBall([3, 5, 10, 1, 2]) === true);\nconsole.log(moveOneBall([4, 3, 1, 2]) === false);\nconsole.log(moveOneBall([3, 5, 4, 1, 2]) === false);\nconsole.log(moveOneBall([]) === true);\n```",
  "110": "function exchange(lst1, lst2) {\n    let odd = 0;\n    let even = 0;\n    \n    lst1.forEach(num => {\n        if (num % 2 === 1) {\n            odd += 1;\n        }\n    });\n    \n    lst2.forEach(num => {\n        if (num % 2 === 0) {\n            even += 1;\n        }\n    });\n    \n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\n// Test cases\n",
  "111": "function histogram(test) {\n    let dict1 = {};\n    let list1 = test.split(\" \");\n    let t = 0;\n\n    for (let i of list1) {\n        if (list1.filter(item => item === i).length > t && i !== '') {\n            t = list1.filter(item => item === i).length;\n        }\n    }\n\n    if (t > 0) {\n        for (let i of list1) {\n            if (list1.filter(item => item === i).length === t) {\n                dict1[i] = t;\n            }\n        }\n    }\n    \n    return dict1;\n}\n\n",
  "112": "function reverseDelete(s, c) {\n    s = Array.from(s).filter(char => c.indexOf(char) === -1).join('');\n    return [s, s.split('').reverse().join('') === s];\n}\n\n",
  "113": "function oddCount(lst) {\n    const res = [];\n    for (let arr of lst) {\n        const n = arr.split('').reduce((count, d) => count + (parseInt(d) % 2 === 1), 0);\n        res.push(`the number of odd elements ${n}n the str${n}ng ${n} of the ${n}nput.`)\n    }\n    return res;\n}\n\n// Test cases\nconsole.log(oddCount(['1234567'])); // [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nconsole.log(oddCount(['3',\"11111111\"])); // [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nconsole.log(oddCount(['271', '137', '314']));\n```  ",
  "114": "function minSubArraySum(nums) {\n    let maxSum = 0;\n    let s = 0;\n    for (let num of nums) {\n        s += -num;\n        if (s < 0) {\n            s = 0;\n        }\n        maxSum = Math.max(s, maxSum);\n    }\n    if (maxSum === 0) {\n        maxSum = Math.max(...nums.map(i => -i));\n    }\n    let minSum = -maxSum;\n    return minSum;\n}\n\n// Test cases\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // Output should be 1\nconsole.log(minSubArraySum([-1, -2, -3])); // Output should be -6\nconsole.log(minSubArraySum([-1, -2, -3, 2, -10])); // Output should be -14\nconsole.log(minSubArraySum([-9999999999999999])); // Output should be -9999999999999999\nconsole.log(minSubArraySum([0, 10, 20, 1000000])); // Output should be 0\nconsole.log(minSubArraySum([-1, -2, -3, 10, -5])); // Output should be -6\nconsole.log(minSubArraySum([100, -1, -2, -3, 10, -5])); // Output should be -6\nconsole.log(minSubArraySum([10, 11, 13, 8, 3, 4])); // Output should be 3\nconsole.log(minSubArraySum([100, -33, 32, -1, 0, -2])); // Output should be -33\nconsole.log(minSubArraySum([-10])); // Output should be -10\nconsole.log(minSubArraySum([7])); // Output should be 7\nconsole.log(minSubArraySum([1, -1])); // Output should be -1\n```",
  "115": "function maxFill(grid, capacity) {\n    return grid.reduce((acc, arr) => acc + Math.ceil(arr.reduce((a, b) => a + b) / capacity), 0);\n}\n\n",
  "116": "function sortArray(arr) {\n    return arr.slice().sort((a, b) => {\n        const countBits = (num) => {\n            let count = 0;\n            while (num > 0) {\n                count += num % 2;\n                num = Math.floor(num / 2);\n            }\n            return count;\n        };\n        return countBits(a) - countBits(b) || a - b;\n    });\n}\n\n",
  "117": "function selectWords(s, n) {\n    let result = [];\n    s.split(\" \").forEach(word => {\n        let nConsonants = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(word[i].toLowerCase())) {\n                nConsonants++;\n            }\n        }\n        if (nConsonants === n) {\n            result.push(word);\n        }\n    });\n    return result;\n}\n\n",
  "118": "function getClosestVowel(word) {\n    if (word.length < 3) {\n        return \"\";\n    }\n\n    const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n    for (let i = word.length - 3; i > 0; i--) {\n        if (vowels.has(word[i])) {\n            if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n                return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n\n// Test cases\nconsole.log(getClosestVowel(\"yogurt\") === \"u\");\nconsole.log(getClosestVowel(\"full\") === \"u\");\nconsole.log(getClosestVowel(\"easy\") === \"\");\nconsole.log(getClosestVowel(\"eAsy\") === \"\");\nconsole.log(getClosestVowel(\"ali\") === \"\");\nconsole.log(getClosestVowel(\"bad\") === \"a\");\nconsole.log(getClosestVowel(\"most\") === \"o\");\nconsole.log(getClosestVowel(\"ab\") === \"\");\nconsole.log(getClosestVowel(\"ba\") === \"\");\nconsole.log(getClosestVowel(\"quick\") === \"\");\nconsole.log(getClosestVowel(\"anime\") === \"i\");\nconsole.log(getClosestVowel(\"Asia\") === \"\");\nconsole.log(getClosestVowel(\"Above\") === \"o\");\n```",
  "119": "function matchParens(lst) {\n\n    ",
  "120": "function maximum(arr, k) {\n    if (k === 0) {\n        return [];\n    }\n    arr.sort((a, b) => a - b);\n    let ans = arr.slice(-k);\n    return ans;\n}\n```",
  "121": "function solution(lst) {\n    return lst.reduce((acc, x, idx) => {\n        if (idx % 2 === 0 && x % 2 === 1) {\n            return acc + x;\n        }\n        return acc;\n    }, 0);\n}\n\n// Test cases\nconsole.log(solution([5, 8, 7, 1]) === 12);\nconsole.log(solution([3, 3, 3, 3, 3]) === 9);\nconsole.log(solution([30, 13, 24, 321]) === 0);\nconsole.log(solution([5, 9]) === 5);\nconsole.log(solution([2, 4, 8]) === 0);\nconsole.log(solution([30, 13, 23, 32]) === 23);\nconsole.log(solution([3, 13, 2, 9]) === 3);\n```  ",
  "122": "function addElements(arr, k) {\n    return arr.slice(0, k).reduce((sum, elem) => {\n        if (elem.toString().length <= 2) {\n            return sum + elem;\n        }\n        return sum;\n    }, 0);\n}\n\n// Test cases\nconsole.log(addElements([1,-2,-3,41,57,76,87,88,99], 3) === -4);\nconsole.log(addElements([111,121,3,4000,5,6], 2) === 0);\nconsole.log(addElements([11,21,3,90,5,6,7,8,9], 4) === 125);\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4) === 24);\nconsole.log(addElements([1], 1) === 1);\n```  ",
  "123": "function getOddCollatz(n) {\n    let oddCollatz = [];\n    if (n % 2 !== 0) {\n        oddCollatz = [n];\n    }\n\n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n\n        if (n % 2 === 1) {\n            oddCollatz.push(Math.floor(n));\n        }\n    }\n\n    return oddCollatz.sort((a, b) => a - b);\n}\n\n",
  "124": "function validDate(date) {\n    try {\n        date = date.trim();\n        let [month, day, year] = date.split('-').map(Number);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (([1, 3, 5, 7, 8, 10, 12].includes(month) && (day < 1 || day > 31)) ||\n            ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) ||\n            (month == 2 && (day < 1 || day > 29))) {\n            return false;\n        }\n    } catch (error) {\n        return false;\n    }\n\n    return true;\n}\n\n// Testing the validDate function with the test cases\nconsole.log(validDate('03-11-2000') === true);\nconsole.log(validDate('15-01-2012') === false);\nconsole.log(validDate('04-0-2040') === false);\nconsole.log(validDate('06-04-2020') === true);\nconsole.log(validDate('01-01-2007') === true);\nconsole.log(validDate('03-32-2011') === false);\nconsole.log(validDate('') === false);\nconsole.log(validDate('04-31-3000') === false);\nconsole.log(validDate('06-06-2005') === true);\nconsole.log(validDate('21-31-2000') === false);\nconsole.log(validDate('04-12-2003') === true);\nconsole.log(validDate('04122003') === false);\nconsole.log(validDate('20030412') === false);\nconsole.log(validDate('2003-04') === false);\nconsole.log(validDate('2003-04-12') === false);\nconsole.log(validDate('04-2003') === false);\n```",
  "125": "function splitWords(txt) {\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.replace(/,/g, ' ').split(\" \");\n    } else {\n        return txt.split('').filter(i => i.toLowerCase() === i && i.charCodeAt(0) % 2 === 0).length;\n    }\n}\n\n",
  "126": "function isSorted(lst) {\n    const countDigit = {};\n    lst.forEach(i => countDigit[i] = 0);\n    \n    lst.forEach(i => countDigit[i]++);\n    \n    if (lst.some(i => countDigit[i] > 2)) {\n        return false;\n    }\n    \n    if (lst.slice(1).every((num, i) => lst[i] <= num)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
  "127": "function intersection(interval1, interval2) {\n\n    function isPrime(num) {\n      if (num === 1 || num === 0) {\n        return false;\n      }\n      if (num === 2) {\n        return true;\n      }\n      for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n    if (length > 0 && isPrime(length)) {\n      return \"YES\";\n    }\n    return \"NO\";\n}\n\n// Test cases\nconsole.log(intersection([1, 2], [2, 3])); // \"NO\"\nconsole.log(intersection([-1, 1], [0, 4])); // \"NO\"\nconsole.log(intersection([-3, -1], [-5, 5])); // \"YES\"\nconsole.log(intersection([-2, 2], [-4, 0])); // \"YES\"\nconsole.log(intersection([-11, 2], [-1, -1])); // \"NO\"\nconsole.log(intersection([1, 2], [3, 5])); // \"NO\"\nconsole.log(intersection([1, 2], [1, 2])); // \"NO\"\nconsole.log(intersection([-2, -2], [-3, -2])); // \"NO\"\n```",
  "128": "function prodSigns(arr) {\n    if (!arr) return null;\n    const prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);\n    return prod * arr.reduce((sum, i) => sum + Math.abs(i), 0);\n}\n\n",
  "129": "function minPath(grid, k) {\n    let n = grid.length;\n    let val = n * n + 1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                let temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n                val = Math.min(...temp);\n            }\n        }\n    }\n    let ans = [];\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            ans.push(1);\n        } else {\n            ans.push(val);\n        }\n    }\n    return ans;\n}\n\n",
  "130": "function tri(n) {\n    if (n === 0) {\n        return [1];\n    }\n    \n    let myTri = [1, 3];\n    \n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            myTri.push(i / 2 + 1);\n        } else {\n            myTri.push(myTri[i - 1] + myTri[i - 2] + (i + 3) / 2);\n        }\n    }\n    \n    return myTri;\n}\n\n",
  "131": "function digits(n) {\n    let product = 1;\n    let oddCount = 0;\n    for (let digit of n.toString()) {\n        let intDigit = parseInt(digit);\n        if (intDigit % 2 === 1) {\n            product *= intDigit;\n            oddCount++;\n        }\n    }\n    if (oddCount === 0) {\n        return 0;\n    } else {\n        return product;\n    }\n}\n\n// Testing the translated JavaScript function with the provided test cases\nfunction checkDigits() {\n    // Check some simple cases\n    console.log(digits(5) === 5);\n    console.log(digits(54) === 5);\n    console.log(digits(120) === 1);\n    console.log(digits(5014) === 5);\n    console.log(digits(98765) === 315);\n    console.log(digits(5576543) === 2625);\n\n    // Check some edge cases that are easy to work out by hand\n    console.log(digits(2468) === 0);\n}\n\ncheckDigits();\n```",
  "132": "function isNested(string) {\n    const openingBracketIndex = [];\n    const closingBracketIndex = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            openingBracketIndex.push(i);\n        } else {\n            closingBracketIndex.push(i);\n        }\n    }\n    closingBracketIndex.reverse();\n    let count = 0;\n    let i = 0;\n    const length = closingBracketIndex.length;\n    for (const idx of openingBracketIndex) {\n        if (i < length && idx < closingBracketIndex[i]) {\n            count++;\n            i++;\n        }\n    }\n    return count >= 2;\n}\n```",
  "133": "function sumSquares(lst) {\n    let squared = 0;\n    for (let i of lst) {\n        squared += Math.ceil(i) ** 2;\n    }\n    return squared;\n}\n\n",
  "134": "function checkIfLastCharIsALetter(txt) {\n    let check = txt.split(' ').slice(-1)[0];\n    return check.length === 1 && (97 <= check.toLowerCase().charCodeAt(0) && check.toLowerCase().charCodeAt(0) <= 122);\n}\n\n",
  "135": "function canArrange(arr) {\n    let ind = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            ind = i;\n        }\n    }\n    return ind;\n}\n\n",
  "136": "function largestSmallestIntegers(lst) {\n    let smallest = lst.filter(x => x < 0);\n    let largest = lst.filter(x => x > 0);\n    \n    return [(smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null)];\n}\n\n",
  "137": "function compareOne(a, b) {\n    let tempA = a;\n    let tempB = b;\n\n    if (typeof tempA === 'string') tempA = tempA.replace(',', '.');\n    if (typeof tempB === 'string') tempB = tempB.replace(',', '.');\n\n    if (parseFloat(tempA) === parseFloat(tempB)) return null;\n\n    return parseFloat(tempA) > parseFloat(tempB) ? a : b;\n}\n\n",
  "138": "function isEqualToSumEven(n) {\n    return n % 2 === 0 && n >= 8;\n}\n\n",
  "139": "function specialFactorial(n) {\n    let factI = 1;\n    let specialFact = 1;\n    for (let i = 1; i <= n; i++) {\n        factI *= i;\n        specialFact *= factI;\n    }\n    return specialFact;\n}\n\n",
  "140": "function fixSpaces(text) {\n    let newText = \"\";\n    let i = 0;\n    let start = 0;\n    let end = 0;\n\n    while (i < text.length) {\n        if (text[i] === \" \") {\n            end += 1;\n        } else {\n            if (end - start > 2) {\n                newText += \"-\" + text[i];\n            } else if (end - start > 0) {\n                newText += \"_\".repeat(end - start) + text[i];\n            } else {\n                newText += text[i];\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i++;\n    }\n\n    if (end - start > 2) {\n        newText += \"-\";\n    } else if (end - start > 0) {\n        newText += \"_\";\n    }\n\n    return newText;\n}\n\n",
  "141": "function fileNameCheck(fileName) {\n    const suf = ['txt', 'exe', 'dll'];\n    const lst = fileName.split('.');\n    if (lst.length !== 2) {\n        return 'No';\n    }\n    if (!suf.includes(lst[1])) {\n        return 'No';\n    }\n    if (lst[0].length === 0 || !lst[0][0].match(/[a-zA-Z]/)) {\n        return 'No';\n    }\n    const digitCount = lst[0].split('').filter(x => !isNaN(x)).length;\n    if (digitCount > 3) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\n// Test cases\nconsole.log(fileNameCheck(\"example.txt\") === 'Yes');\nconsole.log(fileNameCheck(\"1example.dll\") === 'No');\nconsole.log(fileNameCheck('s1sdf3.asd') === 'No');\nconsole.log(fileNameCheck('K.dll') === 'Yes');\nconsole.log(fileNameCheck('MY16FILE3.exe') === 'Yes');\nconsole.log(fileNameCheck('His12FILE94.exe') === 'No');\nconsole.log(fileNameCheck('_Y.txt') === 'No');\nconsole.log(fileNameCheck('?aREYA.exe') === 'No');\nconsole.log(fileNameCheck('/this_is_valid.dll') === 'No');\nconsole.log(fileNameCheck('this_is_valid.wow') === 'No');\nconsole.log(fileNameCheck('this_is_valid.txt') === 'Yes');\nconsole.log(fileNameCheck('this_is_valid.txtexe') === 'No');\nconsole.log(fileNameCheck('#this2_i4s_5valid.ten') === 'No');\nconsole.log(fileNameCheck('@this1_is6_valid.exe') === 'No');\nconsole.log(fileNameCheck('this_is_12valid.6exe4.txt') === 'No');\nconsole.log(fileNameCheck('all.exe.txt') === 'No');\nconsole.log(fileNameCheck('I563_No.exe') === 'Yes');\nconsole.log(fileNameCheck('Is3youfault.txt') === 'Yes');\nconsole.log(fileNameCheck('no_one#knows.dll') === 'Yes');\nconsole.log(fileNameCheck('1I563_Yes3.exe') === 'No');\nconsole.log(fileNameCheck('I563_Yes3.txtt') === 'No');\nconsole.log(fileNameCheck('final..txt') === 'No');\nconsole.log(fileNameCheck('final132') === 'No');\nconsole.log(fileNameCheck('_f4indsartal132.') === 'No');\nconsole.log(fileNameCheck('.txt') === 'No');\nconsole.log(fileNameCheck('s.') === 'No');\n```",
  "142": "function sumSquares(lst) {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            result.push(lst[i] ** 2);\n        } else if (i % 4 === 0 && i % 3 !== 0) {\n            result.push(lst[i] ** 3);\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    return result.reduce((acc, curr) => acc + curr, 0);\n}\n\n// Test cases\nfunction checkSumSquares() {\n    if (sumSquares([1,2,3]) === 6 &&\n        sumSquares([1,4,9]) === 14 &&\n        sumSquares([]) === 0 &&\n        sumSquares([1,1,1,1,1,1,1,1,1]) === 9 &&\n        sumSquares([-1,-1,-1,-1,-1,-1,-1,-1,-1]) === -3 &&\n        sumSquares([0]) === 0 &&\n        sumSquares([-1,-5,2,-1,-5]) === -126 &&\n        sumSquares([-56,-99,1,0,-2]) === 3030 &&\n        sumSquares([-1,0,0,0,0,0,0,0,-1]) === 0 &&\n        sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) === -14196 &&\n        sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) === -1448) {\n        console.log(\"All tests passed!\");\n    } else {\n        console.log(\"Some tests failed.\");\n    }\n}\n\n// Execute test cases\ncheckSumSquares();\n```",
  "143": "function wordsInSentence(sentence) {\n    let newLst = [];\n    sentence.split(\" \").forEach(word => {\n        let flg = 0;\n        if (word.length === 1) {\n            flg = 1;\n        }\n        for (let i = 2; i < word.length; i++) {\n            if (word.length % i === 0) {\n                flg = 1;\n            }\n        }\n        if (flg === 0 || word.length === 2) {\n            newLst.push(word);\n        }\n    });\n    return newLst.join(\" \");\n}\n\n",
  "144": "function simplify(x, n) {\n    let a, b, c, d;\n    [a, b] = x.split(\"/\");\n    [c, d] = n.split(\"/\");\n    let numerator = parseInt(a) * parseInt(c);\n    let denom = parseInt(b) * parseInt(d);\n    if (numerator / denom == parseInt(numerator / denom)) {\n        return true;\n    }\n    return false;\n}\n\n",
  "145": "function orderByPoints(nums) {\n\n    function digitsSum(n) {\n        let neg = 1;\n        if (n < 0) {\n            n = -1 * n;\n            neg = -1;\n        }\n        let nArr = Array.from(String(n), Number);\n        nArr[0] = nArr[0] * neg;\n        return nArr.reduce((acc, curr) => acc + curr, 0);\n    }\n\n    return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}\n\n",
  "146": "function specialFilter(nums) {\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10) {\n            const oddDigits = [1, 3, 5, 7, 9];\n            const numberAsString = num.toString();\n            if (oddDigits.includes(parseInt(numberAsString[0])) && oddDigits.includes(parseInt(numberAsString.slice(-1)))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
  "147": "function getMaxTriples(n) {\n    const A = [];\n    for (let i = 1; i <= n; i++) {\n        A.push(i * i - i + 1);\n    }\n\n    let ans = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    ans.push([A[i], A[j], A[k]]);\n                }\n            }\n        }\n    }\n    \n    return ans.length;\n}\n\nconsole.log(getMaxTriples(5) === 1);\nconsole.log(getMaxTriples(6) === 4);\nconsole.log(getMaxTriples(10) === 36);\nconsole.log(getMaxTriples(100) === 53361);\n```",
  "148": "function findPlanetsBetween(planet1, planet2) {\n    const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\n    if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {\n        return [];\n    }\n\n    const planet1Index = planetNames.indexOf(planet1);\n    const planet2Index = planetNames.indexOf(planet2);\n\n    if (planet1Index < planet2Index) {\n        return planetNames.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetNames.slice(planet2Index + 1, planet1Index);\n    }\n}\n\n// Test cases\n",
  "149": "function sortedListSum(lst) {\n    lst.sort();\n    let newLst = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newLst.push(i);\n        }\n    }\n    return newLst.sort((a, b) => a.length - b.length);\n}\n\n// Test cases\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"])); // [\"aa\"]\nconsole.log(sortedListSum([\"school\", \"AI\", \"asdf\", \"b\"])); // [\"AI\", \"asdf\", \"school\"]\nconsole.log(sortedListSum([\"d\", \"b\", \"c\", \"a\"])); // []\nconsole.log(sortedListSum([\"d\", \"dcba\", \"abcd\", \"a\"])); // [\"abcd\", \"dcba\"]\nconsole.log(sortedListSum([\"AI\", \"ai\", \"au\"])); // [\"AI\", \"ai\", \"au\"]\nconsole.log(sortedListSum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])); // []\nconsole.log(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])); // [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n```",
  "150": "function xOrY(n, x, y) {\n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\n// Test cases\nconsole.log(xOrY(7, 34, 12) === 34);\nconsole.log(xOrY(15, 8, 5) === 5);\nconsole.log(xOrY(3, 33, 5212) === 33);\nconsole.log(xOrY(1259, 3, 52) === 3);\nconsole.log(xOrY(7919, -1, 12) === -1);\nconsole.log(xOrY(3609, 1245, 583) === 583);\nconsole.log(xOrY(91, 56, 129) === 129);\nconsole.log(xOrY(6, 34, 1234) === 1234);\nconsole.log(xOrY(1, 2, 0) === 0);\nconsole.log(xOrY(2, 2, 0) === 2);\n```",
  "151": "function doubleTheDifference(lst) {\n    return lst.filter(i => i > 0 && i % 2 !== 0 && !String(i).includes(\".\")).reduce((acc, val) => acc + val**2, 0);\n}\n\n",
  "152": "function compare(game, guess) {\n    return game.map((value, index) => Math.abs(value - guess[index]));\n}\n\n",
  "153": "function strongestExtension(className, extensions) {\n    let strong = extensions[0];\n    let myVal = extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n    \n    for (let s of extensions) {\n        let val = s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n        \n        if (val > myVal) {\n            strong = s;\n            myVal = val;\n        }\n    }\n    \n    let ans = className + \".\" + strong;\n    return ans;\n}\n\n// Test cases\nconsole.log(strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])); // 'Watashi.eIGHt8OKe'\nconsole.log(strongestExtension('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'])); // 'Boku123.YEs.WeCaNe'\nconsole.log(strongestExtension('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'])); // '__YESIMHERE.NuLl__'\nconsole.log(strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo'])); // 'K.TAR'\nconsole.log(strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-'])); // '__HAHA.123'\nconsole.log(strongestExtension('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'])); // 'YameRore.okIWILL123'\nconsole.log(strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW'])); // 'finNNalLLly.WoW'\nconsole.log(strongestExtension('_', ['Bb', '91245'])); // '_.Bb'\nconsole.log(strongestExtension('Sp', ['671235', 'Bb'])); // 'Sp.671235'\n```",
  "154": "function cycpatternCheck(a, b) {\n    let l = b.length;\n    let pat = b + b;\n    for (let i = 0; i < a.length - l + 1; i++) {\n        for (let j = 0; j < l + 1; j++) {\n            if (a.substring(i, i + l) === pat.substring(j, j + l)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n",
  "155": "function evenOddCount(num) {\n    let evenCount = 0;\n    let oddCount = 0;\n    \n    for (let i of Math.abs(num).toString()) {\n        if (parseInt(i) % 2 === 0) {\n            evenCount += 1;\n        } else {\n            oddCount += 1;\n        }\n    }\n    \n    return [evenCount, oddCount];\n}\n\n",
  "156": "function intToMiniRoman(number) {\n    var num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]; \n    var sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n    var i = 12;\n    var res = '';\n    while (number) {\n        var div = Math.floor(number / num[i]);\n        number %= num[i]; \n        while (div) {\n            res += sym[i]; \n            div -= 1; \n        }\n        i -= 1; \n    }\n    return res.toLowerCase();\n}\n\n// Test cases\nconsole.log(intToMiniRoman(19) === 'xix');\nconsole.log(intToMiniRoman(152) === 'clii');\nconsole.log(intToMiniRoman(251) === 'ccli');\nconsole.log(intToMiniRoman(426) === 'cdxxvi');\nconsole.log(intToMiniRoman(500) === 'd');\nconsole.log(intToMiniRoman(1) === 'i');\nconsole.log(intToMiniRoman(4) === 'iv');\nconsole.log(intToMiniRoman(43) === 'xliii');\nconsole.log(intToMiniRoman(90) === 'xc');\nconsole.log(intToMiniRoman(94) === 'xciv');\nconsole.log(intToMiniRoman(532) === 'dxxxii');\nconsole.log(intToMiniRoman(900) === 'cm');\nconsole.log(intToMiniRoman(994) === 'cmxciv');\nconsole.log(intToMiniRoman(1000) === 'm');\n```  ",
  "157": "function rightAngleTriangle(a, b, c) {\n    return a*a === b*b + c*c || b*b === a*a + c*c || c*c === a*a + b*b;\n}\n\n",
  "158": "function findMax(words) {\n    return words.sort((a, b) => {\n        return a.length !== b.length ? b.length - new Set(b).size - (a.length - new Set(a).size) : (a < b ? -1 : 1);\n    })[0];\n}\n\n// Test cases\nconsole.log(findMax([\"name\", \"of\", \"string\"]) === \"string\");\nconsole.log(findMax([\"name\", \"enam\", \"game\"]) === \"enam\");\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]) === \"aaaaaaa\");\nconsole.log(findMax([\"abc\", \"cba\"]) === \"abc\");\nconsole.log(findMax([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) === \"footbott\");\nconsole.log(findMax([\"we\", \"are\", \"gonna\", \"rock\"]) === \"gonna\");\nconsole.log(findMax([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) === \"nation\");\nconsole.log(findMax([\"this\", \"is\", \"a\", \"prrk\"]) === \"this\");\nconsole.log(findMax([\"b\"]) === \"b\");\nconsole.log(findMax([\"play\", \"play\", \"play\"]) === \"play\");\n```",
  "159": "function eat(number, need, remaining) {\n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}\n\n",
  "160": "function doAlgebra(operator, operand) {\n    let expression = String(operand[0]);\n    for (let i = 1; i < operand.length; i++) {\n        expression += operator[i-1] + String(operand[i]);\n    }\n    return eval(expression);\n}\n\n// Test cases\n",
  "161": "function solve(s) {\n    let flg = 0;\n    let idx = 0;\n    let newStr = s.split(\"\");\n    \n    for (let i of s) {\n        if (i.match(/[a-zA-Z]/)) {\n            newStr[idx] = i === i.toLowerCase() ? i.toUpperCase() : i.toLowerCase();\n            flg = 1;\n        }\n        idx++;\n    }\n    \n    let result = \"\";\n    for (let i of newStr) {\n        result += i;\n    }\n    \n    if (flg === 0) {\n        return result.split(\"\").reverse().join(\"\");\n    }\n    \n    return result;\n}\n\n// Testing\nconsole.log(solve(\"AsDf\") === \"aSdF\");\nconsole.log(solve(\"1234\") === \"4321\");\nconsole.log(solve(\"ab\") === \"AB\");\nconsole.log(solve(\"#a@C\") === \"#A@c\");\nconsole.log(solve(\"#AsdfW^45\") === \"#aSDFw^45\");\nconsole.log(solve(\"#6@2\") === \"2@6#\");\nconsole.log(solve(\"#$a^D\") === \"#$A^d\");\nconsole.log(solve(\"#ccc\") === \"#CCC\");\n```",
  "162": "function stringToMd5(text) {\n    const crypto = require('crypto');\n    return text ? crypto.createHash('md5').update(text).digest('hex') : null;\n}\n\n",
  "163": "function generateIntegers(a, b) {\n    let lower = Math.max(2, Math.min(a, b));\n    let upper = Math.min(8, Math.max(a, b));\n\n    return Array.from({length: upper - lower + 1}, (_, index) => index + lower).filter(i => i % 2 === 0);\n}\n\n"
}