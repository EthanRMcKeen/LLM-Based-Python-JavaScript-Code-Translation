{
  "0": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                distance = abs(numbers[i] - numbers[j])\n                if distance < threshold:\n                    return True\n    return False",
  "1": "def separate_paren_groups(paren_string):\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n\n    return result",
  "2": "def truncate_number(number):\n    return number % 1.0",
  "3": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False",
  "4": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(item - mean) for item in numbers]) / len(numbers)",
  "5": "def intersperse(numbers, delimeter):\n    if not isinstance(numbers, list) or len(numbers) == 0:\n        return []\n    \n    result = []\n    for n in numbers:\n        result.append(n)\n        result.append(delimeter)\n    \n    result.pop()\n    return result",
  "6": "def parse_nested_parens(paren_string):\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        return max_depth\n    \n    return list(map(parse_paren_group, filter(None, paren_string.split(' ')))\n```",
  "7": "def filter_by_substring(strings, substring):\n    return list(filter(lambda x: substring in x, strings))",
  "8": "def sum_product(numbers, integer):\n    sum_value = 0\n    prod_value = 1\n    \n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    \n    return [sum_value, prod_value]",
  "9": "def rolling_max(numbers):\n    running_max, result = None, []\n    \n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n    \n    return result",
  "10": "def is_palindrome(string):\n    return string == string[::-1]\n\ndef make_palindrome(string):\n    if string == '':\n        return ''\n    beginning_of_suffix = 0\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n    return string + string[:beginning_of_suffix][::-1]",
  "11": "def string_xor(a, b):\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n    \n    return ''.join([xor(item, b[index]) for index, item in enumerate(a)])\n\n\n# Test the function\nresult = string_xor(\"1101\", \"1010\")\nprint(result)",
  "12": "def longest(strings):\n    if not isinstance(strings, list) or len(strings) == 0:\n        return None\n    maxlen = max(map(len, strings))\n    for s in strings:\n        if len(s) == maxlen:\n            return s",
  "13": "def greatest_common_divisor(a, b):\n    while b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a",
  "14": "def all_prefixes(string):\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result",
  "15": "def string_sequence(n):\n    return ' '.join([str(i) for i in range(n+1)])\n\n# Test the translated code\nprint(string_sequence(5))  # Output: \"0 1 2 3 4 5\"",
  "16": "def count_distinct_characters(input_string):\n    return len(set(input_string.lower()))",
  "17": "def parse_music(music_string):\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return list(map(lambda x: note_map[x], filter(lambda x: x != '', music_string.split(' ')))\n```",
  "18": "def how_many_times(string, substring):\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times",
  "19": "def sort_numbers(numbers):\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(filter(lambda x: x != '', numbers.split(' ')), key=lambda x: value_map[x]))\n\n```",
  "20": "def find_closest_elements(numbers):\n    closest_pair = None\n    distance = None\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                a = numbers[i]\n                b = numbers[j]\n                if distance is None:\n                    distance = abs(a - b)\n                    closest_pair = [min(a, b), max(a, b)]\n                else:\n                    new_distance = abs(a - b)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = [min(a, b), max(a, b)]\n    return closest_pair\n```  ",
  "21": "def rescale_to_unit(numbers):\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]",
  "22": "def filter_integers(values):\n    return list(filter(lambda x: isinstance(x, int), values))",
  "23": "def str_len(string):\n    return len(string)",
  "24": "def largest_divisor(n):\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n```",
  "25": "def factorize(n):\n    fact = []\n    i = 2\n    while i <= (n ** 0.5) + 1:\n        if n % i == 0:\n            fact.append(i)\n            n = n // i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n```",
  "26": "def remove_duplicates(numbers):\n    dict_ = {}\n    for num in numbers:\n        if num in dict_:\n            dict_[num] += 1\n        else:\n            dict_[num] = 1\n    return list(filter(lambda x: dict_[x] <= 1, numbers))",
  "27": "def flip_case(string):\n    return ''.join([x.lower() if x.isupper() else x.upper() for x in string])\n\n# Test the function\nprint(flip_case(\"Hello, World!\"))",
  "28": "def concatenate(strings):\n    return ''.join(strings)",
  "29": "def filter_by_prefix(strings, prefix):\n    return list(filter(lambda x: x.startswith(prefix), strings))",
  "30": "def get_positive(l):\n    return list(filter(lambda e: e > 0, l))",
  "31": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True",
  "32": "def poly(xs, x):\n    return sum(item * x**index for index, item in enumerate(xs))\n\n\ndef find_zero(xs):\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n\n    return begin\n```  ",
  "33": "def sort_third(l):\n    three = list(filter(lambda item, index: index % 3 == 0, l))\n    three.sort()\n    return list(map(lambda item, index: three[index // 3] if index % 3 == 0 else item, l, range(len(l))))\n```",
  "34": "def unique(l):\n    return sorted(list(set(l)))",
  "35": "def max_element(l):\n    return max(l)\n```",
  "36": "def fizz_buzz(n):\n    ns = []\n    ans = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(map(str, ns))\n    for c in s:\n        ans += (c == '7')\n    return ans\n```",
  "37": "def sort_even(l):\n    even = list(filter(lambda item, index: index % 2 == 0, l))\n    even.sort()\n    return list(map(lambda item, index: even[index // 2] if index % 2 == 0 else item, l))",
  "38": "def encode_cyclic(s):\n    groups = []\n    groups2 = []\n    for i in range((len(s) + 2) // 3):\n        groups.append(s[3 * i:min(3 * i + 3, len(s))])\n    \n    for group in groups:\n        if len(group) == 3:\n            groups2.append(group[1:] + group[0])\n        else:\n            groups2.append(group)\n    \n    return ''.join(groups2)\n\ndef decode_cyclic(s):\n    return encode_cyclic(encode_cyclic(s))\n```",
  "39": "def prime_fib(n):\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(p ** 0.5) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n```",
  "40": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
  "41": "def car_race_collision(n):\n    return n ** 2",
  "42": "def incr_list(l):\n    return list(map(lambda e: e + 1, l))",
  "43": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n```",
  "44": "def change_base(x, base):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret",
  "45": "def triangle_area(a, h):\n    return a * h / 2.0\n```",
  "46": "def fib4(n):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n    return results.pop()\n```",
  "47": "def calculate_median(lst):\n    lst.sort()\n    length = len(lst)\n    if length % 2 == 1:\n        return lst[length // 2]\n    else:\n        return (lst[length // 2 - 1] + lst[length // 2]) / 2.0",
  "48": "def is_palindrome(text):\n    for i in range(len(text)):\n        if text[i] != text[-i-1]:\n            return False\n    return True",
  "49": "def modp(n, p):\n    ret = 1\n    for i in range(0, n):\n        ret = (2 * ret) % p\n    return ret",
  "50": "def encode_shift(s):\n    return \"\".join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s):\n    return \"\".join([chr(((ord(ch) - 5 + 26 - ord('a')) % 26) + ord('a')) for ch in s])\n```",
  "51": "def remove_vowels(text):\n    return \"\".join([char for char in text if char.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])",
  "52": "def below_threshold(lst, t):\n    for elem in lst:\n        if elem >= t:\n            return False\n    return True",
  "53": "def add(x, y):\n    return x + y",
  "54": "def same_chars(s0, s1):\n    return sorted(list(set(s0))) == sorted(list(set(s1)))\n```  ",
  "55": "def fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)",
  "56": "def correct_bracketing(brackets):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0",
  "57": "def monotonic(l):\n    sort1 = sorted(l)\n    sort2 = sorted(l, reverse=True)\n    if l == sort1 or l == sort2:\n        return True\n    return False",
  "58": "def common(l1, l2):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))",
  "59": "def largest_prime_factor(n):\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    largest = 1\n    for j in range(2, n+1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n```",
  "60": "def sum_to_n(n):\n    return n * (n + 1) / 2",
  "61": "def correct_bracketing(brackets):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n```",
  "62": "def derivative(xs):\n    return [x*i for i, x in enumerate(xs)][1:]",
  "63": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",
  "64": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(1 for char in s if char in vowels)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n```  ",
  "65": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return ''.join(list(s)[::-1])\n    else:\n        return s[-shift:] + s[:-shift]",
  "66": "def digit_sum(s):\n    if s == '':\n        return 0\n    return sum(ord(char) for char in s if 64 < ord(char) < 91)",
  "67": "def fruit_distribution(s, n):\n    lis = []\n    for i in s.split(\" \"):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)",
  "68": "def pluck(arr):\n    if len(arr) == 0:\n        return []\n\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "69": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    return ans\n```",
  "70": "def strange_sort_list(lst):\n    res = []\n    sw = True\n    while len(lst) > 0:\n        if sw:\n            res.append(min(lst))\n        else:\n            res.append(max(lst))\n        lst.pop(lst.index(res[-1]))\n        sw = not sw\n    return res",
  "71": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area",
  "72": "def will_it_fly(q, w):\n    if sum(q) > w:\n        return False\n    \n    i = 0\n    j = len(q) - 1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True",
  "73": "def smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans",
  "74": "def total_match(lst1, lst2):\n    l1 = sum([len(item) for item in lst1])\n    l2 = sum([len(item) for item in lst2])\n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2",
  "75": "def is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if not is_prime(i):\n            continue\n        for j in range(2, 101):\n            if not is_prime(j):\n                continue\n            for k in range(2, 101):\n                if not is_prime(k):\n                    continue\n                if i*j*k == a:\n                    return True\n    return False\n```",
  "76": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power = power * n\n    return power == x",
  "77": "def is_cube(a):\n    a = abs(a)\n    return pow(round(pow(a, 1.0 / 3.0)), 3) == a\n```",
  "78": "def hex_key(num):\n    primes = \"2357BD\"\n    total = 0\n    for i in range(len(num)):\n        if num[i] in primes:\n            total += 1\n    return total",
  "79": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"",
  "80": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True",
  "81": "def numerical_letter_grade(grades):\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append('A+')\n        elif gpa > 3.7:\n            letter_grade.append('A')\n        elif gpa > 3.3:\n            letter_grade.append('A-')\n        elif gpa > 3.0:\n            letter_grade.append('B+')\n        elif gpa > 2.7:\n            letter_grade.append('B')\n        elif gpa > 2.3:\n            letter_grade.append('B-')\n        elif gpa > 2.0:\n            letter_grade.append('C+')\n        elif gpa > 1.7:\n            letter_grade.append('C')\n        elif gpa > 1.3:\n            letter_grade.append('C-')\n        elif gpa > 1.0:\n            letter_grade.append('D+')\n        elif gpa > 0.7:\n            letter_grade.append('D')\n        elif gpa > 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n```",
  "82": "def prime_length(input_string):\n    length = len(input_string)\n    if length == 1 or length == 0:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True",
  "83": "def starts_one_ends(n) :\n    if n == 1:\n        return 1\n    t = 18\n    for i in range(2, n):\n        t = t * 10\n    return t",
  "84": "def solve(N):\n    t = 0\n    while N > 0:\n        t += N % 10\n        N = (N - N % 10) // 10\n    return bin(t)[2:]",
  "85": "def add(lst):\n    t = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            t += lst[i]\n    return t\n```",
  "86": "def anti_shuffle(s):\n    arr = s.split()\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            ind = j\n            for k in range(j + 1, len(arr[i])):\n                if ord(arr[i][k]) < ord(arr[i][ind]):\n                    ind = k\n            if ind > j:\n                arr[i] = arr[i][:j] + arr[i][ind] + arr[i][j+1:ind] + arr[i][j] + arr[i][ind+1:]\n    \n    t = ''\n    for i in range(len(arr)):\n        if i > 0:\n            t += ' '\n        t += arr[i]\n    \n    return t\n```  ",
  "87": "def get_row(lst, x):\n    t = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])-1, -1, -1):\n            if lst[i][j] == x:\n                t.append((i, j))\n    return t",
  "88": "def sort_array(array):\n    arr = array\n    tot = arr[0] + arr[-1]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if (tot % 2 == 1 and arr[k] < arr[ind]) or (tot % 2 == 0 and arr[k] > arr[ind]):\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n    return arr\n```",
  "89": "def encrypt(s):\n    t = ''\n    for i in range(len(s)):\n        p = ord(s[i]) + 4\n        if p > 122:\n            p -= 26\n        t += chr(p)\n    return t",
  "90": "def next_smallest(lst):\n    arr = lst[:]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if arr[k] < arr[ind]:\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n    smallest = arr[0]\n    pt = 1\n    while pt < len(arr):\n        if arr[pt] > smallest:\n            return arr[pt]\n        pt += 1\n    return None\n```",
  "91": "def is_bored(s):\n    t = 0\n    if s[0] == 'I' and s[1] == ' ':\n        t = 1\n    for i in range(len(s)):\n        if s[i] == '.' or s[i] == '!' or s[i] == '?':\n            if s[i + 1] == ' ' and s[i + 2] == 'I' and s[i + 3] == ' ':\n                t += 1\n    return t\n```",
  "92": "def any_int(x, y, z):\n    if x.is_integer() and y.is_integer() and z.is_integer() and (x + y == z or x + z == y or x == y + z):\n        return True\n    return False",
  "93": "def encode(message):\n    t = ''\n    for i in range(len(message)):\n        p = ord(message[i])\n        if p > 96:\n            p -= 32\n        elif p != 32 and p < 96:\n            p += 32\n        if p in [65, 97, 69, 101, 73, 105, 79, 111, 85, 117]:\n            p += 2\n        t += chr(p)\n    return t\n```",
  "94": "def skjkasdkd(lst):\n    t = 0\n    for i in range(len(lst)):\n        p = 1\n        j = 2\n        while j * j <= lst[i]:\n            if lst[i] % j == 0:\n                p = 0\n                break\n            j += 1\n        if p == 1 and lst[i] > t:\n            t = lst[i]\n    \n    k = 0\n    while t != 0:\n        k += t % 10\n        t = (t - t % 10) // 10\n    \n    return k\n```",
  "95": "def check_dict_case(dictionary):\n    c = 0\n    lo = 1\n    hi = 1\n    for key in dictionary:\n        c += 1\n        for char in key:\n            if ord(char) < 65 or ord(char) > 90:\n                hi = 0\n            if ord(char) < 97 or ord(char) > 122:\n                lo = 0\n    if (lo == 0 and hi == 0) or c == 0:\n        return False\n    return True\n```",
  "96": "def count_up_to(n):\n    t = []\n    for i in range(2, n):\n        p = 1\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                p = 0\n                break\n        if p == 1:\n            t.append(i)\n    return t",
  "97": "def multiply(a, b):\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return (a % 10) * (b % 10)",
  "98": "def count_upper(s):\n    p = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            p += 1\n    return p",
  "99": "def closest_integer(value):\n    value = float(value)\n    t = value % 1\n    if t < 0.5 and t > -0.5:\n        value -= t\n    else:\n        value += t\n    return value",
  "100": "def make_a_pile(n):\n    t = []\n    for i in range(n, n*3, 2):\n        t.append(i)\n    return t",
  "101": "def words_string(s):\n    t = ''\n    p = []\n    k = 0\n    for i in range(len(s)):\n        if s[i] == ' ' or s[i] == ',':\n            if k == 0:\n                k = 1\n                p.append(t)\n                t = ''\n        else:\n            k = 0\n            t += s[i]\n    if t != '':\n        p.append(t)\n    return p\n```",
  "102": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1",
  "103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    k = (n + m) / 2\n    if k % 1 != 0:\n        k = (n + m + 1) / 2\n    return '0b' + bin(k)[2:]",
  "104": "def unique_digits(x):\n    p = []\n    for i in range(len(x)):\n        h = x[i]\n        boo = 1\n        while h > 0:\n            r = h % 10\n            if r % 2 == 0:\n                boo = 0\n                break\n            h = (h - r) // 10\n        if boo:\n            p.append(x[i])\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] < p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n\n    return p\n```  ",
  "105": "def by_length(arr):\n    p = [x for x in arr if 0 < x < 10]\n\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] > p[ind]:\n                ind = k\n        if ind > j:\n            p[j], p[ind] = p[ind], p[j]\n\n    l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    t = [l[x-1] for x in p]\n    return t\n```",
  "106": "def translate_function(n):\n    f_val = 1\n    p_val = 0\n    k_list = []\n    \n    for i in range(1, n+1):\n        p_val += i\n        f_val *= i\n        if i % 2 == 0:\n            k_list.append(f_val)\n        else:\n            k_list.append(p_val)\n    \n    return k_list",
  "107": "def even_odd_palindrome(n):\n    e = 0\n    o = 0\n    for i in range(1, n + 1):\n        k = str(i)\n        p = 1\n        for j in range(len(k)):\n            if k[j] != k[len(k) - j - 1]:\n                p = 0\n                break\n        if p == 1:\n            if int(k) % 2 == 0:\n                e += 1\n            else:\n                o += 1\n    return e, o\n```",
  "108": "def count_nums(arr):\n    p = 0\n    for i in range(len(arr)):\n        h = arr[i]\n        if h > 0:\n            p += 1\n            continue\n        k = 0\n        h = -h\n        while h >= 10:\n            k += h % 10\n            h = (h - h % 10) // 10\n        k -= h\n        if k > 0:\n            p += 1\n    return p\n```",
  "109": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    k = 0\n    length = len(arr)\n    for i in range(length):\n        t = 1\n        for j in range(1, length):\n            if arr[j] < arr[j - 1]:\n                t = 0\n                break\n        if t == 1:\n            k = 1\n            break\n        arr.append(arr[0])\n        arr.pop(0)\n    if k == 1:\n        return True\n    return False\n```",
  "110": "def exchange(lst1, lst2):\n    k = len(lst1)\n    t = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            t += 1\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            t += 1\n    if t >= k:\n        return 'YES'\n    return 'NO'\n```",
  "111": "def histogram(test):\n    d = {}\n    t = test.split()\n    if test == '':\n        t = []\n    for m in t:\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\n    s = sorted(d, key=lambda x: (-d[x], x))\n    if len(s) == 0:\n        return {}\n    g = d[s[0]]\n    l = {}\n    for ss in range(len(s)):\n        if d[s[ss]] == g:\n            l[s[ss]] = d[s[ss]]\n    return l\n```",
  "112": "def reverse_delete(s, c):\n    t = ''\n    for i in range(len(s)):\n        y = 1\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                y = 0\n        if y == 1:\n            t += s[i]\n    z = 1\n    for i in range(len(t)):\n        if t[i] != t[len(t) - i - 1]:\n            z = 0\n    if z == 0:\n        return z, False\n    return z, True\n```",
  "113": "def odd_count(lst):\n    d = []\n    for i in range(len(lst)):\n        p = 0\n        h = len(lst[i])\n        for j in range(h):\n            if ord(lst[i][j]) % 2 == 1:\n                p += 1\n        p = str(p)\n        d.append('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    return d\n```",
  "114": "def min_sub_array_sum(nums):\n    min_val = nums[0]\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            s = 0\n            for k in range(i, j):\n                s += nums[k]\n            if s < min_val:\n                min_val = s\n    return min_val",
  "115": "def max_fill(grid, capacity):\n    p = 0\n    for i in range(len(grid)):\n        m = 0\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                m += 1\n        while m > 0:\n            m -= capacity\n            p += 1\n    return p",
  "116": "def sort_array(arr):\n    p = arr\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            w1 = bin(p[ind])[2:]\n            f1 = 0\n            for u in range(len(w1)):\n                if w1[u] == '1':\n                    f1 += 1\n            w2 = bin(p[k])[2:]\n            f2 = 0\n            for u in range(len(w2)):\n                if w2[u] == '1':\n                    f2 += 1\n            if f2 < f1 or (f1 == f2 and p[k] < p[ind]):\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    return p\n```  ",
  "117": "def select_words(s, n):\n    t = s.split()\n    if s == '':\n        return []\n    k = []\n    for word in t:\n        count = 0\n        for letter in word:\n            if letter not in 'aeiouAEIOU':\n                count += 1\n        if count == n:\n            k.append(word)\n    return k\n```",
  "118": "def get_closest_vowel(word):\n    for i in range(len(word) - 2, 0, -1):\n        if (\n            not (word[i] != 'a' and word[i] != 'e' and word[i] != 'i' and word[i] != 'o' and word[i] != 'u' and word[i] != 'A' and\n                 word[i] != 'U' and word[i] != 'O' and word[i] != 'I' and word[i] != 'E')\n            and\n            word[i + 1] != 'a' and word[i + 1] != 'e' and word[i + 1] != 'i' and word[i + 1] != 'o' and word[i + 1] != 'u' and word[i + 1] != 'A' and\n            word[i + 1] != 'U' and word[i + 1] != 'O' and word[i + 1] != 'I' and word[i + 1] != 'E'\n            and\n            word[i - 1] != 'a' and word[i - 1] != 'e' and word[i - 1] != 'i' and word[i - 1] != 'o' and word[i - 1] != 'u' and word[i - 1] != 'A' and\n            word[i - 1] != 'U' and word[i - 1] != 'O' and word[i - 1] != 'I' and word[i - 1] != 'E'\n        ):\n            return word[i]\n    return ''\n\n```",
  "119": "def match_parens(lst):\n    w1 = lst[0] + lst[1]\n    y = 0\n    u = 1\n    for i in range(len(w1)):\n        if w1[i] == '(':\n            y += 1\n        else:\n            y -= 1\n        if y < 0:\n            u = 0\n            break\n    if u == 1 and y == 0:\n        return 'Yes'\n    \n    w1 = lst[1] + lst[0]\n    y = 0\n    u = 1\n    for i in range(len(w1)):\n        if w1[i] == '(':\n            y += 1\n        else:\n            y -= 1\n        if y < 0:\n            u = 0\n            break\n    if u == 1 and y == 0:\n        return 'Yes'\n    \n    return 'No'\n```",
  "120": "def maximum(arr, k):\n    p = arr\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] < p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    if k == 0:\n        return []\n    return p[-k:]\n```",
  "121": "def solution(lst):\n    p = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            p += lst[i]\n    return p",
  "122": "def add_elements(arr, k):\n    p = 0\n    for i in range(k):\n        if arr[i] < 100 and arr[i] > -100:\n            p += arr[i]\n    return p",
  "123": "def get_odd_collatz(n):\n    p = []\n    t = n\n    while True:\n        u = 0\n        for i in range(len(p)):\n            if t == p[i]:\n                u = 1\n                break\n        if u == 1:\n            break\n        if t % 2 == 1:\n            p.append(t)\n            t = 3 * t + 1\n        else:\n            t = t // 2\n\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] < p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n\n    return p\n```  ",
  "124": "def valid_date(date):\n    t = date.split('-')\n    if len(t) != 3:\n        return False\n    if int(t[0]) < 1 or int(t[0]) > 12 or int(t[1]) < 1:\n        return False\n    if t[0] == '2' and int(t[1]) > 29:\n        return False\n    if t[0] in ['1', '3', '5', '7', '8', '10', '12'] and int(t[1]) > 31:\n        return False\n    if t[0] in ['4', '6', '9', '11'] and int(t[1]) > 30:\n        return False\n    return True\n```",
  "125": "def split_words(txt):\n    t = txt.split()\n    if len(t) > 1:\n        return t\n    else:\n        t = txt.split(',')\n        if len(t) > 1:\n            return t\n        else:\n            p = 0\n            for i in range(len(txt)):\n                  m = ord(txt[i])\n                  if m >= 97 and m <= 122 and m % 2 == 0:\n                      p += 1\n            return p\n```",
  "126": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    dup = 1\n    pre = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < pre:\n            return False\n        if lst[i] == pre:\n            dup += 1\n            if dup == 3:\n                return False\n        else:\n            pre = lst[i]\n            dup = 1\n    return True\n```",
  "127": "def intersection(interval1, interval2):\n    lo = interval1[0]\n    if interval2[0] > lo:\n        lo = interval2[0]\n    hi = interval1[1]\n    if interval2[1] < hi:\n        hi = interval2[1]\n    len_val = 0\n    if hi > lo:\n        len_val = hi - lo\n    if len_val == 1 or len_val == 0:\n        return 'NO'\n    for i in range(2, int(len_val ** 0.5) + 1):\n        if len_val % i == 0:\n            return 'NO'\n    return 'YES'\n```  ",
  "128": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    n = 1\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n        if arr[i] == 0:\n            return 0\n        if arr[i] < 0:\n            n = -n\n            s -= 2 * arr[i]\n    \n    return s * n",
  "129": "def min_path(grid, k):\n    m = 0\n    n = 0\n    for i in range(len(grid)):\n        for j in range(len(grid)):\n            if grid[i][j] == 1:\n                m = i\n                n = j\n                break\n    min_val = len(grid) * len(grid)\n    if m > 0 and grid[m - 1][n] < min_val:\n        min_val = grid[m - 1][n]\n    if n > 0 and grid[m][n - 1] < min_val:\n        min_val = grid[m][n - 1]\n    if m < len(grid) - 1 and grid[m + 1][n] < min_val:\n        min_val = grid[m + 1][n]\n    if n < len(grid) - 1 and grid[m][n + 1] < min_val:\n        min_val = grid[m][n + 1]\n    result = []\n    for i in range(k):\n        if i % 2 == 0:\n            result.append(1)\n        else:\n            result.append(min_val)\n    return result\n```",
  "130": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    p = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            p.append(1 + i // 2)\n        else:\n            p.append(p[i - 2] + p[i - 1] + 1 + (i + 1) // 2)\n    return p\n```",
  "131": "def digits(n):\n    p = 1\n    k = 1\n    while n > 0:\n        y = n % 10\n        if y % 2 == 1:\n            p *= y\n            k = 0\n        n = (n - n % 10) // 10\n    if k == 0:\n        return p\n    return 0\n      ",
  "132": "def is_nested(input_string):\n    opening_bracket_index = []\n    closing_bracket_index1 = []\n    \n    for i in range(len(input_string)):\n        if input_string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index1.append(i)\n    \n    closing_bracket_index = []\n    for i in range(len(closing_bracket_index1)):\n        closing_bracket_index.append(closing_bracket_index1[len(closing_bracket_index1) - i - 1])\n    \n    count = 0\n    i = 0\n    length = len(closing_bracket_index)\n    \n    for k in range(len(opening_bracket_index)):\n        if i < length and opening_bracket_index[k] < closing_bracket_index[i]:\n            count += 1\n            i += 1\n    \n    return count >= 2\n```  ",
  "133": "def sum_squares(lst):\n    p = 0\n    for i in range(len(lst)):\n        y = lst[i]\n        if y % 1 != 0:\n            if y > 0:\n                y = y - y % 1 + 1\n            else:\n                y = -y\n                y = y - y % 1\n        p += y * y\n    return p",
  "134": "def check_if_last_char_is_a_letter(txt):\n    length = len(txt)\n    if length == 0:\n        return False\n    y = ord(txt[length - 1])\n    if length == 1:\n        if ((y >= 65 and y <= 90) or (y >= 97 and y <= 122)):\n            return True\n        return False\n    if txt[length - 2] == ' ' and ((y >= 65 and y <= 90) or (y >= 97 and y <= 122)):\n        return True\n    return False\n```",
  "135": "def can_arrange(arr):\n    if len(arr) == 0:\n        return -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1",
  "136": "def largest_smallest_integers(lst):\n    a = float('inf')\n    b = float('-inf')\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] < a:\n            a = lst[i]\n        if lst[i] < 0 and lst[i] > b:\n            b = lst[i]\n    if a == float('inf'):\n        a = None\n    if b == float('-inf'):\n        b = None\n    return (b, a)\n```",
  "137": "def compare_one(a, b):\n    aa = float(a)\n    if isinstance(a, str):\n        aa = float(a.replace(',', '.'))\n    bb = float(b)\n    if isinstance(b, str):\n        bb = float(b.replace(',', '.'))\n    if aa > bb:\n        return a\n    if aa < bb:\n        return b\n    return None",
  "138": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0",
  "139": "def special_factorial(n):\n    p = 1\n    t = 1\n    while n > 1:\n        y = p\n        while y > 0:\n            y -= 1\n            t *= n\n        p += 1\n        n -= 1\n    return t\n```",
  "140": "def fix_spaces(text):\n    t = ''\n    c = 0\n    for i in range(len(text)):\n        if text[i] == ' ':\n            c += 1\n        elif c > 0:\n            if c == 1:\n                t += '_'\n            if c == 2:\n                t += '__'\n            if c > 2:\n                t += '-'\n            t += text[i]\n            c = 0\n        else:\n            t += text[i]\n    if c == 1:\n        t += '_'\n    if c == 2:\n        t += '__'\n    if c > 2:\n        t += '-'\n    return t\n```  ",
  "141": "def file_name_check(file_name):\n    t = file_name.split('.')\n    if len(t) != 2:\n        return 'No'\n    if t[1] not in ['txt', 'dll', 'exe']:\n        return 'No'\n    if t[0] == '':\n        return 'No'\n    a = ord(t[0][0])\n    if not ((a >= 65 and a <= 90) or (a >= 97 and a <= 122)):\n        return 'No'\n    y = 0\n    for i in range(1, len(t[0])):\n        if ord(t[0][i]) >= 48 and ord(t[0][i]) <= 57:\n            y += 1\n        if y > 3:\n            return 'No'\n    return 'Yes'\n```",
  "142": "def sum_squares(lst):\n    y = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            y += lst[i] * lst[i]\n        elif i % 4 == 0:\n            y += lst[i] * lst[i] * lst[i]\n        else:\n            y += lst[i]\n    return y",
  "143": "def words_in_sentence(sentence):\n    t = sentence.split()\n    p = ''\n    for word in t:\n        len_word = len(word)\n        u = 1\n        if len_word == 1 or len_word == 0:\n            continue\n        for i in range(2, int(len_word ** 0.5) + 1):\n            if len_word % i == 0:\n                u = 0\n        if u == 0:\n            continue\n        if not p:\n            p += word\n        else:\n            p = p + ' ' + word\n    return p\n```  ",
  "144": "def simplify(x, n):\n    a = x.split('/')\n    b = n.split('/')\n    m = int(a[0]) * int(b[0])\n    r = int(a[1]) * int(b[1])\n    return m % r == 0\n```",
  "145": "def order_by_points(nums):\n    p = nums\n    for j in range(len(p) - 2, -1, -1):\n        for k in range(0, j+1):\n            m = 0\n            n = 0\n            h = p[k]\n            d = p[k + 1]\n            y = 1\n            u = 1\n            if h < 0:\n                y = -1\n                h = -h\n            if d < 0:\n                u = -1\n                d = -d\n            while h >= 10:\n                m += h % 10\n                h = (h - h % 10) // 10\n            m += y * h\n            while d >= 10:\n                n += d % 10\n                d = (d - d % 10) // 10\n            n += u * d\n            if m > n:\n                tmp = p[k]\n                p[k] = p[k + 1]\n                p[k + 1] = tmp\n    return p\n```",
  "146": "def special_filter(nums):\n    p = 0\n    for num in nums:\n        if num < 10:\n            continue\n        y = str(num)\n        if int(y[0]) % 2 == 1 and int(y[-1]) % 2 == 1:\n            p += 1\n    return p\n```",
  "147": "def get_max_triples(n):\n    y = []\n    for i in range(1, n+1):\n        y.append(i * i - i + 1)\n        \n    u = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (y[i] + y[j] + y[k]) % 3 == 0:\n                    u += 1\n                    \n    return u\n```",
  "148": "def bf(planet1, planet2):\n    y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    u = []\n    lo = -1\n    hi = -1\n    for i in range(8):\n        if y[i] == planet1:\n            lo = i\n    for i in range(8):\n        if y[i] == planet2:\n            hi = i\n    if lo == -1 or hi == -1 or lo == hi:\n        return []\n    if lo > hi:\n        tmp = lo\n        lo = hi\n        hi = tmp\n    for i in range(lo + 1, hi):\n        u.append(y[i])\n    return u\n```",
  "149": "def sorted_list_sum(lst):\n    p = []\n    for i in range(len(lst)):\n        if len(lst[i]) % 2 == 0:\n            p.append(lst[i])\n    for j in range(len(p)-2, -1, -1):\n        for k in range(j+1):\n            f = 0\n            if len(p[k]) > len(p[k + 1]): \n                f = 1\n            if len(p[k]) == len(p[k + 1]):\n                r = len(p[k])\n                for l in range(r):\n                    if ord(p[k][l]) > ord(p[k + 1][l]):\n                        f = 1\n                        break\n                    if ord(p[k][l]) < ord(p[k + 1][l]):\n                        break\n            if f == 1:\n                tmp = p[k]\n                p[k] = p[k + 1]\n                p[k + 1] = tmp\n    return p\n```",
  "150": "def x_or_y(n, x, y):\n    len_ = n\n    if len_ == 1 or len_ == 0:\n        return y\n    for i in range(2, int(len_ ** 0.5) + 1):\n        if len_ % i == 0:\n            return y\n    return x",
  "151": "def double_the_difference(lst):\n    p = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1 and lst[i] > 0:\n            p += lst[i] * lst[i]\n    return p",
  "152": "def compare(game, guess):\n    for i in range(len(guess)):\n        game[i] -= guess[i]\n        if game[i] < 0:\n            game[i] = -game[i]\n    \n    return game",
  "153": "def strongest_extension(class_name, extensions):\n    u = 0\n    s = float('-inf')\n    for i in range(len(extensions) - 1, -1, -1):\n        y = 0\n        for j in range(len(extensions[i])):\n            k = ord(extensions[i][j])\n            if k >= 65 and k <= 90:\n                y += 1\n            if k >= 97 and k <= 122:\n                y -= 1\n        if y >= s:\n            s = y\n            u = i\n    return class_name + '.' + extensions[u]\n```",
  "154": "def cyc_pattern_check(a, b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            y = 1\n            for k in range(l):\n                if a[i + k] != pat[j + k]:\n                    y = 0\n            if y == 1:\n                return True\n    return False\n```",
  "155": "def even_odd_count(num):\n    o = 0\n    e = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        num = (num - num % 10) // 10\n    return e, o",
  "156": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n    i = 12\n    res = ''\n    while number:\n        div = (number - number % num[i]) // num[i]\n        number = number % num[i]\n        while div:\n            res += sym[i]\n            div -= 1\n        i -= 1\n    return res\n```",
  "157": "def right_angle_triangle(a, b, c):\n    return a * a + b * b == c * c or a * a == b * b + c * c or b * b == a * a + c * c",
  "158": "def find_max(words):\n    s = -1\n    u = -1\n    if len(words) == 0:\n        return ''\n    for i in range(len(words)):\n        p = 0\n        for j in range(len(words[i])):\n            y = 1\n            for k in range(j):\n                if words[i][j] == words[i][k]:\n                    y = 0\n            if y == 1:\n                p += 1\n        if p > s or (p == s and words[i] < words[u]):\n            u = i\n            s = p\n    return words[u]\n\n```",
  "159": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [need + number, remaining - need]\n    return [remaining + number, 0]",
  "160": "def do_algebra(operator, operand):\n    while len(operator) > 0:\n        y = 0\n        for i in range(len(operator)-1, -1 , -1):\n            if operator[i] == '**':\n                u = operand[i]\n                while operand[i + 1] > 1:\n                    operand[i + 1] -= 1\n                    operand[i] *= u\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1:\n            continue\n        for i in range(len(operator)):\n            if operator[i] == '*':\n                operand[i] *= operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n            elif operator[i] == '//':\n                operand[i] = (operand[i] - operand[i] % operand[i + 1]) // operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1:\n            continue\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                operand[i] += operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n            elif operator[i] == '-':\n                operand[i] -= operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1:\n            continue\n    return operand[0]\n```",
  "161": "def solve(s):\n    t = 0\n    p = ''\n    for i in range(len(s)):\n        y = ord(s[i])\n        if y >= 65 and y <= 90:\n            y += 32\n            t = 1\n        elif y >= 97 and y <= 122:\n            y -= 32\n            t = 1\n        p += chr(y)\n        \n    if t == 1:\n        return p\n    \n    u = ''\n    for i in range(len(p)):\n        u += p[len(p) - i - 1]\n    \n    return u\n```  ",
  "162": "def string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n```",
  "163": "def generate_integers(a, b):\n    if a > b:\n        tmp = a\n        a = b\n        b = tmp\n    y = []\n    for i in range(a, b+1):\n        if i == 2 or i == 4 or i == 6 or i == 8:\n            y.append(i)\n    return y\n```"
}