{
  "0": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                distance = abs(numbers[i] - numbers[j])\n                if distance < threshold:\n                    return True\n    return False\n",
  "1": "def separate_paren_groups(paren_string):\n\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string = []\n    \n    return result\n",
  "2": "def truncate_number(number):\n\n    return number % 1.0;\n  ",
  "3": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
  "4": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(item - mean) for item in numbers]) / len(numbers)\n",
  "5": "def intersperse(numbers, delimiter):\n\n    if not isinstance(numbers, list) or len(numbers) == 0:\n        return []\n    result = []\n    for n in numbers:\n        result.extend([n, delimiter])\n    result.pop()\n    return result\n",
  "6": "def parse_nested_parens(paren_string):\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            else:\n                depth -= 1\n        return max_depth\n\n    return list(map(parse_paren_group, filter(None, paren_string.split(' ')))\n\n",
  "7": "def filter_by_substring(strings, substring):\n    return [x for x in strings if substring in x]\n",
  "8": "def sum_product(numbers: list, integer: int) -> list:\n    sum_value = 0\n    prod_value = 1\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return [sum_value, prod_value]\n",
  "9": "def rolling_max(numbers: List[int]) -> List[int]:\n    running_max, result = None, []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n    return result\n",
  "10": "def is_palindrome(string):\n    return string == string[::-1]\n\ndef make_palindrome(string):\n    if string == '':\n        return ''\n    \n    beginning_of_suffix = 0\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n        \n    return string + string[:beginning_of_suffix][::-1]\n",
  "11": "def string_xor(a, b):\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n    return ''.join(xor(i, j) for i, j in zip(a, b))\n",
  "12": "def longest(strings):\n\n    if not isinstance(strings, list) or len(strings) == 0:\n        return None\n    maxlen = max(map(len, strings))\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n    ",
  "13": "def greatest_common_divisor(a, b):\n\n    while b != 0:\n        temp = a\n        a = b\n        b = temp % b\n    return a\n\n  ",
  "14": "def all_prefixes(string):\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
  "15": "def string_sequence(n):\n\n    return ' '.join(map(str, list(range(n+1))))\n",
  "16": "def count_distinct_characters(string):\n    return len(set(string.lower()))\n",
  "17": "def parse_music(music_string):\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split() if x != '']\n",
  "18": "def how_many_times(string: str, substring: str):\n\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
  "19": "def sort_numbers(numbers):\n\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: value_map[x]))\n\n",
  "20": "def find_closest_elements(numbers):\n\n    closest_pair, distance = None, None\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i != j:\n                a, b = numbers[i], numbers[j]\n                if distance is None:\n                    distance = abs(a - b)\n                    closest_pair = [min(a, b), max(a, b)]\n                else:\n                    new_distance = abs(a - b)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = [min(a, b), max(a, b)]\n    return closest_pair\n",
  "21": "def rescale_to_unit(numbers):\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
  "22": "def filter_integers(values):\n    return list(filter(lambda x: isinstance(x, int), values))\n",
  "23": "def str_len(string):\n    return len(string)\n",
  "24": "def largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
  "25": "def factorize(n: int) -> list:\n\n    fact = []\n    i = 2\n    while i <= int(n ** 0.5) + 1:\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n  ",
  "26": "def remove_duplicates(numbers):\n\n    freq_dict = {}\n    for num in numbers:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return [x for x in numbers if freq_dict[x] <= 1]\n",
  "27": "def flip_case(string):\n\n    return ''.join([x.lower() if x.isupper() else x.upper() for x in string])\n\n",
  "28": "def concatenate(strings):\n    return ''.join(strings)\n",
  "29": "def filter_by_prefix(strings, prefix):\n    return list(filter(lambda x: x.startswith(prefix), strings))\n",
  "30": "def get_positive(l: List[int]) -> List[int]:\n\n    return [e for e in l if e > 0]\n\n",
  "31": "def is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n-1):\n        if n % k == 0:\n            return False\n    return True\n",
  "32": "def poly(xs, x):\n    return sum(item * x ** index for index, item in enumerate(xs))\n\n\ndef find_zero(xs):\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n",
  "33": "def sort_third(l):\n    three = [item for index, item in enumerate(l) if index % 3 == 0]\n    three.sort()\n    return [three[index // 3] if index % 3 == 0 else item for index, item in enumerate(l)]\n",
  "34": "def unique(l: List[int]) -> List[int]:\n    \n    return sorted(list(set(l)))\n\n",
  "35": "def max_element(l):\n\n    return max(l)\n",
  "36": "def fizz_buzz(n):\n    ns = []\n    ans = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(map(str, ns))\n    for c in s:\n        ans += c == '7'\n    return ans\n  ",
  "37": "def sort_even(l):\n    even = [item for index, item in enumerate(l) if index % 2 == 0]\n    even.sort()\n    return [even[index // 2] if index % 2 == 0 else item for index, item in enumerate(l)]\n",
  "38": "def encode_cyclic(s):\n    groups = []\n    groups2 = []\n    for i in range(0, (len(s) + 2) // 3):\n        groups.append(s[3 * i:min((3 * i + 3), len(s))])\n\n    for group in groups:\n        if len(group) == 3:\n            groups2.append(group[1:] + group[0])\n        else:\n            groups2.append(group)\n\n    return ''.join(groups2)\n\ndef decode_cyclic(s):\n    return encode_cyclic(encode_cyclic(s))",
  "39": "def prime_fib(n):\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(p**0.5) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n",
  "40": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n",
  "41": "def car_race_collision(n):\n    return n ** 2\n",
  "42": "def incr_list(l):\n    return [e + 1 for e in l]\n",
  "43": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
  "44": "def change_base(x, base):\n\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n\n",
  "45": "def triangle_area(a, h):\n\n    return a * h / 2.0\n\n",
  "46": "def fib4(n):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    \n    for i in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n    \n    return results.pop()\n  ",
  "47": "def median(l):\n    l.sort()\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2 - 1] + l[length // 2]) / 2.0\n\n",
  "48": "def is_palindrome(text):\n    \"\"\" Test if given string is a palindrome \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[-i-1]:\n            return False\n    return True\n",
  "49": "def modp(n, p):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
  "50": "def encode_shift(s):\n\n    def shift_char(ch):\n        return chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a'))\n    \n    return ''.join([shift_char(ch) for ch in s])\n\ndef decode_shift(s):\n\n    def shift_char(ch):\n        return chr(((ord(ch) - 5 + 26 - ord('a')) % 26) + ord('a'))\n\n    return ''.join([shift_char(ch) for ch in s])\n",
  "51": "def remove_vowels(text):\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char.lower() not in vowels])\n\n",
  "52": "def below_threshold(l, t):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n",
  "53": "def add(x, y):\n    return x + y\n",
  "54": "def same_chars(s0: str, s1: str):\n\n    return sorted(list(set(s0))) == sorted(list(set(s1)))\n\n",
  "55": "def fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
  "56": "def correct_bracketing(brackets):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
  "57": "def monotonic(lst):\n    sort1 = sorted(lst)\n    sort2 = sorted(lst, reverse=True)\n    if lst == sort1 or lst == sort2:\n        return True\n    return False\n      ",
  "58": "def common(l1, l2):\n\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
  "59": "def largest_prime_factor(n: int) -> int:\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    largest = 1\n    for j in range(2, n+1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
  "60": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n",
  "61": "def correct_bracketing(brackets: str) -> bool:\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
  "62": "def derivative(xs):\n    return [x * i for i, x in enumerate(xs)][1:]\n",
  "63": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
  "64": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum([1 for char in s if char in vowels])\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n  ",
  "65": "def circular_shift(x, shift):\n\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n",
  "66": "def digit_sum(s: str) -> int:\n    if s == '':\n        return 0\n    return sum(ord(char) for char in s if ord(char) > 64 and ord(char) < 91)\n",
  "67": "def fruit_distribution(s, n):\n\n    lis = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(lis)\n",
  "68": "def pluck(arr):\n\n    if len(arr) == 0:\n        return []\n    \n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    \n    if len(evens) == 0:\n        return []\n    \n    return [min(evens), arr.index(min(evens))]\n",
  "69": "def search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    return ans\n",
  "70": "def strange_sort_list(lst):\n\n    res = []\n    sw = True\n    while lst:\n        res.append(min(lst) if sw else max(lst))\n        del lst[lst.index(res[-1])]\n        sw = not sw\n    return res",
  "71": "def triangle_area(a: float, b: float, c: float):\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
  "72": "def will_it_fly(q, w):\n\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n",
  "73": "def smallest_change(arr):\n\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            ans += 1\n    return ans",
  "74": "def total_match(lst1, lst2):\n\n    l1 = sum([len(item) for item in lst1])\n    l2 = sum([len(item) for item in lst2])\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n      ",
  "75": "def is_multiply_prime(a):\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if not is_prime(i):\n            continue\n        for j in range(2, 101):\n            if not is_prime(j):\n                continue\n            for k in range(2, 101):\n                if not is_prime(k):\n                    continue\n                if i * j * k == a:\n                    return True\n    return False\n",
  "76": "def is_simple_power(x, n):\n\n    if n == 1:\n        return x == 1\n\n    power = 1\n    while power < x:\n        power *= n\n\n    return power == x\n",
  "77": "def iscube(a):\n\n    a = abs(a)\n    return pow(round(pow(a, 1.0 / 3.0)), 3) == a\n",
  "78": "def hex_key(num):\n\n    primes = \"2357BD\"\n    total = 0\n    for i in range(len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
  "79": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
  "80": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n",
  "81": "def numerical_letter_grade(grades):\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append('A+')\n        elif gpa > 3.7:\n            letter_grade.append('A')\n        elif gpa > 3.3:\n            letter_grade.append('A-')\n        elif gpa > 3.0:\n            letter_grade.append('B+')\n        elif gpa > 2.7:\n            letter_grade.append('B')\n        elif gpa > 2.3:\n            letter_grade.append('B-')\n        elif gpa > 2.0:\n            letter_grade.append('C+')\n        elif gpa > 1.7:\n            letter_grade.append('C')\n        elif gpa > 1.3:\n            letter_grade.append('C-')\n        elif gpa > 1.0:\n            letter_grade.append('D+')\n        elif gpa > 0.7:\n            letter_grade.append('D')\n        elif gpa > 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n",
  "82": "def prime_length(string):\n\n    length = len(string)\n    if length == 1 or length == 0:\n        return False\n    for i in range(2, int(length**(0.5)) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
  "83": "def starts_one_ends(n):\n\n    if n == 1: \n        return 1\n    t = 18\n    for i in range(2, n):\n        t = t * 10\n    return t\n\n  ",
  "84": "def solve(N):\n\n    t = 0\n    while N > 0:\n      t += N % 10\n      N = (N - N % 10) // 10\n    return bin(t)[2:]\n\n",
  "85": "def add(lst):\n\n    t = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            t += lst[i]\n    return t\n",
  "86": "def anti_shuffle(s):\n    arr = s.split()\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            ind = j\n            for k in range(j + 1, len(arr[i])):\n                if ord(arr[i][k]) < ord(arr[i][ind]):\n                    ind = k\n            if ind > j:\n                arr[i] = arr[i][:j] + arr[i][ind] + arr[i][j+1:ind] + arr[i][j] + arr[i][ind+1:]\n    t = ''\n    for i in range(len(arr)):\n        if i > 0:\n            t += ' '\n        t += arr[i]\n    return t\n",
  "87": "def get_row(lst, x):\n\n    t = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i]) - 1, -1, -1):\n            if lst[i][j] == x:\n                t.append((i, j))\n    return t\n",
  "88": "def sort_array(array):\n\n    arr = array\n    tot = arr[0] + arr[-1]\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if ((tot % 2 == 1 and arr[k] < arr[ind]) or (tot % 2 == 0 and arr[k] > arr[ind])):\n                ind = k\n        arr[j], arr[ind] = arr[ind], arr[j]\n    return arr\n\n",
  "89": "def encrypt(s):\n    t = ''\n    for i in range(len(s)):\n        p = ord(s[i]) + 4\n        if p > 122:\n            p -= 26\n        t += chr(p)\n    return t\n",
  "90": "def next_smallest(lst):\n\n    arr = lst\n    for j in range(len(arr)):\n        ind = j\n        for k in range(j + 1, len(arr)):\n            if arr[k] < arr[ind]:\n                ind = k\n        tmp = arr[j]\n        arr[j] = arr[ind]\n        arr[ind] = tmp\n\n    smallest = arr[0]\n    pt = 1\n    while pt < len(arr):\n        if arr[pt] > smallest:\n            return arr[pt]\n        pt += 1\n    return None\n",
  "91": "def is_bored(S):\n    t = 0\n    if S[0] == 'I' and S[1] == ' ':\n        t = 1\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '!' or S[i] == '?':\n            if S[i + 1] == ' ' and S[i + 2] == 'I' and S[i + 3] == ' ':\n                t += 1\n    return t\n",
  "92": "def any_int(x, y, z):\n    if x.is_integer() and y.is_integer() and z.is_integer() and (x + y == z or x + z == y or x == y + z):\n        return True\n    return False\n\n",
  "93": "def encode(message):\n    t = ''\n    for i in range(len(message)):\n        p = ord(message[i])\n        if p > 96:\n            p -= 32\n        elif p != 32 and p < 96:\n            p += 32\n        if p == 65 or p == 97 or p == 69 or p == 101 or p == 73 or p == 105 or p == 79 or p == 111 or p == 85 or p == 117:\n            p += 2\n        t += chr(p)\n    return t\n",
  "94": "def skjkasdkd(lst: List[int]) -> int:\n\n    t = 0\n    for i in range(len(lst)):\n        p = 1\n        for j in range(2, int(lst[i] ** 0.5) + 1):\n            if lst[i] % j == 0:\n                p = 0\n                break\n        if p == 1 and lst[i] > t:\n            t = lst[i]\n\n    k = 0\n    while t != 0:\n        k += t % 10\n        t = (t - t % 10) // 10\n  \n    return k\n\n",
  "95": "def check_dict_case(dict_input):\n    c = 0\n    lo = 1\n    hi = 1\n    for key in dict_input:\n        c += 1\n        for char in key:\n            if not (65 <= ord(char) <= 90): \n                hi = 0\n            if not (97 <= ord(char) <= 122):\n                lo = 0\n    if (lo == 0 and hi == 0) or c == 0:\n        return False\n    return True\n",
  "96": "def count_up_to(n):\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
  "97": "def multiply(a, b):\n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\n",
  "98": "def count_upper(s: str) -> int:\n\n    p = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            p += 1\n    return p\n",
  "99": "def closest_integer(value):\n\n    value = int(float(value))\n    t = value % 1\n    if -0.5 < t < 0.5: \n        value -= t\n    else:\n        value += t\n    return value\n",
  "100": "def make_a_pile(n):\n\n    t = []\n    for i in range(n, n * 3, 2):\n        t.append(i)\n    return t\n",
  "101": "def words_string(s):\n\n    t = ''\n    p = []\n    k = 0\n    for i in range(len(s)):\n        if s[i] == ' ' or s[i] == ',':\n            if k == 0:\n                k = 1\n                p.append(t)\n                t = ''\n        else:\n            k = 0\n            t += s[i]\n    if t != '':\n        p.append(t)\n    return p\n",
  "102": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n",
  "103": "def rounded_avg(n, m):\n\n    if n > m:\n        return -1\n    k = (n + m) / 2\n    if k % 1 != 0:\n        k = (n + m + 1) / 2\n    return '0b' + bin(int(k))[2:]\n",
  "104": "def unique_digits(x):\n\n    p = []\n    for i in x:\n        h = i\n        boo = 1\n        while h > 0:\n            r = h % 10\n            if r % 2 == 0:\n                boo = 0\n                break\n            h = (h - r) // 10\n        if boo:\n            p.append(i)\n\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] < p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n\n    return p\n",
  "105": "def by_length(arr):\n    p = []\n    for i in range(len(arr)):\n        if 0 < arr[i] < 10:\n            p.append(arr[i])\n    \n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] > p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n\n    l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    t = []\n    for j in range(len(p)):\n        t.append(l[p[j]-1])\n    \n    return t\n",
  "106": "def f(n):\n\n    f = 1\n    p = 0\n    k = []\n    for i in range(1, n+1):\n        p += i;\n        f *= i;\n        if i % 2 == 0:\n            k.append(f)\n        else:\n            k.append(p)\n    return k\n\n",
  "107": "def even_odd_palindrome(n):\n    e = 0\n    o = 0\n    for i in range(1, n + 1):\n        k = str(i)\n        p = 1\n        for j in range(len(k)):\n            if k[j] != k[len(k) - j - 1]:\n                p = 0\n                break\n        if p == 1:\n            if int(k) % 2 == 0:\n                e += 1\n            else:\n                o += 1\n    return e, o\n",
  "108": "def count_nums(arr):\n\n    p = 0\n    for i in range(len(arr)):\n        h = arr[i]\n        if h > 0:\n            p += 1\n            continue\n        k = 0\n        h = abs(h)\n        while h >= 10:\n            k += h % 10\n            h = (h - h % 10) // 10\n        k -= h\n        if k > 0:\n            p += 1\n    return p\n\n",
  "109": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    k = 0\n    length = len(arr)\n    for i in range(length):\n        t = 1\n        for j in range(1, length):\n            if arr[j] < arr[j - 1]:\n                t = 0\n                break\n        if t == 1:\n            k = 1\n            break\n        arr.append(arr[0])\n        arr.pop(0)\n    if k == 1:\n        return True\n    return False\n",
  "110": "def exchange(lst1, lst2):\n\n    k = len(lst1)\n    t = sum(1 for num in lst1 if num % 2 == 0)\n    t += sum(1 for num in lst2 if num % 2 == 0)\n\n    return 'YES' if t >= k else 'NO'\n\n",
  "111": "def histogram(test):\n\n    d = {}\n    t = test.split()\n    if test == '':\n        t = []\n    for m in t:\n        if m in d:\n            d[m] += 1\n        else:\n            d[m] = 1\n    s = sorted(d, key=lambda x: (-d[x], x))\n    if len(s) == 0:\n        return {}\n    g = d[s[0]]\n    l = {key: value for key, value in d.items() if value == g}\n    return l\n\n",
  "112": "def reverse_delete(s, c):\n    t = ''\n    for i in range(len(s)):\n        y = 1\n        for j in range(len(c)):\n            if s[i] == c[j]:\n                y = 0\n        if y == 1:\n            t += s[i]\n    z = 1\n    for i in range(len(t)):\n        if t[i] != t[len(t) - i - 1]:\n            z = 0\n    if z == 0:\n        return z, False\n    return z, True\n",
  "113": "def odd_count(lst):\n\n    d = []\n    for item in lst:\n        p = 0\n        h = len(item)\n        for char in item:\n            if ord(char) % 2 == 1:\n                p += 1\n        p = str(p)\n        d.append('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    return d\n",
  "114": "def min_sub_array_sum(nums):\n\n    min_sum = nums[0]\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums) + 1):\n            s = 0\n            for k in range(i, j):\n                s += nums[k]\n            if s < min_sum:\n                min_sum = s\n    return min_sum\n\n",
  "115": "def max_fill(grid, capacity):\n\n    p = 0\n    for row in grid:\n        m = sum(1 for val in row if val == 1)\n        while m > 0:\n            m -= capacity\n            p += 1\n    return p\n",
  "116": "def sort_array(arr):\n\n    p = arr\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            w1 = bin(p[ind])\n            f1 = sum([1 for bit in w1[2:] if bit == '1'])\n            w2 = bin(p[k])\n            f2 = sum([1 for bit in w2[2:] if bit == '1'])\n            if f2 < f1 or (f1 == f2 and p[k] < p[ind]):\n                ind = k\n        if ind > j:\n            p[j], p[ind] = p[ind], p[j]\n    return p\n  ",
  "117": "def select_words(s, n):\n    t = s.split()\n    if s == '':\n        return []\n    k = []\n    for word in t:\n        count = 0\n        for letter in word:\n            if letter not in 'aeiouAEIOU':\n                count += 1\n        if count == n:\n            k.append(word)\n    return k\n",
  "118": "def get_closest_vowel(word):\n    for i in range(len(word)-2, 0, -1):\n        if (\n            not(word[i] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) and\n            (word[i+1] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']) and\n            (word[i-1] not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n        ):\n            return word[i]\n    return ''\n  ",
  "119": "def match_parens(lst):\n    w1 = lst[0] + lst[1]\n    y = 0\n    u = 1\n    for i in range(len(w1)):\n        if w1[i] == '(':\n            y += 1\n        else:\n            y -= 1\n        if y < 0:\n            u = 0\n            break\n    if u == 1 and y == 0:\n        return 'Yes'\n    \n    w1 = lst[1] + lst[0]\n    y = 0\n    u = 1\n    for i in range(len(w1)):\n        if w1[i] == '(':\n            y += 1\n        else:\n            y -= 1\n        if y < 0:\n            u = 0\n            break\n    if u == 1 and y == 0:\n        return 'Yes'\n    \n    return 'No'\n",
  "120": "def maximum(arr, k):\n\n    p = arr\n    for j in range(len(p)):\n        ind = j\n        for m in range(j + 1, len(p)):\n            if p[m] < p[ind]:\n                ind = m\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    if k == 0:\n        return []\n    return p[-k]",
  "121": "def solution(lst):\n\n    p = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 1:\n            p += lst[i]\n    return p\n",
  "122": "def add_elements(arr, k):\n    p = 0\n    for i in range(k):\n        if -100 < arr[i] < 100:\n            p += arr[i]\n    return p\n",
  "123": "def get_odd_collatz(n):\n    p = []\n    t = n\n    while True:\n        u = 0\n        for i in range(len(p)):\n            if t == p[i]:\n                u = 1\n                break\n        if u == 1:\n            break\n        if t % 2 == 1:\n            p.append(t)\n            t = 3 * t + 1\n        else:\n            t = t / 2\n    for j in range(len(p)):\n        ind = j\n        for k in range(j + 1, len(p)):\n            if p[k] < p[ind]:\n                ind = k\n        if ind > j:\n            tmp = p[j]\n            p[j] = p[ind]\n            p[ind] = tmp\n    return p\n  ",
  "124": "def valid_date(date):\n    t = date.split('-')\n    if len(t) != 3:\n        return False\n    if int(t[0]) < 1 or int(t[0]) > 12 or int(t[1]) < 1:\n        return False\n    if int(t[0]) == 2 and int(t[1]) > 29:\n        return False\n    if int(t[0]) in [1, 3, 5, 7, 8, 10, 12] and int(t[1]) > 31:\n        return False\n    if int(t[0]) in [4, 6, 9, 11] and int(t[1]) > 30:\n        return False\n    return True\n",
  "125": "def split_words(txt):\n    t = txt.split()\n    if len(t) > 1:\n        return t\n    else:\n        t = txt.split(',')\n        if len(t) > 1:\n            return t\n        else:\n            p = 0\n            for i in range(len(txt)):\n                m = ord(txt[i])\n                if m >= 97 and m <= 122 and m % 2 == 0:\n                    p += 1\n            return p\n",
  "126": "def is_sorted(lst):\n\n    if len(lst) == 0:\n        return True\n    dup = 1\n    pre = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < pre:\n            return False\n        if lst[i] == pre:\n            dup += 1\n            if dup == 3:\n                return False\n        else:\n            pre = lst[i]\n            dup = 1\n\n    return True\n",
  "127": "def intersection(interval1, interval2):\n\n    lo = interval1[0]\n    if interval2[0] > lo:\n        lo = interval2[0]\n    hi = interval1[1]\n    if interval2[1] < hi:\n        hi = interval2[1]\n    length = 0\n    if hi > lo:\n        length = hi - lo\n    if length == 1 or length == 0:\n        return 'NO'\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return 'NO'\n    return 'YES'\n\n",
  "128": "def prod_signs(arr: List[int]) -> int:\n\n    if len(arr) == 0:\n        return None\n    \n    n = 1\n    s = 0\n    \n    for i in range(len(arr)):\n        s += arr[i]\n        if arr[i] == 0:\n            return 0\n        if arr[i] < 0:\n            n = -n\n            s -= 2 * arr[i]\n    \n    return s * n\n\n",
  "129": "def min_path(grid, k):\n    m = 0\n    n = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                m = i\n                n = j\n                break\n    minimum = len(grid) * len(grid)\n    if m > 0 and grid[m - 1][n] < minimum: minimum = grid[m - 1][n]\n    if n > 0 and grid[m][n - 1] < minimum: minimum = grid[m][n - 1]\n    if m < len(grid) - 1 and grid[m + 1][n] < minimum: minimum = grid[m + 1][n]\n    if n < len(grid[0]) - 1 and grid[m][n + 1] < minimum: minimum = grid[m][n + 1]\n    path = []\n    for i in range(k):\n        if i % 2 == 0:\n            path.append(1)\n        else:\n            path.append(minimum)\n    return path\n",
  "130": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    p = [1, 3]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            p.append(1 + i / 2)\n        else:\n            p.append(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    return p\n",
  "131": "def digits(n: int):\n\n    p = 1\n    k = 1\n    while n > 0:\n        y = n % 10\n        if y % 2 == 1:\n            p *= y\n            k = 0\n        n = (n - n % 10) // 10\n    if k == 0:\n        return p\n    return 0",
  "132": "def is_nested(string):\n\n    opening_bracket_index = []\n    closing_bracket_index1 = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index1.append(i)\n    \n    closing_bracket_index = []\n    for i in range(len(closing_bracket_index1)):\n        closing_bracket_index.append(closing_bracket_index1[len(closing_bracket_index1) - i - 1])\n    \n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for k in range(len(opening_bracket_index)):\n        if i < l and opening_bracket_index[k] < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    \n    return cnt >= 2\n",
  "133": "def sum_squares(lst):\n    p = 0\n    for i in range(len(lst)):\n        y = lst[i]\n        if y % 1 != 0:\n            if y > 0:\n                y = y - y % 1 + 1\n            else:\n                y = -y\n                y = y - y % 1\n        p += y * y\n    return p\n",
  "134": "def check_if_last_char_is_a_letter(txt):\n\n    if len(txt) == 0:\n        return False\n    y = ord(txt[-1])\n    if len(txt) == 1:\n        if (y >= 65 and y <= 90) or (y >= 97 and y <= 122):\n            return True\n        return False\n    if txt[-2] == ' ' and ((y >= 65 and y <= 90) or (y >= 97 and y <= 122)):\n        return True\n    return False\n",
  "135": "def can_arrange(arr):\n\n    if len(arr) == 0:\n        return -1\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n",
  "136": "def largest_smallest_integers(lst):\n\n    a = float('inf')\n    b = float('-inf')\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] < a:\n            a = lst[i]\n        if lst[i] < 0 and lst[i] > b:\n            b = lst[i]\n    \n    if a == float('inf'):\n        a = None\n    if b == float('-inf'):\n        b = None\n    \n    return b, a\n",
  "137": "def compare_one(a, b):\n\n    aa = float(a) if isinstance(a, str) else a\n    aa = float(a.replace(',', '.')) if isinstance(a, str) else aa\n    bb = float(b) if isinstance(b, str) else b\n    bb = float(b.replace(',', '.')) if isinstance(b, str) else bb\n\n    if aa > bb:\n        return a\n    if aa < bb:\n        return b\n\n    return None\n",
  "138": "def is_equal_to_sum_even(n):\n    return (n >= 8 and n % 2 == 0)\n",
  "139": "def special_factorial(n: int):\n\n    p = 1\n    t = 1\n    while n > 1:\n        y = p\n        while y > 0:\n            y -= 1\n            t *= n\n        p += 1\n        n -= 1\n    return t\n",
  "140": "def fix_spaces(text):\n    t = ''\n    c = 0\n    for i in range(len(text)):\n        if text[i] == ' ':\n            c += 1\n        elif c > 0:\n            if c == 1:\n                t += '_'\n            if c == 2:\n                t += '__'\n            if c > 2:\n                t += '-'\n            t += text[i]\n            c = 0\n        else:\n            t += text[i]\n    if c == 1:\n        t += '_'\n    if c == 2:\n        t += '__'\n    if c > 2:\n        t += '-'\n    return t\n  ",
  "141": "def file_name_check(file_name):\n\n    t = file_name.split('.')\n    if len(t) != 2:\n        return 'No'\n    if t[1] not in ['txt', 'dll', 'exe']:\n        return 'No'\n    if t[0] == '':\n        return 'No'\n    a = ord(t[0][0])\n    if not ((a >= 65 and a <= 90) or (a >= 97 and a <= 122)):\n        return 'No'\n    y = 0\n    for i in range(1, len(t[0])):\n        if ord(t[0][i]) >= 48 and ord(t[0][i]) <= 57:\n            y += 1\n        if y > 3:\n            return 'No'\n    return 'Yes'\n  ",
  "142": "def sum_squares(lst):\n\n    y = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            y += lst[i] * lst[i]\n        elif i % 4 == 0:\n            y += lst[i] * lst[i] * lst[i]\n        else:\n            y += lst[i]\n    return y\n",
  "143": "def words_in_sentence(sentence):\n\n    t = sentence.split(' ')\n    p = ''\n    for j in range(len(t)):\n        len_word = len(t[j])\n        prime_flag = 1\n        if len_word == 1 or len_word == 0:\n            continue\n        for i in range(2, int(len_word ** 0.5) + 1):\n            if len_word % i == 0:\n                prime_flag = 0\n        if prime_flag == 0:\n            continue\n        if p == '':\n            p += t[j]\n        else:\n            p = p + ' ' + t[j]\n    return p\n\n",
  "144": "def simplify(x, n):\n\n    a = x.split('/')\n    b = n.split('/')\n    m = int(a[0]) * int(b[0])\n    r = int(a[1]) * int(b[1])\n    return m % r == 0\n",
  "145": "def order_by_points(nums):\n    p = nums\n    for j in range(len(p) - 2, -1, -1):\n        for k in range(j + 1):\n            m, n = 0, 0\n            h, d = p[k], p[k + 1]\n            y, u = 1, 1\n            if h < 0:\n                y = -1\n                h = -h\n            if d < 0:\n                u = -1\n                d = -d\n            while h >= 10:\n                m += h % 10\n                h = (h - h % 10) // 10\n            m += y * h\n            while d >= 10:\n                n += d % 10\n                d = (d - d % 10) // 10\n            n += u * d\n            if m > n:\n                p[k], p[k+1] = p[k+1], p[k]\n    return p\n  ",
  "146": "def special_filter(nums):\n    p = 0\n    for num in nums:\n        if num < 10:\n            continue\n        str_num = str(num)\n        if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:\n            p += 1\n    return p\n",
  "147": "def get_max_triples(n):\n\n    y = []\n    for i in range(1, n+1):\n        y.append(i * i - i + 1)\n    \n    u = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (y[i] + y[j] + y[k]) % 3 == 0:\n                    u += 1\n    \n    return u\n",
  "148": "def bf(planet1, planet2):\n    y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    u = []\n    lo = -1\n    hi = -1\n    for i in range(8):\n        if y[i] == planet1:\n            lo = i\n        if y[i] == planet2:\n            hi = i\n    if lo == -1 or hi == -1 or lo == hi:\n        return []\n    if lo > hi:\n        tmp = lo\n        lo = hi\n        hi = tmp\n    for i in range(lo + 1, hi):\n        u.append(y[i])\n    return u\n  ",
  "149": "def sorted_list_sum(lst):\n    p = []\n    for i in range(len(lst)):\n        if len(lst[i]) % 2 == 0:\n            p.append(lst[i])\n\n    for j in range(len(p) - 2, -1, -1):\n        for k in range(j + 1):\n            f = 0\n            if len(p[k]) > len(p[k + 1]):\n                f = 1\n            if len(p[k]) == len(p[k + 1]):\n                r = len(p[k])\n                for l in range(r):\n                    if ord(p[k][l]) > ord(p[k + 1][l]):\n                        f = 1\n                        break\n                    if ord(p[k][l]) < ord(p[k + 1][l]):\n                        break\n            if f == 1:\n                tmp = p[k]\n                p[k] = p[k + 1]\n                p[k + 1] = tmp\n\n    return p\n",
  "150": "def x_or_y(n, x, y):\n\n    if n == 1 or n == 0:\n        return y\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return y\n    return x\n",
  "151": "def double_the_difference(lst):\n    p = 0\n    for num in lst:\n        if num % 2 == 1 and num > 0:\n            p += num * num\n    return p\n",
  "152": "def compare(game, guess):\n    for i in range(len(guess)):\n        game[i] -= guess[i]\n        if game[i] < 0:\n            game[i] = -game[i]\n    return game\n",
  "153": "def strongest_extension(class_name, extensions):\n    u = 0\n    s = float('-inf')\n    for i in range(len(extensions)-1, -1, -1):\n        y = 0\n        for j in range(len(extensions[i])):\n            k = ord(extensions[i][j])\n            if k >= 65 and k <= 90:\n                y += 1\n            if k >= 97 and k <= 122:\n                y -= 1\n        if y >= s:\n            s = y\n            u = i\n    return class_name + '.' + extensions[u]\n",
  "154": "def cycpattern_check(a, b):\n\n    length_b = len(b)\n    pattern = b + b\n    for i in range(len(a) - length_b + 1):\n        for j in range(length_b + 1):\n            match = 1\n            for k in range(length_b):\n                if a[i + k] != pattern[j + k]:\n                    match = 0\n            if match == 1:\n                return True\n    return False\n\n",
  "155": "def even_odd_count(num: int):\n    o = 0\n    e = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            e += 1\n        else:\n            o += 1\n        num = (num - num % 10) // 10\n    return (e, o)",
  "156": "def int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n    i = 12\n    res = ''\n    while number:\n        div = (number - number % num[i]) // num[i]\n        number = number % num[i]\n        while div:\n            res += sym[i]\n            div -= 1\n        i -= 1\n    return res\n",
  "157": "def right_angle_triangle(a: int, b: int, c: int):\n\n    return (a * a + b * b == c * c) or (a * a == b * b + c * c) or (b * b == a * a + c * c)\n",
  "158": "def find_max(words):\n\n    s = -1\n    u = -1\n    if len(words) == 0:\n        return ''\n    for i in range(len(words)):\n        p = 0\n        for j in range(len(words[i])):\n            y = 1\n            for k in range(j):\n                if words[i][j] == words[i][k]:\n                    y = 0\n            if y == 1:\n                p += 1\n        if p > s or (p == s and words[i] < words[u]):\n            u = i\n            s = p\n    return words[u]\n  ",
  "159": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [need + number, remaining - need]\n    return [remaining + number, 0]\n",
  "160": "def do_algebra(operator, operand):\n    while len(operator) > 0:\n        y = 0\n        for i in range(len(operator) - 1, -1, -1):\n            if operator[i] == '**':\n                u = operand[i]\n                while operand[i + 1] > 1:\n                    operand[i + 1] -= 1\n                    operand[i] *= u\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1:\n            continue\n        for i in range(len(operator)):\n            if operator[i] == '*':\n                operand[i] *= operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n            elif operator[i] == '//':\n                operand[i] = (operand[i] - operand[i] % operand[i + 1]) // operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1: continue\n        for i in range(len(operator)):\n            if operator[i] == '+':\n                operand[i] += operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n            elif operator[i] == '-':\n                operand[i] -= operand[i + 1]\n                operand.pop(i + 1)\n                operator.pop(i)\n                y = 1\n                break\n        if y == 1: continue\n\n    return operand[0]\n",
  "161": "def solve(s: str) -> str:\n    t = 0\n    p = ''\n    for i in range(len(s)):\n        y = ord(s[i])\n        if 65 <= y <= 90:\n            y += 32\n            t = 1\n        elif 97 <= y <= 122:\n            y -= 32\n            t = 1\n        p += chr(y)\n    if t == 1:\n        return p\n    u = ''\n    for i in range(len(p)):\n        u += p[len(p) - i - 1]\n    return u\n",
  "162": "def string_to_md5(text):\n\n    if text == '':\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n",
  "163": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    \n    y = []\n    for i in range(a, b+1):\n        if i in [2, 4, 6, 8]:\n            y.append(i)\n\n    return y\n"
}