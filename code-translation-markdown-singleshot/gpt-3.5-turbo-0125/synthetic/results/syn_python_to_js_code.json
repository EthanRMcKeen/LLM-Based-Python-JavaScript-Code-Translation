{
  "0": "const hasCloseElements = (numbers, threshold) => {\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = 0; j < numbers.length; j++) {\n            if (i !== j) {\n                let distance = Math.abs(numbers[i] - numbers[j]);\n                if (distance < threshold) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
  "1": "const separateParenGroups = (parenString) => {\n\n    const result = [];\n    let currentString = [];\n    let currentDepth = 0;\n\n    for (let i = 0; i < parenString.length; i++) {\n        const c = parenString[i];\n        if (c === '(') {\n            currentDepth += 1;\n            currentString.push(c);\n        } else if (c === ')') {\n            currentDepth -= 1;\n            currentString.push(c);\n\n            if (currentDepth === 0) {\n                result.push(currentString.join(''));\n                currentString = [];\n            }\n        }\n    }\n\n    return result;\n}\n\n",
  "2": "const truncateNumber = (number) => {\n    return number % 1.0;\n}\n",
  "3": "const belowZero = (operations) => {\n  let balance = 0;\n\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  \n  return false;\n}\n",
  "4": "const meanAbsoluteDeviation = (numbers) => {\n    const mean = numbers.reduce((acc, curr) => acc + curr, 0) / numbers.length;\n    return numbers.reduce((acc, curr) => acc + Math.abs(curr - mean), 0) / numbers.length;\n}",
  "5": "const intersperse = (numbers, delimiter) => {\n    if (numbers.length === 0) {\n        return [];\n    }\n\n    const result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        result.push(numbers[i]);\n        result.push(delimiter);\n    }\n\n    result.push(numbers[numbers.length - 1]);\n\n    return result;\n}\n",
  "6": "const parseNestedParens = (parenString) => {\n\n  const parseParenGroup = (s) => {\n    let depth = 0;\n    let maxDepth = 0;\n    for (let c of s) {\n      if (c === '(') {\n        depth++;\n        maxDepth = Math.max(depth, maxDepth);\n      } else {\n        depth--;\n      }\n    }\n    return maxDepth;\n  }\n\n  return parenString.split(' ')\n    .filter(x => x)\n    .map(x => parseParenGroup(x));\n}\n\nassert(JSON.stringify(parseNestedParens(\"\")) === JSON.stringify([]));\nassert(JSON.stringify(parseNestedParens(\"()\")) === JSON.stringify([1]));\nassert(JSON.stringify(parseNestedParens(\"(()) ()\")) === JSON.stringify([2, 1]));\nassert(JSON.stringify(parseNestedParens(\"() () ()\")) === JSON.stringify([1, 1, 1]);\n\n",
  "7": "const filterBySubstring = (strings, substring) => {\n    return strings.filter(x => x.includes(substring));\n}\n",
  "8": "function sumProduct(numbers) {\n  let sumValue = 0;\n  let prodValue = 1;\n\n  numbers.forEach(n => {\n    sumValue += n;\n    prodValue *= n;\n  });\n  \n  return [sumValue, prodValue];\n}\n",
  "9": "const rollingMax = (numbers) => {\n\n    let runningMax = null;\n    let result = [];\n\n    for (let n of numbers) {\n        if (runningMax === null) {\n            runningMax = n;\n        } else {\n            runningMax = Math.max(runningMax, n);\n        }\n\n        result.push(runningMax);\n    }\n\n    return result;\n}\n\nassert(JSON.stringify(rollingMax([1, 3, 5, 2, 4, 6, 3])) === JSON.stringify([1, 3, 5, 5, 5, 6, 6]), 't1');\nassert(JSON.stringify(rollingMax([10, 9, 8, 7, 6, 5])) === JSON.stringify([10, 10, 10, 10, 10, 10]), 't2');\nassert(JSON.stringify(rollingMax([3, 3, 3, 3, 3])) === JSON.stringify([3, 3, 3, 3, 3]), 't3');\nassert(JSON.stringify(rollingMax([1, 2, 3, 4, 5])) === JSON.stringify([1, 2, 3, 4, 5]), 't4');\nassert(JSON.stringify(rollingMax([5, 4, 3, 2, 1])) === JSON.stringify([5, 5, 5, 5, 5]), 't5');\n\n",
  "10": "const isPalindrome = (string) => {\n    return string === string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n    if (!string) {\n        return '';\n    }\n\n    let beginningOfSuffix = 0;\n\n    while (!isPalindrome(string.substring(beginningOfSuffix))) {\n        beginningOfSuffix++;\n    }\n\n    return string + string.substring(0, beginningOfSuffix).split('').reverse().join('');\n}\n",
  "11": "const stringXor = (a, b) => {\n  \n  const xor = (i, j) => {\n    if (i === j) {\n        return '0';\n    } else {\n        return '1';\n    }\n  }\n\n  return Array.from(a).map((x, index) => xor(x, b[index])).join('');\n}\n\n",
  "12": "const longest = (strings) => {\n    if (strings.length === 0) {\n        return null;\n    }\n\n    const maxLength = Math.max(...strings.map(str => str.length));\n    for (let s of strings) {\n        if (s.length === maxLength) {\n            return s;\n        }\n    }\n}\n\n",
  "13": "const greatestCommonDivisor = (a, b) => {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}\n",
  "14": "const allPrefixes = (string) => {\n    let result = [];\n\n    for (let i = 0; i < string.length; i++) {\n        result.push(string.slice(0, i + 1));\n    }\n    return result;\n}\n  ",
  "15": "const stringSequence = (n) => {\n  return Array.from({length: n + 1}, (_, i) => String(i)).join(' ');\n}\n",
  "16": "const countDistinctCharacters = (string) => {\n    return new Set(string.toLowerCase()).size;\n}\n",
  "17": "const parseMusic = (musicString) => {\n  const noteMap = {'o': 4, 'o|': 2, '.|': 1};\n  return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}\n",
  "18": "const howManyTimes = (string, substring) => {\n    let times = 0;\n    for (let i = 0; i < string.length - substring.length + 1; i++) {\n        if (string.substring(i, i + substring.length) === substring) {\n            times++;\n        }\n    }\n    return times;\n}\n",
  "19": "const sortNumbers = (numbers) => {\n  const valueMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  return numbers.split(' ')\n    .filter(x => x)\n    .sort((a, b) => valueMap[a] - valueMap[b])\n    .join(' ');\n};\n",
  "20": "const findClosestElements = (numbers) => {\n  let closestPair = null;\n  let distance = null;\n\n  for (let idx = 0; idx < numbers.length; idx++) {\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        if (distance === null) {\n          distance = Math.abs(numbers[idx] - numbers[idx2]);\n          closestPair = [numbers[idx], numbers[idx2]].sort((a, b) => a - b);\n        } else {\n          let newDistance = Math.abs(numbers[idx] - numbers[idx2]);\n          if (newDistance < distance) {\n            distance = newDistance;\n            closestPair = [numbers[idx], numbers[idx2]].sort((a, b) => a - b);\n          }\n        }\n      }\n    }\n  }\n\n  return closestPair;\n}\n",
  "21": "const rescaleToUnit = (numbers) => {\n  const minNumber = Math.min(...numbers);\n  const maxNumber = Math.max(...numbers);\n  return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}\n",
  "22": "const filterIntegers = (values) => {\n    return values.filter(x => Number.isInteger(x));\n}\n",
  "23": "const strlen = (string) => {\n  return string.length;\n}\n",
  "24": "const largestDivisor = (n) => {\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}\n\n",
  "25": "const factorize = (n) => {\n    const fact = [];\n    let i = 2;\n    while (i <= Math.sqrt(n) + 1) {\n        if (n % i === 0) {\n            fact.push(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    \n    if (n > 1) {\n        fact.push(n);\n    }\n    return fact;\n}\n\n",
  "26": "const removeDuplicates = (numbers) => {\n  const counter = numbers.reduce((acc, num) => {\n    acc[num] = (acc[num] || 0) + 1;\n    return acc;\n  }, {});\n\n  return numbers.filter(num => counter[num] <= 1);\n}\n",
  "27": "const flipCase = (string) => {\n    return string.split('').map(char => {\n        return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n    }).join('');\n}\n",
  "28": "const concatenate = (strings) => {\n  return strings.join('');\n}\n",
  "29": "const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n}\n  ",
  "30": "const getPositive = (l) => {\n    return l.filter(e => e > 0);\n}\n",
  "31": "const isPrime = (n) => {\n    if (n < 2) {\n        return false;\n    }\n    for (let k = 2; k < n; k++) {\n        if (n % k === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nassert(isPrime(2) === true);\nassert(isPrime(3) === true);\nassert(isPrime(7) === true);\nassert(isPrime(10) === false);\nassert(isPrime(13) === true);\n",
  "32": "const poly = (xs, x) => {\n    return xs.reduce((acc, coeff, i) => acc + coeff * Math.pow(x, i), 0);\n}\n\nconst findZero = (xs) => {\n    let begin = -1.0, end = 1.0;\n    while (poly(xs, begin) * poly(xs, end) > 0) {\n        begin *= 2.0;\n        end *= 2.0;\n    }\n    while (end - begin > 1e-10) {\n        const center = (begin + end) / 2.0;\n        if (poly(xs, center) * poly(xs, begin) > 0) {\n            begin = center;\n        } else {\n            end = center;\n        }\n    }\n    return begin;\n}\n",
  "33": "const sortThird = (l) => {\n  l = [...l];\n  l.filter((_, i) => i % 3 === 0).sort().forEach((val, i) => l[i * 3] = val);\n  return l;\n}\n",
  "34": "const unique = (l) => {\n  return l.filter((item, index) => l.indexOf(item) === index);\n}\n",
  "35": "const maxElement = (l) => {\n\n  let m = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > m) {\n      m = l[i];\n    }\n  }\n  return m;\n}\n",
  "36": "function fizzBuzz(n) {\n    const ns = [];\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            ns.push(i);\n        }\n    }\n    const s = ns.map(String).join('');\n    let ans = 0;\n    for (const c of s) {\n        ans += (c === '7') ? 1 : 0;\n    }\n    return ans;\n}\n",
  "37": "const sortEven = (l) => {\n\n    const evens = l.filter((_, index) => index % 2 === 0);\n    const odds = l.filter((_, index) => index % 2 !== 0);\n    evens.sort((a, b) => a - b);\n    \n    const ans = [];\n    for (let i = 0; i < evens.length; i++) {\n        ans.push(evens[i]);\n        ans.push(odds[i]);\n    }\n    \n    if (evens.length > odds.length) {\n        ans.push(evens[evens.length - 1]);\n    }\n    \n    return ans;\n}\n\n\n",
  "38": "const encodeCyclic = (s) => {\n    let groups = [];\n    for (let i = 0; i < Math.ceil(s.length / 3); i++) {\n        groups.push(s.slice(i * 3, Math.min((i * 3) + 3, s.length)));\n    }\n    groups = groups.map(group => {\n        if (group.length === 3) {\n            return group.slice(1) + group[0];\n        } else {\n            return group;\n        }\n    });\n    return groups.join(\"\");\n}\n\nconst decodeCyclic = (s) => {\n    return encodeCyclic(encodeCyclic(s));\n}\n\n// Test Case\nconsole.log(encodeCyclic(\"abc\") === \"bca\");\n\n",
  "39": "const primeFib = (n) => {\n\n  const isPrime = (p) => {\n    if (p < 2) return false;\n    for (let k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n      if (p % k === 0) return false;\n    }\n    return true;\n  }\n\n  let f = [0, 1];\n  while (true) {\n    f.push(f[f.length - 1] + f[f.length - 2]);\n    if (isPrime(f[f.length - 1])) {\n      n--;\n    }\n    if (n === 0) return f[f.length - 1];\n  }\n}\n\n",
  "40": "const triplesSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
  "41": "const carRaceCollision = (n) => {\n  return n ** 2;\n}\n",
  "42": "const incrList = (l) => {\n  return l.map(e => e + 1);\n}\n",
  "43": "const pairsSumToZero = (l) => {\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n",
  "44": "const changeBase = (x, base) => {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\nassert(changeBase(10, 2) === \"1010\");\nassert(changeBase(16, 16) === \"10\");\nassert(changeBase(255, 8) === \"377\");\nassert(changeBase(100, 5) === \"400\");\nassert(changeBase(42, 7) === \"60\");\n\n",
  "45": "const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n",
  "46": "const fib4 = (n) => {\n\n  let results = [0, 0, 2, 0];\n  if (n < 4) {\n    return results[n];\n  }\n\n  for (let i = 4; i <= n; i++) {\n    results.push(results[3] + results[2] + results[1] + results[0]);\n    results.shift();\n  }\n\n  return results[3];\n}\n",
  "47": "function median(l) {\n    l = l.slice().sort((a, b) => a - b);\n    if (l.length % 2 === 1) {\n        return l[Math.floor(l.length / 2)];\n    } else {\n        return (l[(l.length / 2) - 1] + l[l.length / 2]) / 2.0;\n    }\n}\n",
  "48": "const isPalindrome = (text) => {\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "49": "const modp = (n, p) => {\n  let ret = 1;\n  for (let i = 0; i < n; i++) {\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}\n",
  "50": "const encodeShift = (s) => {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 + 5) % 26) + 97)).join('');\n}\n\nconst decodeShift = (s) => {\n    return s.split('').map(ch => String.fromCharCode(((ch.charCodeAt(0) - 97 - 5 + 26) % 26) + 97)).join('');\n}\n",
  "51": "const removeVowels = (text) => {\n    return Array.from(text).filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase())).join('');\n}",
  "52": "const belowThreshold = (list, threshold) => {\n    for (let element of list) {\n        if (element >= threshold) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "53": "const add = (x, y) => {\n  return x + y;\n};",
  "54": "function sameChars(s0, s1) {\n    return new Set(s0) === new Set(s1);\n}\n",
  "55": "const fib = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nassert(fib(0) == 0);\nassert(fib(1) == 1);\nassert(fib(2) == 1);\nassert(fib(5) == 5);\nassert(fib(10) == 55);\n",
  "56": "const correctBracketing = (brackets) => {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"<\") {\n      depth += 1\n    } else {\n      depth -= 1\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}\n",
  "57": "const monotonic = (l) => {\n    if (JSON.stringify(l) === JSON.stringify(l.slice().sort((a, b) => a - b)) || JSON.stringify(l) === JSON.stringify(l.slice().sort((a, b) => b - a))) {\n        return true;\n    }\n    return false;\n};",
  "58": "const common = (l1, l2) => {\n  let ret = new Set();\n  l1.forEach(e1 => {\n    l2.forEach(e2 => {\n      if (e1 === e2) {\n        ret.add(e1);\n      }\n    });\n  });\n  return Array.from(ret).sort();\n}\n",
  "59": "const largestPrimeFactor = (n) => {\n\n    const isPrime = (k) => {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k - 1; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let largest = 1;\n    for (let j = 2; j < n + 1; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}\n",
  "60": "const sumToN = (n) => {\n  return Array.from({length: n + 1}, (_, i) => i).reduce((acc, curr) => acc + curr, 0);\n}\n",
  "61": "const correctBracketing = (brackets) => {\n\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"(\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}\n\n",
  "62": "const derivative = (xs) => {\n    return xs.map((x, i) => x * i).slice(1);\n}\n",
  "63": "const fibfib = (n) => {\n  if (n === 0) {\n      return 0;\n  }\n  if (n === 1) {\n      return 0;\n  }\n  if (n === 2) {\n      return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "64": "const vowelsCount = (s) => {\n    const vowels = \"aeiouAEIOU\";\n    let nVowels = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (vowels.includes(s[i])) {\n            nVowels++;\n        }\n    }\n    if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n        nVowels++;\n    }\n    return nVowels;\n}\n\n// Test cases\nconsole.log(vowelsCount(\"Hello\") === 2);\nconsole.log(vowelsCount(\"AEIOU\") === 5);\nconsole.log(vowelsCount(\"qwrtY\") === 1);\nconsole.log(vowelsCount(\"This is a test\") === 4);\n\n",
  "65": "const circularShift = (x, shift) => {\n    let s = String(x);\n    if (shift > s.length) {\n        return s.split('').reverse().join('');\n    } else {\n        return s.slice(s.length - shift) + s.slice(0, s.length - shift);\n    }\n}\n",
  "66": "const digitSum = (s) => {\n    if (s === \"\") return 0;\n    return [...s].reduce((acc, char) => {\n        return char.charCodeAt(0) + acc * (char === char.toUpperCase());\n    }, 0);\n}\n",
  "67": "const fruitDistribution = (s, n) => {\n  const lis = [];\n  s.split(' ').forEach(i => {\n    if (!isNaN(i)) {\n      lis.push(parseInt(i));\n    }\n  });\n  return n - lis.reduce((a, b) => a + b, 0);\n}\n",
  "68": "const pluck = (arr) => {\n    if (arr.length === 0) return [];\n    const evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n    return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n",
  "69": "const search = (lst) => {\n  let frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (let i of lst) {\n    frq[i] += 1;\n  }\n\n  let ans = -1;\n  for (let i = 1; i < frq.length; i++) {\n    if (frq[i] >= i) {\n      ans = i;\n    }\n  }\n\n  return ans;\n}\n",
  "70": "const strangeSortList = (lst) => {\n    const res = [];\n    let switchVal = true;\n\n    while (lst.length > 0) {\n        const minVal = switchVal ? Math.min(...lst) : Math.max(...lst);\n        res.push(minVal);\n        lst.splice(lst.indexOf(minVal), 1);\n        switchVal = !switchVal;\n    }\n\n    return res;\n}\n",
  "71": "const triangleArea = (a, b, c) => {\n\n    if (a + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    const s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)) ** 0.5;\n    area = Math.round(area * 100) / 100;\n    return area;\n}\n",
  "72": "const willItFly = (q, w) => {\n    if (q.reduce((acc, curr) => acc + curr, 0) > w) {\n        return false;\n    }\n    \n    let i = 0, j = q.length - 1;\n    while (i < j) {\n        if (q[i] !== q[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n",
  "73": "const smallestChange = (arr) => {\n    let ans = 0;\n    for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n        if (arr[i] !== arr[arr.length - i - 1]) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\n",
  "74": "const totalMatch = (lst1, lst2) => {\n  let l1 = 0;\n  lst1.forEach(st => l1 += st.length);\n\n  let l2 = 0;\n  lst2.forEach(st => l2 += st.length);\n\n  if (l1 <= l2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}\n",
  "75": "const isMultiplyPrime = (a) => {\n\n    const isPrime = (n) => {\n        for (let j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (let i = 2; i <= 100; i++) {\n        if (!isPrime(i)) continue;\n        for (let j = 2; j <= 100; j++) {\n            if (!isPrime(j)) continue;\n            for (let k = 2; k <= 100; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n    return false;\n}\n\n",
  "76": "const isSimplePower = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  let power = 1;\n  while (power < x) {\n    power = power * n;\n  }\n  return power === x;\n}\n",
  "77": "const isCube = (a) => {\n  a = Math.abs(a);\n  return Math.round(Math.pow(a, 1/3)) ** 3 === a;\n}\n",
  "78": "const hexKey = (num) => {\n    const primes = ['2', '3', '5', '7', 'B', 'D'];\n    let total = 0;\n\n    for(let i = 0; i < num.length; i++){\n        if(primes.includes(num[i])){\n            total += 1;\n        }\n    }\n\n    return total;\n}\n",
  "79": "const decimalToBinary = (decimal) => {\n    return \"db\" + decimal.toString(2) + \"db\";\n}\n  ",
  "80": "const isHappy = (s) => {\n    if (s.length < 3) {\n        return false;\n    }\n    \n    for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i+1] || s[i+1] === s[i+2] || s[i] === s[i+2]) {\n            return false;\n        }\n    }\n    \n    return true;\n}",
  "81": "const numericalLetterGrade = (grades) => {\n\n    let letterGrade = [];\n    for (let gpa of grades) {\n        if (gpa === 4.0) {\n            letterGrade.push(\"A+\");\n        } else if (gpa > 3.7) {\n            letterGrade.push(\"A\");\n        } else if (gpa > 3.3) {\n            letterGrade.push(\"A-\");\n        } else if (gpa > 3.0) {\n            letterGrade.push(\"B+\");\n        } else if (gpa > 2.7) {\n            letterGrade.push(\"B\");\n        } else if (gpa > 2.3) {\n            letterGrade.push(\"B-\");\n        } else if (gpa > 2.0) {\n            letterGrade.push(\"C+\");\n        } else if (gpa > 1.7) {\n            letterGrade.push(\"C\");\n        } else if (gpa > 1.3) {\n            letterGrade.push(\"C-\");\n        } else if (gpa > 1.0) {\n            letterGrade.push(\"D+\");\n        } else if (gpa > 0.7) {\n            letterGrade.push(\"D\");\n        } else if (gpa > 0.0) {\n            letterGrade.push(\"D-\");\n        } else {\n            letterGrade.push(\"E\");\n        }\n    }\n    return letterGrade;\n}\n\n// Test case\nconsole.log(numericalLetterGrade([3.5, 2.0, 1.0])); // Output: ['A-', 'C', 'D']\n",
  "82": "const primeLength = (string) => {\n\n    let l = string.length;\n    if (l === 0 || l === 1) {\n        return false;\n    }\n    for (let i = 2; i < l; i++) {\n        if (l % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Test Cases\nconsole.log(primeLength(\"hello\") === true);\nconsole.log(primeLength(\"\") === false);\nconsole.log(primeLength(\"a\") === false);\nconsole.log(primeLength(\"engineering\") === true);\n\n",
  "83": "const startsOneEnds = (n) => {\n  if (n === 1) return 1;\n  return 18 * (10 ** (n - 2));\n}\n",
  "84": "const solve = (N) => {\n    return (parseInt(N.toString().split('').reduce((acc, curr) => parseInt(acc) + parseInt(curr), 0))).toString(2);\n}\n",
  "85": "const add = (lst) => {\n    return lst.filter((num, index) => index % 2 == 1 && num % 2 == 0)\n              .reduce((acc, curr) => acc + curr, 0);\n}\n",
  "86": "const antiShuffle = (s) => {\n  return s.split(' ').map(i => i.split('').sort().join('')).join(' ');\n}\n",
  "87": "const getRow = (lst, x) => {\n  let coords = []\n  \n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j])\n      }\n    }\n  }\n  \n  coords.sort((a, b) => {\n    if (a[1] === b[1]) {\n      return a[0] - b[0]\n    } else {\n      return b[1] - a[1]\n    }\n  })\n  \n  return coords\n}\n\n",
  "88": "const sortArray = (array) => {\n  return array.length === 0 ? [] : array.sort((a, b) => (array[0] + array[array.length - 1]) % 2 === 0 ? b - a : a - b);\n}\n",
  "89": "function encrypt(s) {\n    const d = 'abcdefghijklmnopqrstuvwxyz';\n    let out = '';\n    for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n        if (d.includes(c)) {\n            const newIndex = (d.indexOf(c) + 4) % 26;\n            out += d[newIndex];\n        } else {\n            out += c;\n        }\n    }\n    return out;\n}\n",
  "90": "const nextSmallest = (lst) => {\n  lst = [...new Set(lst)].sort((a, b) => a - b);\n  return lst.length < 2 ? null : lst[1];\n};\n",
  "91": "const isBored = (S) => {\n  const sentences = S.split(/[.?!]\\s*/)\n  return sentences.reduce((count, sentence) => {\n    if (sentence.slice(0, 2) === 'I ') {\n      return count + 1\n    } else {\n      return count\n    }\n  }, 0)\n}\n",
  "92": "const anyInt = (x, y, z) => {\n\n    if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z === x) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n\n",
  "93": "const encode = (message) => {\n    const vowels = \"aeiouAEIOU\";\n    const vowelsReplace = Object.fromEntries(Array.from(vowels, i => [i, String.fromCharCode(i.charCodeAt(0) + 2)]));\n    message = message.split('').map(char => vowelsReplace[char] ? vowelsReplace[char] : char).join('');\n    return message.toUpperCase();\n}\n",
  "94": "const skjkasdkd = (lst) => {\n\n    const isPrime = (n) => {\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let maxx = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > maxx && isPrime(lst[i])) {\n            maxx = lst[i];\n        }\n    }\n    const result = maxx.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);\n    return result;\n}\n\n",
  "95": "const checkDictCase = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  } else {\n    let state = \"start\";\n    for (let key in dict) {\n      if (typeof key !== 'string') {\n        state = \"mixed\";\n        break;\n      }\n      if (state === \"start\") {\n        if (key.toUpperCase() === key) {\n          state = \"upper\";\n        } else if (key.toLowerCase() === key) {\n          state = \"lower\";\n        } else {\n          break;\n        }\n      } else if ((state === \"upper\" && key.toUpperCase() !== key) || (state === \"lower\" && key.toLowerCase() !== key)) {\n        state = \"mixed\";\n        break;\n      } else {\n        break\n      }\n    }\n    return state === \"upper\" || state === \"lower\";\n  }\n}\n\njavascript\n// Test Cases\nassert(checkDictCase({'apple': 1, 'banana': 2}) === true);\nassert(checkDictCase({'Apple': 1, 'banana': 2}) === false);\nassert(checkDictCase({'apple': 1, 'Banana': 2}) === false);\nassert(checkDictCase({}) === false);\n\n",
  "96": "const countUpTo = (n) => {\n    const primes = [];\n    for (let i = 2; i < n; i++) {\n        let isPrime = true;\n        for (let j = 2; j < i; j++) {\n            if (i % j === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    return primes;\n};\n",
  "97": "const multiply = (a, b) => {\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}\n",
  "98": "const countUpper = (str) => {\n    let count = 0;\n    for (let i = 0; i < str.length; i += 2) {\n        if (\"AEIOU\".includes(str[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "99": "const closestInteger = (value) => {\n    const { ceil, floor } = Math;\n\n    if (value.split('.').length === 2) {\n        while (value.slice(-1) === '0') {\n            value = value.slice(0, -1);\n        }\n    }\n\n    const num = parseFloat(value);\n    let res;\n    if (value.slice(-2) === '.5') {\n        res = num > 0 ? ceil(num) : floor(num);\n    } else if (value.length > 0) {\n        res = Math.round(num);\n    } else {\n        res = 0;\n    }\n\n    return res;\n}\n\n",
  "100": "const makeAPile = (n) => {\n  return Array.from({length: n}, (_, i) => n + 2 * i);\n}\n",
  "101": "const wordsString = (s) => {\n    if (!s) {\n        return [];\n    }\n\n    let sList = [];\n    for (let letter of s) {\n        if (letter === ',') {\n            sList.push(' ');\n        } else {\n            sList.push(letter);\n        }\n    }\n\n    sList = sList.join(\"\");\n    return sList.split(\" \");\n}\n",
  "102": "const chooseNum = (x, y) => {\n  if (x > y) { return -1; }\n  if (y % 2 == 0) { return y; }\n  if (x == y) { return -1; }\n  return y - 1;\n}\n",
  "103": "const roundedAvg = (n, m) => {\n\n  if (m < n) {\n    return -1;\n  }\n  let summation = 0;\n  for (let i = n; i <= m; i++) {\n    summation += i;\n  }\n  return (summation / (m - n + 1)).toString(2);\n}\n\nassert(roundedAvg(0, 10) === '101');\nassert(roundedAvg(2, 2) === '10');\n",
  "104": "const uniqueDigits = (x) => {\n\n  let oddDigitElements = [];\n  for (let i of x) {\n    if (Array.from(String(i)).every(c => parseInt(c) % 2 === 1)) {\n      oddDigitElements.push(i);\n    }\n  }\n  return oddDigitElements.sort((a, b) => a - b);\n}\n",
  "105": "function byLength(arr) {\n  const dic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n\n  const sortedArr = arr.slice().sort((a, b) => b - a);\n  const newArr = [];\n  for (let i = 0; i < sortedArr.length; i++) {\n    try {\n      newArr.push(dic[sortedArr[i]]);\n    } catch (err) {\n      continue;\n    }\n  }\n  return newArr;\n}\n",
  "106": "const f = (n) => {\n    let ret = [];\n    for (let i = 1; i <= n; i++) {\n        let x = 0;\n        if (i % 2 === 0) {\n            x = 1;\n            for (let j = 1; j <= i; j++) {\n                x *= j;\n            }\n        } else {\n            for (let j = 1; j <= i; j++) {\n                x += j;\n            }\n        }\n        ret.push(x);\n    }\n    return ret;\n}\n ",
  "107": "const evenOddPalindrome = (n) => {\n\n    const isPalindrome = (n) => {\n        return n.toString() === n.toString().split(\"\").reverse().join(\"\");\n    };\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n\n    return [evenPalindromeCount, oddPalindromeCount];\n};\n",
  "108": "const countNums = (arr) => {\n\n  const digitsSum = (n) => {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((a, b) => a + b, 0);\n  }\n\n  return arr.map(digitsSum).filter(x => x > 0).length;\n}\n\n",
  "109": "const moveOneBall = (arr) => {\n\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    const sortedArray = [...arr].sort((a, b) => a - b);\n    let myArr = [];\n\n    const minValue = Math.min(...arr);\n    const minIndex = arr.indexOf(minValue);\n\n    myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n\n    for (let i = 0; i < arr.length; i++) {\n        if (myArr[i] !== sortedArray[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n",
  "110": "const exchange = (lst1, lst2) => {\n    let odd = 0;\n    let even = 0;\n    for (let i of lst1) {\n        if (i % 2 === 1) {\n            odd += 1;\n        }\n    }\n    for (let i of lst2) {\n        if (i % 2 === 0) {\n            even += 1;\n        }\n    }\n    if (even >= odd) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n  ",
  "111": "const histogram = (test) => {\n    let dict = {};\n    let list = test.split(\" \");\n    let maxCount = 0;\n\n    for (let i of list) {\n        if (list.filter(item => item === i).length > maxCount && i !== '') {\n            maxCount = list.filter(item => item === i).length;\n        }\n    }\n\n    if (maxCount > 0) {\n        for (let i of list) {\n            if (list.filter(item => item === i).length === maxCount) {\n                dict[i] = maxCount;\n            }\n        }\n    }\n    return dict;\n}\n\n",
  "112": "const reverseDelete = (s, c) => {\n  \n  s = s.split('').filter(char => !c.includes(char)).join('');\n  return [s, s.split('').reverse().join('') === s];\n  \n}\n\n",
  "113": "function oddCount(lst) {\n    let res = [];\n    for (let arr of lst) {\n        let n = arr.reduce((acc, val) => acc + (parseInt(val) % 2 === 1), 0);\n        res.push(`the number of odd elements ${n} in the string ${n} of the ${n}th input.`);\n    }\n    return res;\n}\n",
  "114": "const minSubArraySum = (nums) => {\n    let maxSum = 0;\n    let sum = 0;\n    \n    for (let num of nums) {\n        sum += -num;\n        if (sum < 0) {\n            sum = 0;\n        }\n        maxSum = Math.max(sum, maxSum);\n    }\n    \n    if (maxSum === 0) {\n        maxSum = Math.max(...nums.map(i => -i));\n    }\n    \n    const minSum = -maxSum;\n    return minSum;\n}",
  "115": "const maxFill = (grid, capacity) => {\n    const sumArr = grid.map(arr => arr.reduce((total, num) => total + num, 0));\n    return sumArr.reduce((total, sum) => total + Math.ceil(sum / capacity), 0);\n}\n",
  "116": "const sortArray = (arr) => {\n\n  return arr.slice().sort((a, b) => {\n    const countBits = num => {\n      return (num.toString(2).match(/1/g) || []).length;\n    }\n    return countBits(a) - countBits(b) || a - b;\n  });\n}\n\nassert(sortArray([9, 8, 7, 6, 5]).toString(), [8, 5, 6, 9, 7].toString());\n",
  "117": "function selectWords(s, n) {\n    const result = [];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n\n    const words = s.split(' ');\n    for (let word of words) {\n        let nConsonants = 0;\n        for (let i = 0; i < word.length; i++) {\n            if (!vowels.includes(word[i].toLowerCase())) {\n                nConsonants++;\n            }\n        }\n        if (nConsonants === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n",
  "118": "const getClosestVowel = (word) => {\n\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I']);\n  for (let i = word.length - 3; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}\n",
  "119": "const matchParens = (lst) => {\n\n    const check = (s) => {\n        let val = 0;\n        for (let i of s) {\n            if (i === '(') {\n                val += 1;\n            } else {\n                val -= 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val === 0 ? true : false;\n    }\n\n    const S1 = lst[0] + lst[1];\n    const S2 = lst[1] + lst[0];\n    return check(S1) || check(S2) ? 'Yes' : 'No';\n}\n  ",
  "120": "const maximum = (arr, k) => {\n\n    if (k === 0) {\n        return [];\n    }\n    arr.sort((a, b) => a - b);\n    const ans = arr.slice(-k);\n    return ans;\n}\n\nassert(JSON.stringify(maximum([3, 1, 4, 1, 5, 9, 2, 6, 5], 4)) === JSON.stringify([5, 5, 6, 9]), \"Test Case 1 Failed\");\nassert(JSON.stringify(maximum([7, 2, 5, 8, 4, 3], 2)) === JSON.stringify([7, 8]), \"Test Case 2 Failed\");\nassert(JSON.stringify(maximum([1, 2, 3, 4, 5], 1)) === JSON.stringify([5]), \"Test Case 3 Failed\");\nassert(JSON.stringify(maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 3)) === JSON.stringify([7, 8, 9]), \"Test Case 4 Failed\");\n",
  "121": "const solution = (lst) => {\n\n    return lst.reduce((acc, curr, idx) => {\n        if (idx % 2 === 0 && curr % 2 === 1) {\n            return acc + curr;\n        } else {\n            return acc;\n        }\n    }, 0);\n\n}\n\n",
  "122": "const addElements = (arr, k) => {\n  return arr.slice(0, k).reduce((acc, elem) => (String(elem).length <= 2 ? acc + elem : acc), 0);\n}\n",
  "123": "const getOddCollatz = (n) => {\n    let oddCollatz;\n    if (n % 2 === 0) {\n        oddCollatz = [];\n    } else {\n        oddCollatz = [n];\n    }\n\n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2;\n        } else {\n            n = n * 3 + 1;\n        }\n\n        if (n % 2 === 1) {\n            oddCollatz.push(Math.floor(n));\n        }\n    }\n\n    return oddCollatz.sort();\n}\n",
  "124": "const validDate = (date) => {\n\n    try {\n        date = date.trim();\n        let [month, day, year] = date.split('-');\n        month = parseInt(month);\n        day = parseInt(day);\n        year = parseInt(year);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (([1, 3, 5, 7, 8, 10, 12].includes(month) && (day < 1 || day > 31)) ||\n            ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) ||\n            (month === 2 && (day < 1 || day > 29))) {\n            return false;\n        }\n    } catch (e) {\n        return false;\n    }\n\n    return true;\n}\n\n",
  "125": "const splitWords = (txt) => {\n\n    if (txt.includes(\" \")) {\n        return txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.replace(/,/g, ' ').split(\" \");\n    } else {\n        return [...txt].filter(i => i.toLowerCase() === i && i.charCodeAt(0) % 2 === 0).length;\n    }\n\n}\n",
  "126": "const isSorted = (lst) => {\n    const countDigit = lst.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n    \n    if (lst.some((value) => countDigit[value] > 2)) {\n        return false;\n    }\n    \n    if (lst.every((value, index) => index === 0 || lst[index - 1] <= value)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "127": "const intersection = (interval1, interval2) => {\n\n  const isPrime = (num) => {\n    if (num === 1 || num === 0) {\n      return false;\n    }\n    if (num === 2) {\n      return true;\n    }\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const l = Math.max(interval1[0], interval2[0]);\n  const r = Math.min(interval1[1], interval2[1]);\n  const length = r - l;\n  if (length > 0 && isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n// Test Cases\nconsole.log(intersection([1, 5], [3, 7]) === \"YES\");\nconsole.log(intersection([10, 15], [17, 23]) === \"NO\");\nconsole.log(intersection([2, 8], [5, 10]) === \"YES\");\nconsole.log(intersection([0, 20], [21, 30]) === \"NO\");\nconsole.log(intersection([3, 11], [11, 20]) === \"NO\");\n\n",
  "128": "const prodSigns = (arr) => {\n    if (arr.length === 0) return null;\n    const hasZero = arr.includes(0);\n    const hasNegatives = arr.some(num => num < 0);\n    \n    let prod = 0;\n    if (hasZero) {\n        prod = 0;\n    } else {\n        prod = hasNegatives ? -1 ** arr.filter(num => num < 0).length : 1;\n    }\n    \n    return prod * arr.reduce((sum, num) => sum + Math.abs(num), 0);\n}\n",
  "129": "function minPath(grid, k) {\n\n  let n = grid.length;\n  let val = n * n + 1;\n  for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n          if (grid[i][j] === 1) {\n              let temp = [];\n              if (i !== 0) {\n                  temp.push(grid[i - 1][j]);\n              }\n              if (j !== 0) {\n                  temp.push(grid[i][j - 1]);\n              }\n              if (i !== n - 1) {\n                  temp.push(grid[i + 1][j]);\n              }\n              if (j !== n - 1) {\n                  temp.push(grid[i][j + 1]);\n              }\n\n              val = Math.min(...temp);\n          }\n      }\n  }\n\n  let ans = [];\n  for (let i = 0; i < k; i++) {\n      if (i % 2 === 0) {\n          ans.push(1);\n      } else {\n          ans.push(val);\n      }\n  }\n  return ans;\n}\n\n",
  "130": "const tri = (n) => {\n    if (n === 0) {\n        return [1];\n    }\n    let myTri = [1, 3];\n    for (let i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            myTri.push(i / 2 + 1);\n        } else {\n            myTri.push(myTri[i - 1] + myTri[i - 2] + (i + 3) / 2);\n        }\n    }\n    return myTri;\n};\n",
  "131": "const digits = (n) => {\n    let product = 1;\n    let oddCount = 0;\n\n    for (let digit of n.toString()) {\n        let intDigit = parseInt(digit);\n        if (intDigit % 2 === 1) {\n            product *= intDigit;\n            oddCount++;\n        }\n    }\n\n    if (oddCount === 0) {\n        return 0;\n    } else {\n        return product;\n    }\n}\n\n",
  "132": "const isNested = (string) => {\n  let openingBracketIndex = [];\n  let closingBracketIndex = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openingBracketIndex.push(i);\n    } else {\n      closingBracketIndex.push(i);\n    }\n  }\n  closingBracketIndex.reverse();\n  let count = 0;\n  let i = 0;\n  let length = closingBracketIndex.length;\n  for (let idx of openingBracketIndex) {\n    if (i < length && idx < closingBracketIndex[i]) {\n      count++;\n      i++;\n    }\n  }\n  return count >= 2;\n}\n\n",
  "133": "const sumSquares = (lst) => {\n  let squared = 0;\n  for (const i of lst) {\n    squared += Math.ceil(i) ** 2;\n  }\n  return squared;\n}\n",
  "134": "const checkIfLastCharIsALetter = (txt) => {\n  const check = txt.split(\" \").slice(-1)[0];\n  return (check.length === 1 && (check.charCodeAt(0) >= 97 && check.charCodeAt(0) <= 122)) ? true : false;\n}\n",
  "135": "function canArrange(arr) {\n\n    let index = -1;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            index = i;\n        }\n    }\n    return index;\n}\n\nassert(canArrange([1, 2, 3, 4, 5]) === -1);\nassert(canArrange([5, 4, 3, 2, 1]) === 4);\nassert(canArrange([3, 2, 4, 1]) === 3);\nassert(canArrange([1, 2, 3, 5, 4]) === 4);\n\n",
  "136": "const largestSmallestIntegers = (lst) => {\n  const smallest = lst.filter(x => x < 0);\n  const largest = lst.filter(x => x > 0);\n  return [(smallest.length > 0 ? Math.max(...smallest) : null), (largest.length > 0 ? Math.min(...largest) : null)];\n}\n  ",
  "137": "const compareOne = (a, b) => {\n  let tempA = a;\n  let tempB = b;\n  if (typeof tempA === 'string') tempA = tempA.replace(',', '.');\n  if (typeof tempB === 'string') tempB = tempB.replace(',', '.');\n  if (parseFloat(tempA) === parseFloat(tempB)) return null;\n  return parseFloat(tempA) > parseFloat(tempB) ? a : b;\n}\n",
  "138": "const isEqualToSumEven = (n) => {\n    return n % 2 === 0 && n >= 8;\n}",
  "139": "const specialFactorial = (n) => {\n\n    let factI = 1;\n    let specialFact = 1;\n    for (let i = 1; i <= n; i++) {\n        factI *= i;\n        specialFact *= factI;\n    }\n    return specialFact;\n}\n",
  "140": "const fixSpaces = (text) => {\n\n    let newText = \"\";\n    let i = 0;\n    let start = 0, end = 0;\n    while (i < text.length) {\n        if (text[i] == \" \") {\n            end += 1;\n        } else {\n            if (end - start > 2) {\n                newText += \"-\" + text[i];\n            } else if (end - start > 0) {\n                newText += \"_\".repeat(end - start) + text[i];\n            } else {\n                newText += text[i];\n            }\n            start = i + 1;\n            end = i + 1;\n        }\n        i += 1;\n    }\n    if (end - start > 2) {\n        newText += \"-\";\n    } else if (end - start > 0) {\n        newText += \"_\";\n    }\n    return newText;\n}\n\n",
  "141": "const fileNameCheck = (fileName) => {\n  const suffix = ['txt', 'exe', 'dll'];\n  const parts = fileName.split('.');\n  if (parts.length !== 2) return 'No';\n  if (!suffix.includes(parts[1])) return 'No';\n  if (parts[0].length === 0) return 'No';\n  if (!isNaN(parts[0][0])) return 'No';\n  const digitCount = parts[0].split('').filter(x => !isNaN(x)).length\n  if (digitCount > 3) return 'No';\n  return 'Yes';\n}\n",
  "142": "const sumSquares = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result.push(lst[i] ** 2);\n    } else if (i % 4 === 0 && i % 3 !== 0) {\n      result.push(lst[i] ** 3);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result.reduce((acc, curr) => acc + curr, 0);\n}\n",
  "143": "const wordsInSentence = (sentence) => {\n\n  let newLst = []\n  let words = sentence.split(\" \")\n  for (let word of words){\n    let flag = 0;\n    if (word.length === 1){\n      flag = 1\n    }\n    for (let i = 2; i < word.length; i++){\n      if (word.length % i === 0){\n        flag = 1\n      }\n    }\n    if (flag === 0 || word.length === 2){\n      newLst.push(word)\n    }\n  }\n  return newLst.join(\" \")\n}\n",
  "144": "const simplify = (x, n) => {\n    let [a, b] = x.split(\"/\");\n    let [c, d] = n.split(\"/\");\n    let numerator = parseInt(a) * parseInt(c);\n    let denom = parseInt(b) * parseInt(d);\n    if (numerator / denom === parseInt(numerator / denom)) {\n        return true;\n    }\n    return false;\n}\n",
  "145": "const orderByPoints = (nums) => {\n\n  const digitsSum = (n) => {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    n = Array.from(String(n), Number);\n    n[0] = n[0] * neg;\n    return n.reduce((acc, val) => acc + val, 0);\n  };\n\n  return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n};\n\nassert(orderByPoints([11, 22, 33, 44]).toString() == [11, 22, 33, 44].toString());\n\n",
  "146": "const specialFilter = (nums) => {\n\n    let count = 0;\n    for (let num of nums) {\n        if (num > 10) {\n            const oddDigits = [1, 3, 5, 7, 9];\n            const numberAsString = num.toString();\n            if (oddDigits.includes(parseInt(numberAsString[0])) && oddDigits.includes(parseInt(numberAsString[numberAsString.length - 1]))) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n",
  "147": "const getMaxTriples = (n) => {\n\n    let A = []\n    for (let i = 1; i <= n; i++) {\n        A.push(i * i - i + 1)\n    }\n    let ans = []\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if ((A[i] + A[j] + A[k]) % 3 === 0) {\n                    ans.push([A[i], A[j], A[k]])\n                }\n            }\n        }\n    }\n    return ans.length\n}\n\n",
  "148": "const bf = (planet1, planet2) => {\n\n    const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {\n        return [];\n    }\n    const planet1Index = planetNames.indexOf(planet1);\n    const planet2Index = planetNames.indexOf(planet2);\n    if (planet1Index < planet2Index) {\n        return planetNames.slice(planet1Index + 1, planet2Index);\n    } else {\n        return planetNames.slice(planet2Index + 1, planet1Index);\n    }\n}\n\n",
  "149": "const sortedListSum = (lst) => {\n    lst.sort();\n    const newLst = [];\n    for (let i of lst) {\n        if (i.length % 2 === 0) {\n            newLst.push(i);\n        }\n    }\n    return newLst.sort((a, b) => a.length - b.length);\n}\n",
  "150": "const xOrY = (n, x, y) => {\n    if (n === 1) {\n        return y;\n    }\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return y;\n            break;\n        }\n    }\n    return x;\n}\n\nassert(xOrY(1, 10, 20) === 20);\nassert(xOrY(2, 10, 20) === 10);\nassert(xOrY(3, 10, 20) === 10);\nassert(xOrY(4, 10, 20) === 20);\nassert(xOrY(7, 10, 20) === 10);\n\n",
  "151": "const doubleTheDifference = (lst) => {\n    return lst.reduce((acc, curr) => acc + (curr > 0 && curr % 2 !== 0 && !String(curr).includes(\".\")) ? curr ** 2 : 0, 0);\n}\n",
  "152": "const compare = (game, guess) => {\n    return game.map((num, index) => Math.abs(num - guess[index]));\n}\n",
  "153": "const strongestExtension = (className, extensions) => {\n\n  let strong = extensions[0];\n  let myVal = extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n\n  for (let s of extensions) {\n    let val = s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n    if (val > myVal) {\n      strong = s;\n      myVal = val;\n    }\n  }\n\n  let ans = `${className}.${strong}`;\n  return ans;\n}\n  ",
  "154": "const cycPatternCheck = (a, b) => {\n\n  const lenB = b.length;\n  const pattern = b + b;\n\n  for (let i = 0; i < a.length - lenB + 1; i++) {\n    for (let j = 0; j < lenB + 1; j++) {\n      if (a.slice(i, i + lenB) === pattern.slice(j, j + lenB)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n",
  "155": "const evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  \n  const numStr = Math.abs(num).toString();\n  \n  for (let i = 0; i < numStr.length; i++) {\n    if (parseInt(numStr[i]) % 2 === 0) {\n      evenCount += 1;\n    } else {\n      oddCount += 1;\n    }\n  }\n  \n  return [evenCount, oddCount];\n}\n",
  "156": "function intToMiniRoman(number) {\n\n    let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]; \n    let sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]; \n    let i = 12;\n    let res = '';\n    \n    while (number) { \n        let div = Math.floor(number / num[i]); \n        number %= num[i]; \n        while (div) { \n            res += sym[i]; \n            div -= 1;\n        }\n        i -= 1;\n    }\n    \n    return res.toLowerCase();\n}\n\n",
  "157": "const rightAngleTriangle = (a, b, c) => {\n    return a * a === b * b + c * c || b * b === a * a + c * c || c * c === a * a + b * b;\n}\n",
  "158": "const findMax = (words) => {\n    return words.sort((a, b) => {\n        if (new Set(a).size !== new Set(b).size) {\n            return new Set(b).size - new Set(a).size;\n        } else {\n            return a.localeCompare(b);\n        }\n    })[0];\n}\n",
  "159": "const eat = (number, need, remaining) => {\n    if (need <= remaining) {\n        return [number + need, remaining - need];\n    } else {\n        return [number + remaining, 0];\n    }\n}\n",
  "160": "const doAlgebra = (operator, operand) => {\n  let expression = operand[0].toString();\n  for (let i = 0; i < operator.length; i++) {\n    const oprt = operator[i];\n    const oprn = operand[i + 1];\n    expression += oprt + oprn;\n  }\n  return eval(expression);\n}\n",
  "161": "const solve = (s) => {\n    let flg = 0;\n    let idx = 0;\n    let newStr = s.split(\"\");\n    for (let i of s) {\n        if (i.match(/[a-zA-Z]/)) {\n            newStr[idx] = i === i.toLowerCase() ? i.toUpperCase() : i.toLowerCase();\n            flg = 1;\n        }\n        idx++;\n    }\n    s = \"\";\n    for (let i of newStr) {\n        s += i;\n    }\n    if (flg === 0) {\n        return s.split(\"\").reverse().join(\"\");\n    }\n    return s;\n}\n\n",
  "162": "const stringToMd5 = (text) => {\n  const crypto = require('crypto');\n  return text ? crypto.createHash('md5').update(text).digest('hex') : null;\n}\n",
  "163": "const generateIntegers = (a, b) => {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n\n  const result = [];\n  for (let i = lower; i <= upper; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"
}