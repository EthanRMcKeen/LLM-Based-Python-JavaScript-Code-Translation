{
  "0": "function hasCloseElements(numbers, threshold) {\n  for (let idx = 0; idx < numbers.length; idx++) {\n    const elem = numbers[idx];\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const distance = Math.abs(elem - numbers[idx2]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
  "1": "function separateParenGroups(parenString) {\n  const result = [];\n  let currentString = [];\n  let currentDepth = 0;\n\n  for (const c of parenString) {\n    if (c === '(') {\n      currentDepth += 1;\n      currentString.push(c);\n    } else if (c === ')') {\n      currentDepth -= 1;\n      currentString.push(c);\n\n      if (currentDepth === 0) {\n        result.push(currentString.join(''));\n        currentString = [];\n      }\n    }\n  }\n\n  return result;\n}",
  "2": "function truncateNumber(number) {\n  return number % 1.0;\n}",
  "3": "function belowZero(operations) {\n  let balance = 0;\n\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n\n  return false;\n}",
  "4": "function meanAbsoluteDeviation(numbers) {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, x) => a + Math.abs(x - mean), 0) / numbers.length;\n}",
  "5": "function intersperse(numbers, delimeter) {\n  if (!numbers) {\n    return [];\n  }\n\n  const result = [];\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n\n  if (numbers.length > 0) {\n    result.push(numbers[numbers.length - 1]);\n  }\n\n  return result;\n}",
  "6": "function parseNestedParens(parenString) {\n  function parseParenGroup(s) {\n    let depth = 0;\n    let maxDepth = 0;\n    for (const c of s) {\n      if (c === '(') {\n        depth += 1;\n        maxDepth = Math.max(depth, maxDepth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return maxDepth;\n  }\n\n  return parenString.split(' ').filter(x => x).map(x => parseParenGroup(x));\n}",
  "7": "function filterBySubstring(strings, substring) {\n  return strings.filter(str => str.includes(substring));\n}",
  "8": "function sumProduct(numbers) {\n  let sumValue = 0;\n  let prodValue = 1;\n\n  for (let n of numbers) {\n    sumValue += n;\n    prodValue *= n;\n  }\n  return [sumValue, prodValue];\n}",
  "9": "function rollingMax(numbers) {\n  let runningMax = null;\n  const result = [];\n\n  for (const n of numbers) {\n    if (runningMax === null) {\n      runningMax = n;\n    } else {\n      runningMax = Math.max(runningMax, n);\n    }\n\n    result.push(runningMax);\n  }\n\n  return result;\n}",
  "10": "function isPalindrome(string) {\n  return string === string.split(\"\").reverse().join(\"\");\n}\n\nfunction makePalindrome(string) {\n  if (!string) {\n    return '';\n  }\n\n  let beginningOfSuffix = 0;\n\n  while (!isPalindrome(string.substring(beginningOfSuffix))) {\n    beginningOfSuffix += 1;\n  }\n\n  return string + string.substring(0, beginningOfSuffix).split(\"\").reverse().join(\"\");\n}",
  "11": "function stringXor(a, b) {\n\n    function xor(i, j) {\n        if (i == j) {\n            return '0';\n        } else {\n            return '1';\n        }\n    }\n\n    let result = \"\";\n    for (let i = 0; i < a.length; i++) {\n        result += xor(a[i], b[i]);\n    }\n    return result;\n}",
  "12": "function longest(strings) {\n  if (!strings) {\n    return null;\n  }\n\n  if (strings.length === 0) {\n    return null;\n  }\n\n  let maxLen = Math.max(...strings.map(x => x.length));\n  for (let s of strings) {\n    if (s.length === maxLen) {\n      return s;\n    }\n  }\n}",
  "13": "function greatestCommonDivisor(a, b) {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}",
  "14": "function allPrefixes(string) {\n  const result = [];\n\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.substring(0, i + 1));\n  }\n  return result;\n}",
  "15": "function stringSequence(n) {\n  return Array.from({ length: n + 1 }, (_, i) => i).join(' ');\n}",
  "16": "function countDistinctCharacters(string) {\n  return new Set(string.toLowerCase()).size;\n}",
  "17": "function parseMusic(musicString) {\n  const noteMap = {'o': 4, 'o|': 2, '.|': 1};\n  return musicString.split(' ').filter(x => x).map(x => noteMap[x]);\n}",
  "18": "function howManyTimes(string, substring) {\n  let times = 0;\n\n  for (let i = 0; i <= string.length - substring.length; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      times++;\n    }\n  }\n\n  return times;\n}",
  "19": "function sortNumbers(numbers) {\n  const valueMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ').filter(x => x).sort((a, b) => valueMap[a] - valueMap[b]).join(' ');\n}",
  "20": "function findClosestElements(numbers) {\n  let closestPair = null;\n  let distance = null;\n\n  for (let idx = 0; idx < numbers.length; idx++) {\n    const elem = numbers[idx];\n    for (let idx2 = 0; idx2 < numbers.length; idx2++) {\n      if (idx !== idx2) {\n        const elem2 = numbers[idx2];\n        if (distance === null) {\n          distance = Math.abs(elem - elem2);\n          closestPair = [elem, elem2].sort((a, b) => a - b);\n        } else {\n          const newDistance = Math.abs(elem - elem2);\n          if (newDistance < distance) {\n            distance = newDistance;\n            closestPair = [elem, elem2].sort((a, b) => a - b);\n          }\n        }\n      }\n    }\n  }\n\n  return closestPair;\n}",
  "21": "function rescaleToUnit(numbers) {\n  const minNumber = Math.min(...numbers);\n  const maxNumber = Math.max(...numbers);\n  return numbers.map(x => (x - minNumber) / (maxNumber - minNumber));\n}",
  "22": "function filterIntegers(values) {\n  return values.filter(x => Number.isInteger(x));\n}",
  "23": "function strLen(string) {\n  return string.length;\n}",
  "24": "function largestDivisor(n) {\n  for (let i = n - 1; i >= 1; i--) {\n    if (n % i === 0) {\n      return i;\n    }\n  }\n}",
  "25": "function factorize(n) {\n  const fact = [];\n  let i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i === 0) {\n      fact.push(i);\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}",
  "26": "function removeDuplicates(numbers) {\n  const counts = {};\n  for (const number of numbers) {\n    counts[number] = (counts[number] || 0) + 1;\n  }\n\n  const result = [];\n  for (const number of numbers) {\n    if (counts[number] <= 1) {\n      result.push(number);\n    }\n  }\n  return result;\n}",
  "27": "function flipCase(string) {\n  let result = \"\";\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char >= 'a' && char <= 'z') {\n      result += char.toUpperCase();\n    } else if (char >= 'A' && char <= 'Z') {\n      result += char.toLowerCase();\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}",
  "28": "function concatenate(strings) {\n  return strings.join('');\n}",
  "29": "function filterByPrefix(strings, prefix) {\n  return strings.filter(str => str.startsWith(prefix));\n}",
  "30": "function getPositive(l) {\n  return l.filter(e => e > 0);\n}",
  "31": "function isPrime(n) {\n  if (n < 2) {\n    return false;\n  }\n  for (let k = 2; k < n; k++) {\n    if (n % k === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
  "32": "function poly(xs, x) {\n  /**\n   * Evaluates polynomial with coefficients xs at point x.\n   * return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n   */\n  return xs.reduce((sum, coeff, i) => sum + coeff * Math.pow(x, i), 0);\n}\n\nfunction findZero(xs) {\n  let begin = -1.0;\n  let end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    const center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0) {\n      begin = center;\n    } else {\n      end = center;\n    }\n  }\n  return begin;\n}",
  "33": "function sortThird(l) {\n  l = [...l];\n  let thirdElements = [];\n  for (let i = 0; i < l.length; i += 3) {\n    thirdElements.push(l[i]);\n  }\n  thirdElements.sort((a, b) => a - b);\n  let thirdIndex = 0;\n  for (let i = 0; i < l.length; i += 3) {\n    if (thirdIndex < thirdElements.length) {\n      l[i] = thirdElements[thirdIndex];\n      thirdIndex++;\n    }\n  }\n  return l;\n}",
  "34": "function unique(l) {\n  return Array.from(new Set(l)).sort();\n}",
  "35": "function maxElement(l) {\n  let m = l[0];\n  for (let e of l) {\n    if (e > m) {\n      m = e;\n    }\n  }\n  return m;\n}",
  "36": "function fizzBuzz(n) {\n  let nums = [];\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      nums.push(i);\n    }\n  }\n  let s = nums.map(String).join('');\n  let ans = 0;\n  for (let c of s) {\n    if (c === '7') {\n      ans++;\n    }\n  }\n  return ans;\n}",
  "37": "function sortEven(l) {\n  const evens = l.filter((_, i) => i % 2 === 0);\n  const odds = l.filter((_, i) => i % 2 !== 0);\n  evens.sort((a, b) => a - b);\n  const ans = [];\n  for (let i = 0; i < Math.min(evens.length, odds.length); i++) {\n    ans.push(evens[i]);\n    ans.push(odds[i]);\n  }\n  if (evens.length > odds.length) {\n    ans.push(evens[evens.length - 1]);\n  }\n  return ans;\n}",
  "38": "function encodeCyclic(s) {\n  // split string to groups. Each of length 3.\n  const groups = Array.from({ length: Math.floor((s.length + 2) / 3) }, (_, i) =>\n    s.slice(3 * i, Math.min(3 * i + 3, s.length))\n  );\n  // cycle elements in each group. Unless group has fewer elements than 3.\n  const cycledGroups = groups.map(group =>\n    group.length === 3 ? group.slice(1) + group[0] : group\n  );\n  return cycledGroups.join(\"\");\n}\n\nfunction decodeCyclic(s) {\n  return encodeCyclic(encodeCyclic(s));\n}",
  "39": "function primeFib(n) {\n  function isPrime(p) {\n    if (p < 2) {\n      return false;\n    }\n    for (let k = 2; k <= Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let f = [0, 1];\n  while (true) {\n    f.push(f[f.length - 1] + f[f.length - 2]);\n    if (isPrime(f[f.length - 1])) {\n      n--;\n    }\n    if (n === 0) {\n      return f[f.length - 1];\n    }\n  }\n}",
  "40": "function triplesSumToZero(l) {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
  "41": "function carRaceCollision(n) {\n  return n**2;\n}",
  "42": "function incrList(l) {\n  return l.map(e => e + 1);\n}",
  "43": "function pairsSumToZero(l) {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "44": "function changeBase(x, base) {\n  let ret = \"\";\n  while (x > 0) {\n    ret = String(x % base) + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}",
  "45": "function triangleArea(a, h) {\n  return a * h / 2.0;\n}",
  "46": "function fib4(n) {\n  let results = [0, 0, 2, 0];\n  if (n < 4) {\n    return results[n];\n  }\n\n  for (let i = 4; i <= n; i++) {\n    results.push(results[results.length - 1] + results[results.length - 2] + results[results.length - 3] + results[results.length - 4]);\n    results.shift();\n  }\n\n  return results[results.length - 1];\n}",
  "47": "function median(l) {\n  l = [...l].sort((a, b) => a - b);\n  if (l.length % 2 === 1) {\n    return l[Math.floor(l.length / 2)];\n  } else {\n    return (l[l.length / 2 - 1] + l[l.length / 2]) / 2.0;\n  }\n}",
  "48": "function isPalindrome(text) {\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] !== text[text.length - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}",
  "49": "function modp(n, p) {\n  let ret = 1;\n  for (let i = 0; i < n; i++) {\n    ret = (2 * ret) % p;\n  }\n  return ret;\n}",
  "50": "function encodeShift(s) {\n  return [...s].map(ch => String.fromCharCode(((ch.charCodeAt(0) + 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}\n\nfunction decodeShift(s) {\n    return [...s].map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - 'a'.charCodeAt(0)) % 26) + 'a'.charCodeAt(0))).join('');\n}",
  "51": "function removeVowels(text) {\n  return Array.from(text).filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase())).join(\"\");\n}",
  "52": "function belowThreshold(list, threshold) {\n  for (let element of list) {\n    if (element >= threshold) {\n      return false;\n    }\n  }\n  return true;\n}",
  "53": "function add(x, y) {\n  return x + y;\n}",
  "54": "function sameChars(s0, s1) {\n  return new Set(s0).size === new Set(s1).size && [...new Set(s0)].every(char => new Set(s1).has(char));\n}",
  "55": "function fib(n) {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}",
  "56": "function correctBracketing(brackets) {\n  let depth = 0;\n  for (let b of brackets) {\n    if (b === \"<\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}",
  "57": "function isMonotonic(l) {\n  const sortedL = [...l].sort((a, b) => a - b);\n  const sortedLReverse = [...l].sort((a, b) => b - a);\n\n  if (JSON.stringify(l) === JSON.stringify(sortedL) || JSON.stringify(l) === JSON.stringify(sortedLReverse)) {\n    return true;\n  }\n  return false;\n}",
  "58": "function common(list1, list2) {\n  const ret = new Set();\n  for (const e1 of list1) {\n    for (const e2 of list2) {\n      if (e1 === e2) {\n        ret.add(e1);\n      }\n    }\n  }\n  return Array.from(ret).sort((a, b) => a - b);\n}",
  "59": "function largestPrimeFactor(n) {\n\n    function isPrime(k) {\n        if (k < 2) {\n            return false;\n        }\n        for (let i = 2; i < k; i++) {\n            if (k % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let largest = 1;\n    for (let j = 2; j <= n; j++) {\n        if (n % j === 0 && isPrime(j)) {\n            largest = Math.max(largest, j);\n        }\n    }\n    return largest;\n}",
  "60": "function sumToN(n) {\n  let sum = 0;\n  for (let i = 0; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}",
  "61": "function correctBracketing(brackets) {\n  let depth = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const b = brackets[i];\n    if (b === \"(\") {\n      depth += 1;\n    } else {\n      depth -= 1;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n}",
  "62": "function derivative(xs) {\n  return xs.map((x, i) => i * x).slice(1);\n}",
  "63": "function fibfib(n) {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}",
  "64": "function vowelsCount(s) {\n  const vowels = \"aeiouAEIOU\";\n  let nVowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      nVowels++;\n    }\n  }\n\n  if (s[s.length - 1] === 'y' || s[s.length - 1] === 'Y') {\n    nVowels += 1;\n  }\n  return nVowels;\n}",
  "65": "function circularShift(x, shift) {\n  const s = String(x);\n  if (shift > s.length) {\n    return s.split(\"\").reverse().join(\"\");\n  } else {\n    return s.substring(s.length - shift) + s.substring(0, s.length - shift);\n  }\n}",
  "66": "function digitSum(s) {\n  if (s === \"\") {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if (char === char.toUpperCase() && char !== char.toLowerCase()) {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}",
  "67": "function fruitDistribution(s, n) {\n  let lis = [];\n  for (let i of s.split(' ')) {\n    if (i.match(/^\\d+$/)) {\n      lis.push(parseInt(i));\n    }\n  }\n  return n - lis.reduce((a, b) => a + b, 0);\n}",
  "68": "function pluck(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const evens = arr.filter(x => x % 2 === 0);\n\n  if (evens.length === 0) {\n    return [];\n  }\n\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}",
  "69": "function search(lst) {\n  const maxVal = Math.max(...lst);\n  const frq = new Array(maxVal + 1).fill(0);\n\n  for (let i = 0; i < lst.length; i++) {\n    frq[lst[i]] += 1;\n  }\n\n  let ans = -1;\n  for (let i = 1; i < frq.length; i++) {\n    if (frq[i] >= i) {\n      ans = i;\n    }\n  }\n\n  return ans;\n}",
  "70": "function strangeSortList(lst) {\n  let res = [];\n  let switchVal = true;\n  while (lst.length > 0) {\n    if (switchVal) {\n      let minVal = Math.min(...lst);\n      res.push(minVal);\n      lst.splice(lst.indexOf(minVal), 1);\n    } else {\n      let maxVal = Math.max(...lst);\n      res.push(maxVal);\n      lst.splice(lst.indexOf(maxVal), 1);\n    }\n    switchVal = !switchVal;\n  }\n  return res;\n}",
  "71": "function triangleArea(a, b, c) {\n  if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1;\n  }\n  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  area = Math.round(area * 100) / 100;\n  return area;\n}",
  "72": "function willItFly(q, w) {\n  if (q.reduce((a, b) => a + b, 0) > w) {\n    return false;\n  }\n\n  let i = 0;\n  let j = q.length - 1;\n  while (i < j) {\n    if (q[i] !== q[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}",
  "73": "function smallestChange(arr) {\n  let ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++) {\n    if (arr[i] !== arr[arr.length - i - 1]) {\n      ans += 1;\n    }\n  }\n  return ans;\n}",
  "74": "function totalMatch(lst1, lst2) {\n  let l1 = 0;\n  for (let st of lst1) {\n    l1 += st.length;\n  }\n\n  let l2 = 0;\n  for (let st of lst2) {\n    l2 += st.length;\n  }\n\n  if (l1 <= l2) {\n    return lst1;\n  } else {\n    return lst2;\n  }\n}",
  "75": "function isMultiplyPrime(a) {\n\n    function isPrime(n) {\n        for (let j = 2; j < n; j++) {\n            if (n % j === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    for (let i = 2; i <= 100; i++) {\n        if (!isPrime(i)) continue;\n        for (let j = 2; j <= 100; j++) {\n            if (!isPrime(j)) continue;\n            for (let k = 2; k <= 100; k++) {\n                if (!isPrime(k)) continue;\n                if (i * j * k === a) return true;\n            }\n        }\n    }\n    return false;\n}",
  "76": "function isSimplePower(x, n) {\n  if (n == 1) {\n    return (x == 1);\n  }\n  let power = 1;\n  while (power < x) {\n    power = power * n;\n  }\n  return (power == x);\n}",
  "77": "function isCube(a) {\n  a = Math.abs(a);\n  return Math.pow(Math.round(Math.pow(a, (1.0 / 3))), 3) === a;\n}",
  "78": "function hexKey(num) {\n  const primes = ['2', '3', '5', '7', 'B', 'D'];\n  let total = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (primes.includes(num[i])) {\n      total += 1;\n    }\n  }\n  return total;\n}",
  "79": "function decimalToBinary(decimal) {\n  return \"db\" + decimal.toString(2) + \"db\";\n}",
  "80": "function isHappy(s) {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i + 1] === s[i + 2] || s[i] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n}",
  "81": "function numericalLetterGrade(grades) {\n  let letterGrade = [];\n  for (let gpa of grades) {\n    if (gpa === 4.0) {\n      letterGrade.push(\"A+\");\n    } else if (gpa > 3.7) {\n      letterGrade.push(\"A\");\n    } else if (gpa > 3.3) {\n      letterGrade.push(\"A-\");\n    } else if (gpa > 3.0) {\n      letterGrade.push(\"B+\");\n    } else if (gpa > 2.7) {\n      letterGrade.push(\"B\");\n    } else if (gpa > 2.3) {\n      letterGrade.push(\"B-\");\n    } else if (gpa > 2.0) {\n      letterGrade.push(\"C+\");\n    } else if (gpa > 1.7) {\n      letterGrade.push(\"C\");\n    } else if (gpa > 1.3) {\n      letterGrade.push(\"C-\");\n    } else if (gpa > 1.0) {\n      letterGrade.push(\"D+\");\n    } else if (gpa > 0.7) {\n      letterGrade.push(\"D\");\n    } else if (gpa > 0.0) {\n      letterGrade.push(\"D-\");\n    } else {\n      letterGrade.push(\"E\");\n    }\n  }\n  return letterGrade;\n}",
  "82": "function primeLength(string) {\n  let l = string.length;\n  if (l === 0 || l === 1) {\n    return false;\n  }\n  for (let i = 2; i < l; i++) {\n    if (l % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}",
  "83": "function startsOneEnds(n) {\n  if (n == 1) {\n    return 1;\n  }\n  return 18 * (10 ** (n - 2));\n}",
  "84": "function solve(n) {\n  const sumOfDigits = String(n)\n    .split('')\n    .map(Number)\n    .reduce((a, b) => a + b, 0);\n  return sumOfDigits.toString(2);\n}",
  "85": "function add(lst) {\n  let sum = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
  "86": "function antiShuffle(s) {\n  return s.split(' ').map(word => word.split('').sort().join('')).join(' ');\n}",
  "87": "function getRow(lst, x) {\n  let coords = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        coords.push([i, j]);\n      }\n    }\n  }\n\n  return coords.sort((a, b) => a[0] - b[0]);\n}",
  "88": "function sortArray(array) {\n  if (array.length === 0) {\n    return [];\n  } else {\n    const shouldReverse = (array[0] + array[array.length - 1]) % 2 === 0;\n    return [...array].sort((a, b) => shouldReverse ? b - a : a - b);\n  }\n}",
  "89": "function encrypt(s) {\n  const d = 'abcdefghijklmnopqrstuvwxyz';\n  let out = '';\n  for (let c of s) {\n    if (d.includes(c)) {\n      out += d[(d.indexOf(c) + 2 * 2) % 26];\n    } else {\n      out += c;\n    }\n  }\n  return out;\n}",
  "90": "function nextSmallest(lst) {\n  const uniqueList = [...new Set(lst)];\n  uniqueList.sort((a, b) => a - b);\n  return uniqueList.length < 2 ? null : uniqueList[1];\n}",
  "91": "function isBored(S) {\n  const sentences = S.split(/[.?!]\\s*/);\n  let count = 0;\n  for (const sentence of sentences) {\n    if (sentence.slice(0, 2) === 'I ') {\n      count++;\n    }\n  }\n  return count;\n}",
  "92": "function anyInt(x, y, z) {\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    if ((x + y === z) || (x + z === y) || (y + z === x)) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}",
  "93": "function encode(message) {\n  const vowels = \"aeiouAEIOU\";\n  const vowelsReplace = {};\n  for (let i = 0; i < vowels.length; i++) {\n    vowelsReplace[vowels[i]] = String.fromCharCode(vowels[i].charCodeAt(0) + 2);\n  }\n\n  let swappedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === message[i].toUpperCase()) {\n      swappedMessage += message[i].toLowerCase();\n    } else {\n      swappedMessage += message[i].toUpperCase();\n    }\n  }\n\n  let encodedMessage = \"\";\n  for (let i = 0; i < swappedMessage.length; i++) {\n    if (vowels.includes(swappedMessage[i])) {\n      encodedMessage += vowelsReplace[swappedMessage[i]];\n    } else {\n      encodedMessage += swappedMessage[i];\n    }\n  }\n\n  return encodedMessage;\n}",
  "94": "function skjkasdkd(lst) {\n\n    function isPrime(n) {\n        if (n <= 1) return false;\n        for (let i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    let maxx = 0;\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] > maxx && isPrime(lst[i])) {\n            maxx = lst[i];\n        }\n        i++;\n    }\n    let result = 0;\n    const maxxStr = String(maxx);\n    for (let j = 0; j < maxxStr.length; j++) {\n        result += parseInt(maxxStr[j]);\n    }\n    return result;\n}",
  "95": "function checkDictCase(dict) {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  } else {\n    let state = \"start\";\n    for (const key in dict) {\n      if (typeof key !== 'string') {\n        state = \"mixed\";\n        break;\n      }\n      if (state === \"start\") {\n        if (key === key.toUpperCase()) {\n          state = \"upper\";\n        } else if (key === key.toLowerCase()) {\n          state = \"lower\";\n        } else {\n          break;\n        }\n      } else if ((state === \"upper\" && key !== key.toUpperCase()) || (state === \"lower\" && key !== key.toLowerCase())) {\n        state = \"mixed\";\n        break;\n      } else {\n        break;\n      }\n    }\n    return state === \"upper\" || state === \"lower\";\n  }\n}",
  "96": "function countUpTo(n) {\n  let primes = [];\n  for (let i = 2; i < n; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}",
  "97": "function multiply(a, b) {\n  return Math.abs(a % 10) * Math.abs(b % 10);\n}",
  "98": "function countUpper(s) {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (\"AEIOU\".includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n}",
  "99": "function closestInteger(value) {\n  if (value.includes('.')) {\n    // remove trailing zeros\n    while (value.length > 0 && value.slice(-1) === '0') {\n      value = value.slice(0, -1);\n    }\n  }\n\n  const num = parseFloat(value);\n  if (value.slice(-2) === '.5') {\n    if (num > 0) {\n      return Math.ceil(num);\n    } else {\n      return Math.floor(num);\n    }\n  } else if (value.length > 0) {\n    return Math.round(num);\n  } else {\n    return 0;\n  }\n}",
  "100": "function makeAPile(n) {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(n + 2 * i);\n  }\n  return result;\n}",
  "101": "function wordsString(s) {\n  if (!s) {\n    return [];\n  }\n\n  let sList = [];\n\n  for (let letter of s) {\n    if (letter === ',') {\n      sList.push(' ');\n    } else {\n      sList.push(letter);\n    }\n  }\n\n  sList = sList.join(\"\");\n  return sList.split(\" \");\n}",
  "102": "function chooseNum(x, y) {\n  if (x > y) {\n    return -1;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  if (x === y) {\n    return -1;\n  }\n  return y - 1;\n}",
  "103": "function roundedAvg(n, m) {\n  if (m < n) {\n    return -1;\n  }\n  let summation = 0;\n  for (let i = n; i <= m; i++) {\n    summation += i;\n  }\n  return (Math.round(summation / (m - n + 1))).toString(2);\n}",
  "104": "function uniqueDigits(x) {\n  const oddDigitElements = [];\n  for (const i of x) {\n    const strI = String(i);\n    if (Array.from(strI).every(c => parseInt(c) % 2 === 1)) {\n      oddDigitElements.push(i);\n    }\n  }\n  return oddDigitElements.sort((a, b) => a - b);\n}",
  "105": "function byLength(arr) {\n  const dic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n  };\n  const sortedArr = [...arr].sort((a, b) => b - a);\n  const newArr = [];\n  for (const varr of sortedArr) {\n    if (dic[varr]) {\n      newArr.push(dic[varr]);\n    }\n  }\n  return newArr;\n}",
  "106": "function f(n) {\n  let ret = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      let x = 1;\n      for (let j = 1; j <= i; j++) {\n        x *= j;\n      }\n      ret.push(x);\n    } else {\n      let x = 0;\n      for (let j = 1; j <= i; j++) {\n        x += j;\n      }\n      ret.push(x);\n    }\n  }\n  return ret;\n}",
  "107": "function evenOddPalindrome(n) {\n\n    function isPalindrome(n) {\n        const strN = String(n);\n        return strN === strN.split(\"\").reverse().join(\"\");\n    }\n\n    let evenPalindromeCount = 0;\n    let oddPalindromeCount = 0;\n\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 1 && isPalindrome(i)) {\n            oddPalindromeCount++;\n        } else if (i % 2 === 0 && isPalindrome(i)) {\n            evenPalindromeCount++;\n        }\n    }\n    return [evenPalindromeCount, oddPalindromeCount];\n}",
  "108": "function countNums(arr) {\n  function digitsSum(n) {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    const nStr = String(n);\n    const nArr = nStr.split(\"\").map(Number);\n    nArr[0] = nArr[0] * neg;\n    return nArr.reduce((sum, digit) => sum + digit, 0);\n  }\n\n  return arr.map(digitsSum).filter(x => x > 0).length;\n}",
  "109": "function moveOneBall(arr) {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  const sortedArray = [...arr].sort((a, b) => a - b);\n  let myArr = [];\n\n  const minValue = Math.min(...arr);\n  const minIndex = arr.indexOf(minValue);\n\n  myArr = arr.slice(minIndex).concat(arr.slice(0, minIndex));\n\n  for (let i = 0; i < arr.length; i++) {\n    if (myArr[i] !== sortedArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}",
  "110": "function exchange(lst1, lst2) {\n  let odd = 0;\n  let even = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 1) {\n      odd += 1;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      even += 1;\n    }\n  }\n  if (even >= odd) {\n    return \"YES\";\n  }\n  return \"NO\";\n}",
  "111": "function histogram(test) {\n  const dict1 = {};\n  const list1 = test.split(\" \");\n  let t = 0;\n\n  for (let i = 0; i < list1.length; i++) {\n    if (list1.filter(x => x === list1[i]).length > t && list1[i] !== '') {\n      t = list1.filter(x => x === list1[i]).length;\n    }\n  }\n  if (t > 0) {\n    for (let i = 0; i < list1.length; i++) {\n      if (list1.filter(x => x === list1[i]).length === t) {\n        dict1[list1[i]] = t;\n      }\n    }\n  }\n  return dict1;\n}",
  "112": "function reverseDelete(s, c) {\n  let newString = \"\";\n  for (let char of s) {\n    if (!c.includes(char)) {\n      newString += char;\n    }\n  }\n  return [newString, newString === newString.split(\"\").reverse().join(\"\")];\n}",
  "113": "function oddCount(lst) {\n  const res = [];\n  for (const arr of lst) {\n    let n = 0;\n    for (const d of arr) {\n      if (parseInt(d) % 2 === 1) {\n        n++;\n      }\n    }\n    res.push(\"the number of odd elements \" + String(n) + \"n the str\" + String(n) + \"ng \" + String(n) + \" of the \" + String(n) + \"nput.\");\n  }\n  return res;\n}",
  "114": "function minSubArraySum(nums) {\n  let maxSum = 0;\n  let s = 0;\n  for (let num of nums) {\n    s += -num;\n    if (s < 0) {\n      s = 0;\n    }\n    maxSum = Math.max(s, maxSum);\n  }\n  if (maxSum === 0) {\n    maxSum = Math.max(...nums.map(i => -i));\n  }\n  let minSum = -maxSum;\n  return minSum;\n}",
  "115": "function maxFill(grid, capacity) {\n  return grid.reduce((acc, arr) => {\n    const sum = arr.reduce((a, b) => a + b, 0);\n    return acc + Math.ceil(sum / capacity);\n  }, 0);\n}",
  "116": "function sortArray(arr) {\n  return arr.sort((a, b) => {\n    const countA = a.toString(2).split('').filter(bit => bit === '1').length;\n    const countB = b.toString(2).split('').filter(bit => bit === '1').length;\n    if (countA !== countB) {\n      return countA - countB;\n    } else {\n      return a - b;\n    }\n  });\n}",
  "117": "function selectWords(s, n) {\n  let result = [];\n  for (let word of s.split(\" \")) {\n    let nConsonants = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(word[i].toLowerCase())) {\n        nConsonants += 1;\n      }\n    }\n    if (nConsonants === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}",
  "118": "function getClosestVowel(word) {\n  if (word.length < 3) {\n    return \"\";\n  }\n\n  const vowels = new Set([\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"]);\n  for (let i = word.length - 2; i > 0; i--) {\n    if (vowels.has(word[i])) {\n      if (!vowels.has(word[i + 1]) && !vowels.has(word[i - 1])) {\n        return word[i];\n      }\n    }\n  }\n  return \"\";\n}",
  "119": "function matchParens(lst) {\n\n    function check(s) {\n        let val = 0;\n        for (let i = 0; i < s.length; i++) {\n            if (s[i] === '(') {\n                val = val + 1;\n            } else {\n                val = val - 1;\n            }\n            if (val < 0) {\n                return false;\n            }\n        }\n        return val === 0;\n    }\n\n    const s1 = lst[0] + lst[1];\n    const s2 = lst[1] + lst[0];\n    return check(s1) || check(s2) ? 'Yes' : 'No';\n}",
  "120": "function maximum(arr, k) {\n  if (k === 0) {\n    return [];\n  }\n  arr.sort((a, b) => a - b);\n  const ans = arr.slice(-k);\n  return ans;\n}",
  "121": "function solution(lst) {\n  return lst.reduce((sum, x, idx) => {\n    if (idx % 2 === 0 && x % 2 === 1) {\n      return sum + x;\n    }\n    return sum;\n  }, 0);\n}",
  "122": "function addElements(arr, k) {\n  let sum = 0;\n  for (let i = 0; i < Math.min(k, arr.length); i++) {\n    if (String(arr[i]).length <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}",
  "123": "function getOddCollatz(n) {\n  let oddCollatz;\n\n  if (n % 2 === 0) {\n    oddCollatz = [];\n  } else {\n    oddCollatz = [n];\n  }\n\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n\n    if (n % 2 === 1) {\n      oddCollatz.push(Math.trunc(n));\n    }\n  }\n\n  return oddCollatz.sort((a, b) => a - b);\n}",
  "124": "function validDate(date) {\n  try {\n    date = date.trim();\n    const [month, day, year] = date.split('-').map(Number);\n\n    if (month < 1 || month > 12) {\n      return false;\n    }\n\n    if ([1, 3, 5, 7, 8, 10, 12].includes(month) && (day < 1 || day > 31)) {\n      return false;\n    }\n\n    if ([4, 6, 9, 11].includes(month) && (day < 1 || day > 30)) {\n      return false;\n    }\n\n    if (month === 2 && (day < 1 || day > 29)) {\n      return false;\n    }\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}",
  "125": "function splitWords(txt) {\n  if (txt.includes(\" \")) {\n    return txt.split(\" \");\n  } else if (txt.includes(\",\")) {\n    return txt.replace(/,/g, \" \").split(\" \");\n  } else {\n    let count = 0;\n    for (let i = 0; i < txt.length; i++) {\n      if (txt[i] >= 'a' && txt[i] <= 'z' && txt.charCodeAt(i) % 2 === 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
  "126": "function isSorted(lst) {\n  const countDigit = {};\n  for (const i of lst) {\n    countDigit[i] = 0;\n  }\n  for (const i of lst) {\n    countDigit[i] += 1;\n  }\n  for (const i in countDigit) {\n    if (countDigit[i] > 2) {\n      return false;\n    }\n  }\n  if (lst.length <= 1) {\n    return true;\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n  }\n  return true;\n}",
  "127": "function intersection(interval1, interval2) {\n\n    function isPrime(num) {\n        if (num === 1 || num === 0) {\n            return false;\n        }\n        if (num === 2) {\n            return true;\n        }\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    let l = Math.max(interval1[0], interval2[0]);\n    let r = Math.min(interval1[1], interval2[1]);\n    let length = r - l;\n    if (length > 0 && isPrime(length)) {\n        return \"YES\";\n    }\n    return \"NO\";\n}",
  "128": "function prodSigns(arr) {\n  if (!arr) return null;\n  const prod = arr.includes(0) ? 0 : Math.pow(-1, arr.filter(x => x < 0).length);\n  return prod * arr.reduce((sum, i) => sum + Math.abs(i), 0);\n}",
  "129": "function minPath(grid, k) {\n    const n = grid.length;\n    let val = n * n + 1;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === 1) {\n                const temp = [];\n                if (i !== 0) {\n                    temp.push(grid[i - 1][j]);\n                }\n\n                if (j !== 0) {\n                    temp.push(grid[i][j - 1]);\n                }\n\n                if (i !== n - 1) {\n                    temp.push(grid[i + 1][j]);\n                }\n\n                if (j !== n - 1) {\n                    temp.push(grid[i][j + 1]);\n                }\n\n                val = Math.min(...temp);\n            }\n        }\n    }\n\n    const ans = [];\n    for (let i = 0; i < k; i++) {\n        if (i % 2 === 0) {\n            ans.push(1);\n        } else {\n            ans.push(val);\n        }\n    }\n    return ans;\n}",
  "130": "function tri(n) {\n  if (n === 0) {\n    return [1];\n  }\n  let myTri = [1, 3];\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 === 0) {\n      myTri.push(i / 2 + 1);\n    } else {\n      myTri.push(myTri[i - 1] + myTri[i - 2] + (i + 3) / 2);\n    }\n  }\n  return myTri;\n}",
  "131": "function digits(n) {\n  let product = 1;\n  let oddCount = 0;\n  const nStr = String(n);\n  for (let i = 0; i < nStr.length; i++) {\n    const digit = parseInt(nStr[i]);\n    if (digit % 2 === 1) {\n      product = product * digit;\n      oddCount++;\n    }\n  }\n  if (oddCount === 0) {\n    return 0;\n  } else {\n    return product;\n  }\n}",
  "132": "function isNested(string) {\n  const openingBracketIndex = [];\n  const closingBracketIndex = [];\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      openingBracketIndex.push(i);\n    } else {\n      closingBracketIndex.push(i);\n    }\n  }\n\n  closingBracketIndex.reverse();\n\n  let count = 0;\n  let i = 0;\n  const l = closingBracketIndex.length;\n\n  for (const idx of openingBracketIndex) {\n    if (i < l && idx < closingBracketIndex[i]) {\n      count++;\n      i++;\n    }\n  }\n\n  return count >= 2;\n}",
  "133": "function sumSquares(lst) {\n  let squared = 0;\n  for (let i = 0; i < lst.length; i++) {\n    squared += Math.ceil(lst[i])**2;\n  }\n  return squared;\n}",
  "134": "function checkIfLastCharIsALetter(txt) {\n  const check = txt.split(' ').pop();\n  return check.length === 1 && (check.toLowerCase().charCodeAt(0) >= 97 && check.toLowerCase().charCodeAt(0) <= 122);\n}",
  "135": "function canArrange(arr) {\n  let ind = -1;\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] < arr[i - 1]) {\n      ind = i;\n    }\n    i++;\n  }\n  return ind;\n}",
  "136": "function largestSmallestIntegers(lst) {\n  const smallest = lst.filter(x => x < 0);\n  const largest = lst.filter(x => x > 0);\n  return [smallest.length > 0 ? Math.max(...smallest) : null, largest.length > 0 ? Math.min(...largest) : null];\n}",
  "137": "function compareOne(a, b) {\n  let tempA = a;\n  let tempB = b;\n  if (typeof tempA === 'string') tempA = tempA.replace(',', '.');\n  if (typeof tempB === 'string') tempB = tempB.replace(',', '.');\n  if (parseFloat(tempA) === parseFloat(tempB)) return null;\n  return parseFloat(tempA) > parseFloat(tempB) ? a : b;\n}",
  "138": "function isEqual \u0441\u0443\u043cEven(n) {\n  return n % 2 === 0 && n >= 8;\n}",
  "139": "function specialFactorial(n) {\n  let factI = 1;\n  let specialFact = 1;\n  for (let i = 1; i <= n; i++) {\n    factI *= i;\n    specialFact *= factI;\n  }\n  return specialFact;\n}",
  "140": "function fixSpaces(text) {\n  let newText = \"\";\n  let i = 0;\n  let start = 0;\n  let end = 0;\n  while (i < text.length) {\n    if (text[i] === \" \") {\n      end += 1;\n    } else {\n      if (end - start > 2) {\n        newText += \"-\" + text[i];\n      } else if (end - start > 0) {\n        newText += \"_\".repeat(end - start) + text[i];\n      } else {\n        newText += text[i];\n      }\n      start = i + 1;\n      end = i + 1;\n    }\n    i += 1;\n  }\n  if (end - start > 2) {\n    newText += \"-\";\n  } else if (end - start > 0) {\n    newText += \"_\";\n  }\n  return newText;\n}",
  "141": "function fileNameCheck(fileName) {\n  const suf = ['txt', 'exe', 'dll'];\n  const lst = fileName.split('.');\n  if (lst.length !== 2) {\n    return 'No';\n  }\n  if (!suf.includes(lst[1])) {\n    return 'No';\n  }\n  if (lst[0].length === 0) {\n    return 'No';\n  }\n  if (!lst[0][0].match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n  let t = 0;\n  for (let x of lst[0]) {\n    if (x.match(/\\d/)) {\n      t++;\n    }\n  }\n  if (t > 3) {\n    return 'No';\n  }\n  return 'Yes';\n}",
  "142": "function sumSquares(lst) {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result.push(lst[i] ** 2);\n    } else if (i % 4 === 0) {\n      result.push(lst[i] ** 3);\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < result.length; i++) {\n    sum += result[i];\n  }\n  return sum;\n}",
  "143": "function wordsInSentence(sentence) {\n  let newLst = [];\n  for (const word of sentence.split(\" \")) {\n    let flg = 0;\n    if (word.length === 1) {\n      flg = 1;\n    }\n    for (let i = 2; i < word.length; i++) {\n      if (word.length % i === 0) {\n        flg = 1;\n      }\n    }\n    if (flg === 0 || word.length === 2) {\n      newLst.push(word);\n    }\n  }\n  return newLst.join(\" \");\n}",
  "144": "function simplify(x, n) {\n  const [a, b] = x.split(\"/\");\n  const [c, d] = n.split(\"/\");\n  const numerator = parseInt(a) * parseInt(c);\n  const denom = parseInt(b) * parseInt(d);\n  if (numerator / denom === Math.floor(numerator / denom)) {\n    return true;\n  }\n  return false;\n}",
  "145": "function orderByPoints(nums) {\n  function digitsSum(n) {\n    let neg = 1;\n    if (n < 0) {\n      n = -1 * n;\n      neg = -1;\n    }\n    const nStr = String(n);\n    const nArr = nStr.split(\"\").map(Number);\n    nArr[0] = nArr[0] * neg;\n    return nArr.reduce((sum, digit) => sum + digit, 0);\n  }\n\n  return nums.sort((a, b) => digitsSum(a) - digitsSum(b));\n}",
  "146": "function specialFilter(nums) {\n  let count = 0;\n  for (const num of nums) {\n    if (num > 10) {\n      const oddDigits = [1, 3, 5, 7, 9];\n      const numberAsString = String(num);\n      if (oddDigits.includes(Number(numberAsString[0])) && oddDigits.includes(Number(numberAsString[numberAsString.length - 1]))) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}",
  "147": "function getMaxTriples(n) {\n  const a = Array.from({ length: n }, (_, i) => (i + 1) * (i + 1) - (i + 1) + 1);\n  let ans = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((a[i] + a[j] + a[k]) % 3 === 0) {\n          ans.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return ans.length;\n}",
  "148": "function bf(planet1, planet2) {\n  const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  if (!planetNames.includes(planet1) || !planetNames.includes(planet2) || planet1 === planet2) {\n    return [];\n  }\n  const planet1Index = planetNames.indexOf(planet1);\n  const planet2Index = planetNames.indexOf(planet2);\n  if (planet1Index < planet2Index) {\n    return planetNames.slice(planet1Index + 1, planet2Index);\n  } else {\n    return planetNames.slice(planet2Index + 1, planet1Index);\n  }\n}",
  "149": "function sortedListSum(lst) {\n  lst.sort();\n  let newLst = [];\n  for (let i of lst) {\n    if (i.length % 2 === 0) {\n      newLst.push(i);\n    }\n  }\n  return newLst.sort((a, b) => a.length - b.length);\n}",
  "150": "function xOrY(n, x, y) {\n  if (n === 1) {\n    return y;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return y;\n    }\n  }\n  return x;\n}",
  "151": "function doubleTheDifference(lst) {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 !== 0 && String(lst[i]).indexOf(\".\") === -1) {\n      sum += lst[i] ** 2;\n    }\n  }\n  return sum;\n}",
  "152": "function compare(game, guess) {\n  return game.map((x, i) => Math.abs(x - guess[i]));\n}",
  "153": "function strongestExtension(className, extensions) {\n  let strong = extensions[0];\n  let myVal = extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - extensions[0].split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n  for (const s of extensions) {\n    const val = s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toUpperCase()).length - s.split('').filter(x => x.match(/[a-zA-Z]/) && x === x.toLowerCase()).length;\n    if (val > myVal) {\n      strong = s;\n      myVal = val;\n    }\n  }\n\n  const ans = className + \".\" + strong;\n  return ans;\n}",
  "154": "function cycpatternCheck(a, b) {\n  const l = b.length;\n  const pat = b + b;\n  for (let i = 0; i <= a.length - l; i++) {\n    for (let j = 0; j <= l; j++) {\n      if (a.substring(i, i + l) === pat.substring(j, j + l)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
  "155": "function evenOddCount(num) {\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i of String(Math.abs(num))) {\n    if (parseInt(i) % 2 === 0) {\n      evenCount += 1;\n    } else {\n      oddCount += 1;\n    }\n  }\n  return [evenCount, oddCount];\n}",
  "156": "function intToMiniRoman(number) {\n  const num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n  const sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"];\n  let i = 12;\n  let res = '';\n  while (number) {\n    const div = Math.floor(number / num[i]);\n    number %= num[i];\n    while (div) {\n      res += sym[i];\n      div -= 1;\n    }\n    i -= 1;\n  }\n  return res.toLowerCase();\n}",
  "157": "function rightAngleTriangle(a, b, c) {\n  return a * a === b * b + c * c || b * b === a * a + c * c || c * c === a * a + b * b;\n}",
  "158": "function findMax(words) {\n  return words.sort((a, b) => {\n    const setA = new Set(a);\n    const setB = new Set(b);\n    const lenA = setA.size;\n    const lenB = setB.size;\n\n    if (lenA !== lenB) {\n      return lenB - lenA;\n    } else {\n      return a.localeCompare(b);\n    }\n  })[0];\n}",
  "159": "function eat(number, need, remaining) {\n  if (need <= remaining) {\n    return [number + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}",
  "160": "function doAlgebra(operator, operand) {\n  let expression = String(operand[0]);\n  for (let i = 0; i < operator.length; i++) {\n    expression += operator[i] + String(operand[i + 1]);\n  }\n  return eval(expression);\n}",
  "161": "function solve(s) {\n  let flg = 0;\n  let idx = 0;\n  let newStr = s.split(\"\");\n  for (let i = 0; i < s.length; i++) {\n    if (/[a-zA-Z]/.test(s[i])) {\n      if (s[i] === s[i].toUpperCase()) {\n        newStr[idx] = s[i].toLowerCase();\n      } else {\n        newStr[idx] = s[i].toUpperCase();\n      }\n      flg = 1;\n    }\n    idx++;\n  }\n  s = newStr.join(\"\");\n  if (flg === 0) {\n    return s.split(\"\").reverse().join(\"\");\n  }\n  return s;\n}",
  "162": "function stringToMd5(text) {\n  if (!text) {\n    return null;\n  }\n\n  const crypto = require('crypto');\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text, 'ascii');\n  return md5Hash.digest('hex');\n}",
  "163": "function generateIntegers(a, b) {\n  const lower = Math.max(2, Math.min(a, b));\n  const upper = Math.min(8, Math.max(a, b));\n\n  const result = [];\n  for (let i = lower; i <= upper; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}"
}